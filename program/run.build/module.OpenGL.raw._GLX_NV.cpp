/* Generated code for Python source for module 'OpenGL.raw._GLX_NV'
 * created by Nuitka version 0.5.22
 *
 * This code is in part copyright 2016 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

/* The _module_OpenGL$raw$_GLX_NV is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_OpenGL$raw$_GLX_NV;
PyDictObject *moduledict_OpenGL$raw$_GLX_NV;

/* The module constants used, if any. */
extern PyObject *const_tuple_str_plain_GLX_ARB_multisample_int_pos_1_tuple;
static PyObject *const_str_digest_414e895a750d5a1d1c9e7b538fe702c7;
extern PyObject *const_int_pos_8401;
extern PyObject *const_str_plain_GLX_COLOR_INDEX_TYPE_SGIX;
extern PyObject *const_str_plain_GLX_OML_swap_method;
extern PyObject *const_list_str_empty_str_empty_str_plain_None_str_plain_None_list;
extern PyObject *const_str_plain_GLX_HYPERPIPE_STEREO_SGIX;
extern PyObject *const_int_pos_32865;
extern PyObject *const_int_pos_32864;
extern PyObject *const_int_pos_32867;
extern PyObject *const_int_pos_32866;
extern PyObject *const_tuple_str_chr_42_tuple;
extern PyObject *const_list_3c9ed202b8f22c762d54a2f0222c2b5a_list;
extern PyObject *const_tuple_str_plain_GLX_SGIX_dmbuffer_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_TRANSPARENT_BLUE_VALUE_EXT;
static PyObject *const_str_plain_glXGetRefreshRateSGI;
static PyObject *const_str_plain_glXBindSwapBarrierNV;
extern PyObject *const_tuple_str_plain_GLX_SGIX_swap_group_int_pos_1_tuple;
static PyObject *const_tuple_str_plain_GLX_BACK_EXT_int_pos_8416_tuple;
extern PyObject *const_str_plain_glXQueryHyperpipeNetworkSGIX;
static PyObject *const_tuple_str_plain_glXReleaseTextImageEXT_tuple;
extern PyObject *const_tuple_str_plain_platform_str_plain_constant_tuple;
extern PyObject *const_str_plain_GLX_SAVED_SGIX;
extern PyObject *const_int_pos_40;
static PyObject *const_str_plain_attrib_list;
extern PyObject *const_str_plain_pbuf;
extern PyObject *const_tuple_str_plain_GLX_NONE_EXT_int_pos_32768_tuple;
static PyObject *const_str_plain_GLX_VIDEO_OUT_DEPTH_NV;
extern PyObject *const_list_str_plain_None_list;
extern PyObject *const_int_pos_32816;
extern PyObject *const_str_plain_GLX_BACK_LEFT_BUFFER_BIT_SGIX;
extern PyObject *const_str_plain_Visual;
extern PyObject *const_str_plain_GLX_WINDOW_BIT_SGIX;
extern PyObject *const_str_plain_depth;
extern PyObject *const_tuple_str_plain_GLX_BLENDED_RGBA_SGIS_int_pos_32805_tuple;
extern PyObject *const_str_plain_struct___GLXcontextRec;
static PyObject *const_tuple_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT_int_pos_8402_tuple;
static PyObject *const_str_plain_GLX_TEXTURE_2D_BIT_EXT;
extern PyObject *const_tuple_str_plain_GLX_HYPERPIPE_RENDER_PIPE_SGIX_int_pos_2_tuple;
extern PyObject *const_int_pos_64;
extern PyObject *const_tuple_str_plain_GLX_SYNC_FRAME_SGIX_int_0_tuple;
extern PyObject *const_str_plain_GLX_STATIC_COLOR_EXT;
extern PyObject *const_tuple_str_plain_GLX_RENDER_TYPE_SGIX_int_pos_32785_tuple;
extern PyObject *const_list_18f477154d2fff5ffc050ea731cb93b4_list;
extern PyObject *const_str_plain_c_uint;
static PyObject *const_str_plain_GLX_AUX3_EXT;
extern PyObject *const_str_plain_barrier;
extern PyObject *const_list_29c8c37838f12b34e1d058b558f46607_list;
extern PyObject *const_tuple_str_plain_GLX_SAMPLE_BUFFERS_BIT_SGIX_int_pos_256_tuple;
extern PyObject *const_int_pos_4;
extern PyObject *const_tuple_str_plain_GLX_SGIX_visual_select_group_int_pos_1_tuple;
extern PyObject *const_int_neg_1;
extern PyObject *const_str_plain_GLX_GRAY_SCALE_EXT;
extern PyObject *const_tuple_str_plain_GLX_SGIX_fbconfig_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_glXGetAGPOffsetMESA_tuple;
static PyObject *const_str_plain_GLX_AUX8_EXT;
extern PyObject *const_tuple_str_plain_GLX_NV_float_buffer_int_pos_1_tuple;
static PyObject *const_str_plain_GLX_NV_video_out;
static PyObject *const_tuple_str_plain_glXQueryMaxSwapGroupsNV_tuple;
extern PyObject *const_tuple_str_plain_glXChannelRectSyncSGIX_tuple;
extern PyObject *const_tuple_str_plain_GLX_OPTIMAL_PBUFFER_WIDTH_SGIX_int_pos_32793_tuple;
extern PyObject *const_str_plain_glXCreateGLXPixmapMESA;
extern PyObject *const_str_plain___file__;
static PyObject *const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT_int_pos_8401_tuple;
extern PyObject *const_str_plain_glXCopySubBufferMESA;
static PyObject *const_str_plain_glXGetVideoInfoNV;
extern PyObject *const_str_plain_glXSet3DfxModeMESA;
extern PyObject *const_str_plain_GLX_SGI_cushion;
extern PyObject *const_tuple_str_plain_GLX_EVENT_MASK_SGIX_int_pos_32799_tuple;
extern PyObject *const_str_plain_GLX_VISUAL_ID_EXT;
extern PyObject *const_tuple_str_plain_GLX_FLOAT_COMPONENTS_NV_int_pos_8368_tuple;
extern PyObject *const_str_digest_d876baa99689b6ffddd598dbe467bc04;
extern PyObject *const_str_plain___slots__;
extern PyObject *const_int_pos_32779;
static PyObject *const_str_digest_c6db3dc91a25c9b312aac3fb70b6536a;
extern PyObject *const_tuple_str_plain_GLX_EXT_visual_info_int_pos_1_tuple;
extern PyObject *const_str_plain_XExtData;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT_int_pos_8408_tuple;
extern PyObject *const_str_plain_GLX_PIPE_RECT_SGIX;
extern PyObject *const_str_plain_GLX_RGBA_FLOAT_TYPE_ARB;
extern PyObject *const_str_plain_glXGetCurrentReadDrawableSGI;
extern PyObject *const_tuple_str_plain_GLX_DIRECT_COLOR_EXT_int_pos_32771_tuple;
extern PyObject *const_str_digest_4df1276e35a30d1d395df221559845c2;
extern PyObject *const_str_plain_GLX_PIPE_RECT_LIMITS_SGIX;
extern PyObject *const_str_digest_63f1baf3746dab1b9e295210da708714;
extern PyObject *const_str_plain_GLX_X_RENDERABLE_SGIX;
static PyObject *const_tuple_str_plain_glXQueryFrameCountNV_tuple;
static PyObject *const_int_pos_8418;
static PyObject *const_int_pos_8419;
static PyObject *const_int_pos_8416;
extern PyObject *const_str_plain_free_private;
static PyObject *const_int_pos_8414;
static PyObject *const_int_pos_8415;
extern PyObject *const_str_plain_glXImportContextEXT;
static PyObject *const_int_pos_8413;
static PyObject *const_int_pos_8410;
static PyObject *const_int_pos_8411;
static PyObject *const_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT;
extern PyObject *const_tuple_str_plain_GLX_X_VISUAL_TYPE_EXT_int_pos_34_tuple;
extern PyObject *const_int_pos_32768;
extern PyObject *const_int_pos_32769;
extern PyObject *const_str_plain_glXChannelRectSyncSGIX;
extern PyObject *const_tuple_str_plain_glXGetSelectedEventSGIX_tuple;
extern PyObject *const_str_digest_9d33ac304b71fe73babdb34426f0623d;
extern PyObject *const_tuple_str_plain_GLX_PRESERVED_CONTENTS_SGIX_int_pos_32795_tuple;
extern PyObject *const_tuple_str_plain_glXDestroyHyperpipeConfigSGIX_tuple;
extern PyObject *const_str_plain_createBaseFunction;
static PyObject *const_str_plain_glXJoinSwapGroupNV;
extern PyObject *const_int_pos_38;
extern PyObject *const_tuple_str_plain_GLX_FRONT_RIGHT_BUFFER_BIT_SGIX_int_pos_2_tuple;
extern PyObject *const_int_pos_36;
extern PyObject *const_int_pos_37;
extern PyObject *const_int_pos_34;
extern PyObject *const_int_pos_35;
extern PyObject *const_tuple_str_plain_GLX_SGIX_hyperpipe_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_SWAP_METHOD_OML;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_GLX_TRANSPARENT_RED_VALUE_EXT;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_TYPE_EXT_int_pos_35_tuple;
extern PyObject *const_tuple_str_plain_GLX_SGI_cushion_int_pos_1_tuple;
extern PyObject *const_int_pos_32777;
extern PyObject *const_tuple_str_plain_GLX_PBUFFER_SGIX_int_pos_32803_tuple;
extern PyObject *const_tuple_str_plain_glXGetCurrentReadDrawableSGI_tuple;
extern PyObject *const_str_plain_c_void;
extern PyObject *const_tuple_str_plain_glXCreateGLXPbufferSGIX_tuple;
extern PyObject *const_str_plain_struct__XExtData;
extern PyObject *const_str_plain__fields_;
static PyObject *const_str_plain_VideoDevice;
static PyObject *const_int_pos_8391;
extern PyObject *const_tuple_str_plain_glXQueryHyperpipeConfigSGIX_tuple;
static PyObject *const_int_pos_8393;
static PyObject *const_int_pos_8392;
extern PyObject *const_str_plain_GLX_MAX_PBUFFER_WIDTH_SGIX;
static PyObject *const_tuple_str_plain_GLX_GLXEXT_VERSION_int_pos_10_tuple;
extern PyObject *const_str_plain_GLX_FRONT_LEFT_BUFFER_BIT_SGIX;
extern PyObject *const_str_plain_GLX_ARB_fbconfig_float;
extern PyObject *const_str_plain_c_long;
extern PyObject *const_str_plain_GLX_HYPERPIPE_ID_SGIX;
static PyObject *const_str_plain_glXQuerySwapGroupNV;
extern PyObject *const_str_digest_0732571536e55f73111e5ebbb420b64e;
static PyObject *const_tuple_str_plain_glXBindVideoImageNV_tuple;
static PyObject *const_str_digest_e385c4d0eb77065429f1121f25238fa1;
extern PyObject *const_str_plain_group;
extern PyObject *const_str_digest_144d15b945e47bf269d060282dd81f87;
static PyObject *const_tuple_str_plain_GLX_AUX4_EXT_int_pos_8422_tuple;
extern PyObject *const_tuple_str_plain_GLX_ACCUM_BUFFER_BIT_SGIX_int_pos_128_tuple;
extern PyObject *const_str_digest_53bcd321db2929cbe97b7b71d5358d00;
extern PyObject *const_str_digest_3dda1d29b25a10161c5f9a4e5dc7c5b9;
extern PyObject *const_str_plain_Display;
extern PyObject *const_tuple_str_plain_GLX_PIXMAP_BIT_SGIX_int_pos_2_tuple;
extern PyObject *const_str_plain_argTypes;
extern PyObject *const_list_45412d477a1d06e2d718b391256bcf77_list;
static PyObject *const_tuple_str_plain_GLX_AUX0_EXT_int_pos_8418_tuple;
extern PyObject *const_str_plain_GLX_SGIX_fbconfig;
static PyObject *const_str_plain_GLX_MIPMAP_TEXTURE_EXT;
extern PyObject *const_tuple_str_plain_glXGetFBConfigAttribSGIX_tuple;
extern PyObject *const_str_plain_GLX_DAMAGED_SGIX;
static PyObject *const_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT;
extern PyObject *const_str_plain_XVisualInfo;
extern PyObject *const_list_str_empty_str_empty_list;
extern PyObject *const_tuple_str_plain_GLX_SGI_swap_control_int_pos_1_tuple;
extern PyObject *const_str_plain_glXHyperpipeConfigSGIX;
extern PyObject *const_tuple_str_plain_GLX_BAD_HYPERPIPE_SGIX_int_pos_92_tuple;
extern PyObject *const_str_plain_glXDestroyHyperpipeConfigSGIX;
extern PyObject *const_str_plain_GLX_OML_sync_control;
extern PyObject *const_str_plain_GLX_SUN_get_transparent_index;
extern PyObject *const_int_pos_32784;
extern PyObject *const_int_pos_32785;
extern PyObject *const_int_pos_32786;
extern PyObject *const_int_pos_32787;
extern PyObject *const_int_pos_32788;
extern PyObject *const_int_pos_32789;
static PyObject *const_str_digest_d1bb062c077f34f880a7fd8ba4b82499;
extern PyObject *const_list_314788751150d7acc81145c4eab8ab45_list;
extern PyObject *const_tuple_str_plain_GLX_RGBA_BIT_SGIX_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_SCREEN_EXT;
extern PyObject *const_str_plain_GLXHyperpipeNetworkSGIX;
extern PyObject *const_str_digest_59f7bef38b9ff905398a19f57d30e4e2;
extern PyObject *const_str_plain_GLX_MESA_release_buffers;
static PyObject *const_tuple_str_plain_glXQuerySwapGroupNV_tuple;
extern PyObject *const_str_plain_glXGetMscRateOML;
extern PyObject *const_str_digest_073463760f38e6d101fe65f893b5d98b;
extern PyObject *const_str_plain_glXGetCurrentDisplayEXT;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_EXT_int_pos_8413_tuple;
static PyObject *const_tuple_str_plain_GLX_BACK_RIGHT_EXT_int_pos_8417_tuple;
extern PyObject *const_tuple_str_plain_GLX_BACK_LEFT_BUFFER_BIT_SGIX_int_pos_4_tuple;
static PyObject *const_list_str_plain_dpy_str_plain_drawable_str_plain_group_list;
extern PyObject *const_str_plain_screen;
extern PyObject *const_str_plain_GLX_SAMPLE_BUFFERS_3DFX;
extern PyObject *const_tuple_str_plain_GLX_SUN_get_transparent_index_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_glXWaitForSbcOML_tuple;
extern PyObject *const_tuple_str_plain_GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX_int_pos_4_tuple;
extern PyObject *const_tuple_str_plain_GLX_STENCIL_BUFFER_BIT_SGIX_int_pos_64_tuple;
extern PyObject *const_str_plain_writefreq;
extern PyObject *const_str_plain_GLX_TRANSPARENT_RGB_EXT;
extern PyObject *const_str_plain_glXSwapBuffersMscOML;
extern PyObject *const_str_plain_struct__XDisplay;
static PyObject *const_str_plain_GLX_TEXTURE_1D_BIT_EXT;
extern PyObject *const_tuple_str_plain_glXBindSwapBarrierSGIX_tuple;
extern PyObject *const_tuple_str_plain_GLX_MESA_set_3dfx_mode_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_HYPERPIPE_ID_SGIX_int_pos_32816_tuple;
static PyObject *const_tuple_str_plain_GLX_FRONT_EXT_int_pos_8414_tuple;
extern PyObject *const_int_pos_134217728;
extern PyObject *const_str_plain_timeSlice;
extern PyObject *const_str_plain_GLX_PBUFFER_BIT_SGIX;
extern PyObject *const_tuple_str_plain_GLX_ARB_fbconfig_float_int_pos_1_tuple;
extern PyObject *const_int_pos_32773;
extern PyObject *const_tuple_str_plain_glXCreateGLXPixmapMESA_tuple;
extern PyObject *const_str_plain_struct___GLXFBConfigRec;
extern PyObject *const_str_plain_GLX_BLENDED_RGBA_SGIS;
extern PyObject *const_str_plain_Structure;
extern PyObject *const_str_plain_glXBindChannelToWindowSGIX;
extern PyObject *const_str_digest_4c92db23bfdcbc1b6157286eaafd8a42;
extern PyObject *const_str_plain_GLX_RENDER_TYPE_SGIX;
static PyObject *const_list_str_plain_dpy_str_plain_screen_str_plain_count_list;
extern PyObject *const_tuple_str_plain_GLX_MAX_PBUFFER_HEIGHT_SGIX_int_pos_32791_tuple;
extern PyObject *const_str_plain_glXSwapIntervalSGI;
static PyObject *const_tuple_str_plain_glXGetRefreshRateSGI_tuple;
extern PyObject *const_tuple_str_plain_GLX_3DFX_FULLSCREEN_MODE_MESA_int_pos_2_tuple;
extern PyObject *const_str_plain_glXGetTransparentIndexSUN;
static PyObject *const_str_plain_glXResetFrameCountNV;
extern PyObject *const_str_plain_glXQueryMaxSwapBarriersSGIX;
static PyObject *const_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT;
extern PyObject *const_str_plain_GLX_TRANSPARENT_TYPE_EXT;
extern PyObject *const_str_digest_1a014c2a37a66bbac6d4e07b7425fa7c;
extern PyObject *const_str_plain_GLX_COLOR_INDEX_BIT_SGIX;
extern PyObject *const_str_plain_None;
static PyObject *const_list_af2cf34c9c2aeea740ead53b368c2419_list;
extern PyObject *const_tuple_str_plain_GLX_COLOR_INDEX_BIT_SGIX_int_pos_2_tuple;
extern PyObject *const_tuple_str_plain_glXFreeMemoryNV_tuple;
static PyObject *const_tuple_str_plain_glXReleaseVideoImageNV_tuple;
extern PyObject *const_str_plain_priority;
extern PyObject *const_str_plain_platform;
extern PyObject *const_tuple_str_plain_GLX_SWAP_EXCHANGE_OML_int_pos_32865_tuple;
extern PyObject *const_int_pos_91;
extern PyObject *const_int_pos_92;
extern PyObject *const_str_plain_glXGetVisualFromFBConfigSGIX;
extern PyObject *const_str_digest_b67da9e81fb1c6045c097ad53cfab8ef;
extern PyObject *const_str_plain_glXChannelRectSGIX;
extern PyObject *const_list_str_empty_str_plain_None_str_empty_list;
extern PyObject *const_str_plain_GLX_TRANSPARENT_ALPHA_VALUE_EXT;
extern PyObject *const_int_pos_32774;
extern PyObject *const_tuple_str_plain_glXGetTransparentIndexSUN_tuple;
extern PyObject *const_str_plain_dll;
static PyObject *const_tuple_str_plain_GLX_AUX8_EXT_int_pos_8426_tuple;
static PyObject *const_str_plain_pulCounterPbuffer;
extern PyObject *const_tuple_str_plain_GLX_SHARE_CONTEXT_EXT_int_pos_32778_tuple;
static PyObject *const_tuple_str_plain_GLX_FRONT_RIGHT_EXT_int_pos_8415_tuple;
extern PyObject *const_str_plain_GLX_WIDTH_SGIX;
extern PyObject *const_str_plain_GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX;
extern PyObject *const_str_digest_45053820cca1870f89ad294fed3b8c2a;
static PyObject *const_tuple_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT_int_pos_8403_tuple;
static PyObject *const_tuple_str_plain_glXResetFrameCountNV_tuple;
extern PyObject *const_tuple_str_plain_glXBindHyperpipeSGIX_tuple;
extern PyObject *const_str_plain_glXQueryHyperpipeConfigSGIX;
static PyObject *const_str_plain_GLX_VIDEO_OUT_COLOR_NV;
extern PyObject *const_str_plain_GLX_AUX_BUFFERS_BIT_SGIX;
extern PyObject *const_str_plain_GLX_LARGEST_PBUFFER_SGIX;
extern PyObject *const_int_pos_8368;
static PyObject *const_str_digest_4016b620dd9070ac17a9bd97f45d37ea;
extern PyObject *const_str_plain_GLX_NONE_EXT;
extern PyObject *const_tuple_str_plain_GLX_SGI_make_current_read_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_SGI_make_current_read;
extern PyObject *const_str_plain_GLX_SGIS_multisample;
extern PyObject *const_tuple_str_plain_GLX_WINDOW_SGIX_int_pos_32802_tuple;
extern PyObject *const_tuple_str_plain_GLX_OML_sync_control_int_pos_1_tuple;
extern PyObject *const_str_plain_glXCreateGLXPbufferSGIX;
extern PyObject *const_str_plain_glXGetFBConfigFromVisualSGIX;
extern PyObject *const_str_plain_GLX_EXT_visual_info;
static PyObject *const_str_digest_93833061a1a7d5ae372ab52c0119f31f;
extern PyObject *const_tuple_str_plain_GLX_SAMPLES_3DFX_int_pos_32849_tuple;
extern PyObject *const_tuple_str_plain_glXQueryMaxSwapBarriersSGIX_tuple;
extern PyObject *const_str_digest_e55c20c405950a41040601c12cedab4f;
extern PyObject *const_str_plain_glXBindHyperpipeSGIX;
static PyObject *const_str_plain_GLX_VIDEO_OUT_FIELD_1_NV;
static PyObject *const_str_digest_63af519f3ec97f6b155b392ba378e8b2;
extern PyObject *const_str_plain_GLXDrawable;
extern PyObject *const_str_plain_GL;
extern PyObject *const_tuple_str_plain_glXJoinSwapGroupSGIX_tuple;
extern PyObject *const_str_plain_Colormap;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_INDEX_EXT_int_pos_32777_tuple;
extern PyObject *const_str_plain_GLX_SGIX_swap_group;
extern PyObject *const_tuple_str_plain_GLX_HYPERPIPE_STEREO_SGIX_int_pos_3_tuple;
static PyObject *const_list_str_plain_dpy_str_plain_drawable_str_plain_buffer_list;
extern PyObject *const_tuple_str_plain_glXImportContextEXT_tuple;
static PyObject *const_str_plain_GLX_TEXTURE_RECTANGLE_EXT;
extern PyObject *const_str_digest_103f33b2787c8523c7967ad59de053cf;
extern PyObject *const_tuple_str_plain_glXCreateGLXPixmapWithConfigSGIX_tuple;
extern PyObject *const_str_plain___metaclass__;
extern PyObject *const_str_plain_glXGetFBConfigAttribSGIX;
extern PyObject *const_str_plain_number;
extern PyObject *const_str_plain_GLXPbufferSGIX;
static PyObject *const_str_digest_bf01b0f9143c3dabea0b1b19171aff31;
extern PyObject *const_str_digest_9639ba8a35f8481bb526bdc55ef64d73;
static PyObject *const_list_42edf42ed02a726d64afbc4d5851b6c5_list;
extern PyObject *const_tuple_str_plain_GLX_PBUFFER_BIT_SGIX_int_pos_4_tuple;
static PyObject *const_str_plain_glXReleaseTextImageEXT;
extern PyObject *const_str_plain_GLX_TRANSPARENT_INDEX_VALUE_EXT;
extern PyObject *const_int_pos_256;
extern PyObject *const_str_chr_42;
extern PyObject *const_str_plain_GLX_SWAP_COPY_OML;
extern PyObject *const_str_plain_GLX_NV_float_buffer;
extern PyObject *const_tuple_str_plain_glXHyperpipeAttribSGIX_tuple;
extern PyObject *const_tuple_str_plain_GLX_EXT_import_context_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_SLOW_VISUAL_EXT_int_pos_32769_tuple;
extern PyObject *const_tuple_str_plain_GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX_int_pos_32794_tuple;
extern PyObject *const_int_pos_128;
extern PyObject *const_str_plain_XPointer;
extern PyObject *const_tuple_str_plain_GLX_NON_CONFORMANT_VISUAL_EXT_int_pos_32781_tuple;
extern PyObject *const_str_plain_argNames;
extern PyObject *const_tuple_str_plain_GLX_VISUAL_ID_EXT_int_pos_32779_tuple;
extern PyObject *const_str_plain_doc;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_1D_EXT_int_pos_8411_tuple;
static PyObject *const_str_plain_GLX_AUX7_EXT;
static PyObject *const_int_pos_8409;
static PyObject *const_int_pos_8408;
extern PyObject *const_str_plain_Constant;
static PyObject *const_int_pos_8405;
static PyObject *const_int_pos_8404;
static PyObject *const_int_pos_8407;
extern PyObject *const_tuple_str_plain_glXGetMscRateOML_tuple;
extern PyObject *const_str_plain_GLX_TRANSPARENT_GREEN_VALUE_EXT;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_INDEX_VALUE_EXT_int_pos_36_tuple;
static PyObject *const_int_pos_8403;
static PyObject *const_int_pos_8402;
extern PyObject *const_str_plain_GLX_DIRECT_COLOR_EXT;
extern PyObject *const_tuple_str_plain_GLX_BAD_HYPERPIPE_CONFIG_SGIX_int_pos_91_tuple;
extern PyObject *const_list_str_plain_None_str_plain_None_str_empty_list;
extern PyObject *const_str_plain_GLX_MESA_agp_offset;
extern PyObject *const_tuple_str_plain_GLX_DEPTH_BUFFER_BIT_SGIX_int_pos_32_tuple;
extern PyObject *const_str_plain_GLenum;
static PyObject *const_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT;
extern PyObject *const_str_plain_drawable;
extern PyObject *const_str_plain_dpy;
extern PyObject *const_str_digest_ec359b30d45bd3570a9b0297422e0d7a;
static PyObject *const_tuple_str_plain_glXJoinSwapGroupNV_tuple;
extern PyObject *const_tuple_str_plain_glXChannelRectSGIX_tuple;
extern PyObject *const_list_7a1ccd6364c109af5f21b16b30ec899d_list;
static PyObject *const_str_plain_GLX_NV_vertex_array_range;
extern PyObject *const_str_plain_GLX_FLOAT_COMPONENTS_NV;
extern PyObject *const_str_plain_GLX_ACCUM_BUFFER_BIT_SGIX;
extern PyObject *const_int_pos_80;
extern PyObject *const_str_plain_GLX_BUFFER_CLOBBER_MASK_SGIX;
extern PyObject *const_str_plain_GLX_SGIX_pbuffer;
static PyObject *const_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT;
extern PyObject *const_str_plain_glXGetAGPOffsetMESA;
extern PyObject *const_str_plain_map_entries;
static PyObject *const_str_plain_GLX_BACK_EXT;
static PyObject *const_str_plain_GLX_BACK_LEFT_EXT;
static PyObject *const_tuple_str_plain_GLX_NV_video_out_int_pos_1_tuple;
static PyObject *const_tuple_str_plain_GLX_AUX2_EXT_int_pos_8420_tuple;
extern PyObject *const_tuple_str_plain_GLX_DIGITAL_MEDIA_PBUFFER_SGIX_int_pos_32804_tuple;
extern PyObject *const_int_pos_32800;
extern PyObject *const_str_plain_GLXContext;
extern PyObject *const_str_plain_visual;
extern PyObject *const_tuple_str_plain_GLX_STATIC_GRAY_EXT_int_pos_32775_tuple;
extern PyObject *const_str_digest_740661ae8072b9b6f27c227efa5faec8;
extern PyObject *const_int_pos_32849;
extern PyObject *const_int_pos_32848;
extern PyObject *const_int_pos_32805;
extern PyObject *const_str_digest_398742706f3b36b51b4b658eb9bbd121;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_ALPHA_VALUE_EXT_int_pos_40_tuple;
extern PyObject *const_str_plain_colormap_size;
extern PyObject *const_str_plain_glXWaitForSbcOML;
extern PyObject *const_tuple_str_plain_GLX_BUFFER_CLOBBER_MASK_SGIX_int_pos_134217728_tuple;
extern PyObject *const_str_plain_GLX_HYPERPIPE_RENDER_PIPE_SGIX;
extern PyObject *const_str_plain_GLX_SLOW_VISUAL_EXT;
extern PyObject *const_list_d7ad90ba65c4e14a552791c651ccfa3b_list;
static PyObject *const_str_plain_GLX_FRONT_EXT;
extern PyObject *const_str_digest_c877cef31141df17a00e6beb7c56cd78;
extern PyObject *const_str_plain_c_ubyte;
extern PyObject *const_tuple_str_plain_glXQueryContextInfoEXT_tuple;
extern PyObject *const_str_plain_GLX_HEIGHT_SGIX;
static PyObject *const_list_265dc922129348f3f8543af8faa8ab26_list;
static PyObject *const_int_pos_8406;
extern PyObject *const_str_plain_GLX_SAMPLES_ARB;
extern PyObject *const_str_plain_glXQueryContextInfoEXT;
extern PyObject *const_str_plain_red_mask;
extern PyObject *const_tuple_str_plain_GLX_3DFX_WINDOW_MODE_MESA_int_pos_1_tuple;
static PyObject *const_tuple_str_plain_GLX_NV_swap_group_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_TRUE_COLOR_EXT_int_pos_32770_tuple;
extern PyObject *const_int_pos_8400;
static PyObject *const_str_digest_8e739a2246775620a5171b129f6a57f7;
extern PyObject *const_str_plain_readfreq;
static PyObject *const_int_pos_8425;
extern PyObject *const_tuple_str_plain_GLX_SCREEN_EXT_int_pos_32780_tuple;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT_int_pos_8410_tuple;
extern PyObject *const_tuple_str_plain_glXAllocateMemoryNV_tuple;
extern PyObject *const_str_plain_struct_anon_107;
extern PyObject *const_str_plain_GLX_WINDOW_SGIX;
extern PyObject *const_str_plain_green_mask;
extern PyObject *const_str_plain_GLX_SAMPLE_BUFFERS_SGIS;
static PyObject *const_str_plain_GLX_NV_swap_group;
static PyObject *const_str_plain_GLX_BACK_RIGHT_EXT;
extern PyObject *const_str_plain_struct_anon_18;
static PyObject *const_str_digest_54ad5eaffdadc4af238a20981fb9c8d5;
extern PyObject *const_tuple_str_plain_GLX_SGIS_multisample_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_RGBA_TYPE_SGIX_int_pos_32788_tuple;
static PyObject *const_str_digest_812791e421daa76a35af3a1266ccf05f;
extern PyObject *const_tuple_str_plain_GLX_SYNC_SWAP_SGIX_int_pos_1_tuple;
extern PyObject *const_int_pos_16;
extern PyObject *const_list_str_empty_str_plain_None_str_plain_None_list;
extern PyObject *const_tuple_str_plain_GLX_X_RENDERABLE_SGIX_int_pos_32786_tuple;
extern PyObject *const_str_plain_GLX_SAMPLE_BUFFERS_ARB;
static PyObject *const_tuple_str_plain_glXBindSwapBarrierNV_tuple;
extern PyObject *const_str_plain_GLX_PRESERVED_CONTENTS_SGIX;
extern PyObject *const_str_plain_GLX_SGIX_visual_select_group;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_TARGET_EXT_int_pos_8406_tuple;
extern PyObject *const_int_pos_32780;
extern PyObject *const_tuple_str_plain_glXGetVisualFromFBConfigSGIX_tuple;
extern PyObject *const_str_plain_GLX_3DFX_FULLSCREEN_MODE_MESA;
static PyObject *const_int_pos_8422;
extern PyObject *const_tuple_str_plain_GLX_COLOR_INDEX_TYPE_SGIX_int_pos_32789_tuple;
extern PyObject *const_tuple_str_plain_GLX_AUX_BUFFERS_BIT_SGIX_int_pos_16_tuple;
extern PyObject *const_tuple_str_plain_glXQueryHyperpipeAttribSGIX_tuple;
static PyObject *const_str_plain_glXReleaseVideoDeviceNV;
extern PyObject *const_str_plain_size;
extern PyObject *const_tuple_str_plain_glXQueryChannelDeltasSGIX_tuple;
extern PyObject *const_list_str_empty_str_plain_None_str_empty_str_empty_str_empty_list;
extern PyObject *const_int_pos_32781;
extern PyObject *const_tuple_str_plain_GLX_SWAP_UNDEFINED_OML_int_pos_32867_tuple;
static PyObject *const_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT;
extern PyObject *const_str_digest_953492a6b4a4315981818859ede6c029;
extern PyObject *const_tuple_str_plain_GLX_SAMPLES_ARB_int_pos_100001_tuple;
extern PyObject *const_str_digest_6c3cb2714b62b663489e76369724a48d;
extern PyObject *const_str_plain_GLX_EVENT_MASK_SGIX;
static PyObject *const_str_plain_glXQueryFrameCountNV;
extern PyObject *const_tuple_str_plain_glXSelectEventSGIX_tuple;
extern PyObject *const_str_plain_GLX_X_VISUAL_TYPE_EXT;
extern PyObject *const_str_plain_glXAllocateMemoryNV;
extern PyObject *const_list_2adbab2f904694d00f60131444ae3422_list;
static PyObject *const_str_plain_GLX_AUX0_EXT;
extern PyObject *const_str_plain_glXGetVideoSyncSGI;
extern PyObject *const_tuple_str_plain_GLX_FRONT_LEFT_BUFFER_BIT_SGIX_int_pos_1_tuple;
extern PyObject *const_str_plain_maxGroups;
static PyObject *const_str_plain_numVideoDevices;
extern PyObject *const_str_plain_GLX_TRANSPARENT_INDEX_EXT;
extern PyObject *const_str_plain_glXReleaseBuffersMESA;
extern PyObject *const_str_plain_GLX_STATIC_GRAY_EXT;
extern PyObject *const_str_plain_GLvoid;
extern PyObject *const_tuple_str_plain_glXDestroyGLXPbufferSGIX_tuple;
extern PyObject *const_tuple_str_plain_GLX_SWAP_COPY_OML_int_pos_32866_tuple;
extern PyObject *const_str_plain_CFUNCTYPE;
extern PyObject *const_int_pos_32808;
extern PyObject *const_int_pos_32807;
extern PyObject *const_int_pos_32806;
extern PyObject *const_str_plain_glXQueryGLXPbufferSGIX;
extern PyObject *const_int_pos_32804;
extern PyObject *const_int_pos_32803;
extern PyObject *const_int_pos_32802;
extern PyObject *const_int_pos_32801;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT_int_pos_4_tuple;
extern PyObject *const_str_plain_GLX_SAMPLE_BUFFERS_BIT_SGIX;
extern PyObject *const_str_plain_GLfloat;
extern PyObject *const_str_plain_struct_anon_103;
extern PyObject *const_int_pos_32792;
extern PyObject *const_int_pos_10;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT_int_pos_8409_tuple;
extern PyObject *const_str_plain_GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS;
extern PyObject *const_tuple_str_plain_glXWaitVideoSyncSGI_tuple;
extern PyObject *const_str_plain_struct_anon_108;
extern PyObject *const_tuple_str_plain_GLX_FBCONFIG_ID_SGIX_int_pos_32787_tuple;
extern PyObject *const_tuple_str_plain_glXGetSyncValuesOML_tuple;
extern PyObject *const_tuple_str_plain_glXGetContextIDEXT_tuple;
extern PyObject *const_tuple_str_plain_GLX_DRAWABLE_TYPE_SGIX_int_pos_32784_tuple;
static PyObject *const_str_plain_GLX_TEXTURE_2D_EXT;
extern PyObject *const_int_pos_8377;
extern PyObject *const_tuple_str_plain_glXCreateContextWithConfigSGIX_tuple;
extern PyObject *const_tuple_str_plain_GLX_PSEUDO_COLOR_EXT_int_pos_32772_tuple;
extern PyObject *const_tuple_str_plain_GLX_SGIX_video_resize_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_VISUAL_CAVEAT_EXT_int_pos_32_tuple;
extern PyObject *const_tuple_str_plain_GLX_OML_swap_method_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS_int_pos_32806_tuple;
extern PyObject *const_int_pos_32794;
extern PyObject *const_tuple_str_plain_GLX_SGI_video_sync_int_pos_1_tuple;
extern PyObject *const_str_plain_glXDestroyGLXPbufferSGIX;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_tuple_str_plain_GLX_MAX_PBUFFER_PIXELS_SGIX_int_pos_32792_tuple;
extern PyObject *const_str_plain_GLX_3DFX_WINDOW_MODE_MESA;
static PyObject *const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT_int_pos_8400_tuple;
extern PyObject *const_tuple_str_plain_GLX_LARGEST_PBUFFER_SGIX_int_pos_32796_tuple;
extern PyObject *const_str_plain_glXMakeCurrentReadSGI;
extern PyObject *const_str_plain_GLX_MAX_PBUFFER_HEIGHT_SGIX;
extern PyObject *const_str_plain_OpenGL;
extern PyObject *const_str_plain_glXChooseFBConfigSGIX;
static PyObject *const_list_28fa4832a7371e413208804bd2c2407c_list;
extern PyObject *const_str_digest_b9783c6a75e79fb1fddbf95ccc93f285;
static PyObject *const_str_plain_GLX_TEXTURE_1D_EXT;
static PyObject *const_str_plain_glXGetVideoDeviceNV;
extern PyObject *const_str_plain_GLsizei;
extern PyObject *const_str_plain_GLX_SHARE_CONTEXT_EXT;
extern PyObject *const_str_plain_glXCreateGLXPixmapWithConfigSGIX;
static PyObject *const_str_plain__GLX_NV;
extern PyObject *const_list_str_empty_str_plain_None_str_plain_None_str_empty_list;
extern PyObject *const_list_str_empty_str_plain_None_str_plain_None_str_empty_str_empty_list;
extern PyObject *const_str_digest_0862a32dedc63e1ec910ec10aa5ab661;
extern PyObject *const_int_pos_100000;
extern PyObject *const_int_pos_1;
extern PyObject *const_tuple_str_plain_GLX_SGIX_pbuffer_int_pos_1_tuple;
extern PyObject *const_int_pos_100001;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_2D_EXT_int_pos_8412_tuple;
extern PyObject *const_tuple_str_plain_GLX_MAX_PBUFFER_WIDTH_SGIX_int_pos_32790_tuple;
extern PyObject *const_str_plain_GLX_SGIX_hyperpipe;
static PyObject *const_str_plain_glXQueryMaxSwapGroupsNV;
extern PyObject *const_str_plain_GLX_STENCIL_BUFFER_BIT_SGIX;
extern PyObject *const_str_digest_2c996a1f978a40d29c69b5c8537ddc32;
static PyObject *const_str_digest_5fcb87f101acd4d4a8ad4bd9a9399ae6;
extern PyObject *const_str_plain_c_float;
extern PyObject *const_list_str_empty_str_plain_None_list;
extern PyObject *const_tuple_str_plain_glXReleaseBuffersMESA_tuple;
extern PyObject *const_str_digest_be26d3652dd8aba2bd54126e3d3a38cc;
extern PyObject *const_str_plain_glXGetSelectedEventSGIX;
static PyObject *const_str_plain_GLX_VIDEO_OUT_FIELD_2_NV;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_NV_int_pos_8387_tuple;
extern PyObject *const_tuple_str_plain_GLX_SGIX_video_source_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_SGI_swap_control;
extern PyObject *const_str_plain_networkId;
static PyObject *const_str_plain_GLX_FRONT_RIGHT_EXT;
extern PyObject *const_int_pos_8;
extern PyObject *const_str_plain_GLX_SGIX_video_source;
extern PyObject *const_str_digest_26c801e11906625e123d1d97ee422d76;
extern PyObject *const_str_plain_GLX_OPTIMAL_PBUFFER_WIDTH_SGIX;
extern PyObject *const_str_plain_GLX_TRUE_COLOR_EXT;
extern PyObject *const_tuple_str_plain_GLX_MESA_agp_offset_int_pos_1_tuple;
extern PyObject *const_str_digest_f3a17fdff7fbb470678b66d6c019d148;
extern PyObject *const_str_plain_GLXHyperpipeConfigSGIX;
extern PyObject *const_str_plain_glXCreateContextWithConfigSGIX;
extern PyObject *const_str_digest_d20c72bb25b687acfb9fdbf49bdaedf3;
extern PyObject *const_str_digest_a122c98b12d4d495f3d53c8bd45a0608;
static PyObject *const_tuple_str_plain_GLX_AUX9_EXT_int_pos_8427_tuple;
extern PyObject *const_tuple_str_plain_GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS_int_pos_32807_tuple;
extern PyObject *const_str_plain_GLX_DIGITAL_MEDIA_PBUFFER_SGIX;
extern PyObject *const_str_plain_c_char_p;
extern PyObject *const_str_plain_glXWaitVideoSyncSGI;
extern PyObject *const_str_plain_GLX_RGBA_BIT_SGIX;
extern PyObject *const_tuple_str_plain_glXQueryHyperpipeBestAttribSGIX_tuple;
extern PyObject *const_str_digest_482f73b6e0342793adf6e03678f66408;
static PyObject *const_str_plain_pulCounterOutputPbuffer;
extern PyObject *const_str_plain_POINTER;
extern PyObject *const_str_plain_GLX_ARB_multisample;
extern PyObject *const_tuple_str_plain_GLX_HYPERPIPE_DISPLAY_PIPE_SGIX_int_pos_1_tuple;
extern PyObject *const_str_plain_glXQueryChannelDeltasSGIX;
extern PyObject *const_str_plain_class;
extern PyObject *const_str_plain_buffer;
extern PyObject *const_str_plain_glXQueryChannelRectSGIX;
extern PyObject *const_tuple_str_plain_GLX_WINDOW_BIT_SGIX_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_PIXMAP_BIT_SGIX;
extern PyObject *const_str_plain_maxBarriers;
extern PyObject *const_str_plain_GLX_MESA_set_3dfx_mode;
extern PyObject *const_str_digest_b393d709359b66a9f39baecd2301b73f;
extern PyObject *const_str_digest_656688ee175b35551db67ddd2ed6db4d;
extern PyObject *const_str_plain_GLXPbuffer;
extern PyObject *const_str_plain_Window;
extern PyObject *const_tuple_str_plain_glXSwapBuffersMscOML_tuple;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_1D_BIT_EXT_int_pos_1_tuple;
static PyObject *const_tuple_str_plain_GLX_BACK_LEFT_EXT_int_pos_8416_tuple;
extern PyObject *const_list_str_empty_str_plain_None_str_plain_None_str_plain_None_list;
extern PyObject *const_int_pos_39;
extern PyObject *const_str_plain_pipeName;
extern PyObject *const_tuple_str_plain_GLX_MESA_copy_sub_buffer_int_pos_1_tuple;
extern PyObject *const_tuple_str_plain_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX_int_pos_80_tuple;
extern PyObject *const_str_plain_next;
extern PyObject *const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
extern PyObject *const_tuple_str_plain_glXMakeCurrentReadSGI_tuple;
extern PyObject *const_str_plain_pointer;
extern PyObject *const_str_plain_GLX_RGBA_FLOAT_BIT_ARB;
extern PyObject *const_str_plain_ext_data;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_GLX_SYNC_SWAP_SGIX;
static PyObject *const_str_plain_iVideoBuffer;
static PyObject *const_str_plain_glXBindTexImageEXT;
extern PyObject *const_str_plain_GLX_FBCONFIG_ID_SGIX;
static PyObject *const_tuple_str_plain_GLX_FRONT_LEFT_EXT_int_pos_8414_tuple;
extern PyObject *const_str_plain_GLX_MESA_copy_sub_buffer;
extern PyObject *const_tuple_str_plain_GLX_SAVED_SGIX_int_pos_32801_tuple;
extern PyObject *const_tuple_str_plain_GLX_BACK_RIGHT_BUFFER_BIT_SGIX_int_pos_8_tuple;
extern PyObject *const_str_plain_glXHyperpipeAttribSGIX;
static PyObject *const_str_digest_2a148c04d8fd2fc8e9ee080f2b7a6788;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_BLUE_VALUE_EXT_int_pos_39_tuple;
extern PyObject *const_str_plain_GLX_SGI_video_sync;
static PyObject *const_str_plain_GLX_FRONT_LEFT_EXT;
static PyObject *const_tuple_str_plain_GLX_NV_vertex_array_range_int_pos_1_tuple;
extern PyObject *const_str_digest_82b632c3e739bc15fd5521768fa13ae2;
extern PyObject *const_str_plain_constant;
static PyObject *const_list_str_plain_dpy_str_plain_group_str_plain_barrier_list;
extern PyObject *const_str_plain_GLX_SYNC_FRAME_SGIX;
extern PyObject *const_tuple_str_plain_GLX_GRAY_SCALE_EXT_int_pos_32774_tuple;
extern PyObject *const_str_plain_c_ulong;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV_int_pos_8391_tuple;
static PyObject *const_list_c5e695ca431ef6f10322bd3fd623ebfc_list;
extern PyObject *const_str_plain_glXSelectEventSGIX;
static PyObject *const_str_plain_GLX_AUX9_EXT;
extern PyObject *const_tuple_str_plain_GLX_WIDTH_SGIX_int_pos_32797_tuple;
extern PyObject *const_str_plain_glXGetContextIDEXT;
extern PyObject *const_str_plain_channel;
extern PyObject *const_tuple_str_plain_glXCushionSGI_tuple;
static PyObject *const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list;
extern PyObject *const_str_plain_glXQueryHyperpipeBestAttribSGIX;
extern PyObject *const_str_plain_GLX_SWAP_EXCHANGE_OML;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_ALPHA_NV_int_pos_8388_tuple;
extern PyObject *const_tuple_str_plain_GLX_MESA_pixmap_colormap_int_pos_1_tuple;
static PyObject *const_tuple_str_plain_GLX_AUX1_EXT_int_pos_8419_tuple;
static PyObject *const_int_pos_8390;
extern PyObject *const_tuple_str_plain_glXCopySubBufferMESA_tuple;
extern PyObject *const_tuple_str_plain_GLX_SAMPLES_SGIS_int_pos_100001_tuple;
static PyObject *const_str_plain_pulCounterOutputVideo;
extern PyObject *const_list_str_plain_dpy_str_plain_screen_list;
static PyObject *const_str_plain_GLX_AUX2_EXT;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_2D_BIT_EXT_int_pos_2_tuple;
static PyObject *const_str_plain_GLXVideoDeviceNV;
extern PyObject *const_list_str_plain_pipeName_str_plain_networkId_list;
extern PyObject *const_tuple_empty;
extern PyObject *const_tuple_str_plain_GLX_MESA_release_buffers_int_pos_1_tuple;
extern PyObject *const_str_plain_count;
static PyObject *const_int_pos_8417;
extern PyObject *const_str_plain_glXFreeContextEXT;
extern PyObject *const_str_plain_GLX_BACK_RIGHT_BUFFER_BIT_SGIX;
static PyObject *const_tuple_str_plain_GLX_MIPMAP_TEXTURE_EXT_int_pos_8407_tuple;
extern PyObject *const_tuple_str_plain_glXGetVideoSyncSGI_tuple;
static PyObject *const_str_plain_GLX_VIDEO_OUT_ALPHA_NV;
extern PyObject *const_list_str_empty_list;
extern PyObject *const_list_c8d9348d653912db50e0af383c251eac_list;
static PyObject *const_int_pos_8412;
extern PyObject *const_list_str_plain_pointer_list;
extern PyObject *const_list_c9625226630d4d03b7a368b98c552a09_list;
extern PyObject *const_str_plain_blue_mask;
extern PyObject *const_str_plain_resultType;
extern PyObject *const_list_d1e2e2f9c5ed90e4b898dfdcada50e60_list;
extern PyObject *const_tuple_str_plain_GLX_SWAP_METHOD_OML_int_pos_32864_tuple;
extern PyObject *const_list_d59d2abe556344752577c1505c03cf5f_list;
static PyObject *const_str_plain_GLX_TEXTURE_TARGET_EXT;
extern PyObject *const_tuple_str_plain_GLX_EXT_visual_rating_int_pos_1_tuple;
extern PyObject *const_str_plain_GLX_VISUAL_SELECT_GROUP_SGIX;
extern PyObject *const_str_plain_GLX_EXT_import_context;
extern PyObject *const_tuple_str_plain_glXChooseFBConfigSGIX_tuple;
extern PyObject *const_str_plain_participationType;
extern PyObject *const_str_plain_GLX_GLXEXT_VERSION;
extern PyObject *const_tuple_str_plain_GLX_STATIC_COLOR_EXT_int_pos_32773_tuple;
static PyObject *const_tuple_str_plain_GLX_AUX5_EXT_int_pos_8423_tuple;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_RGB_EXT_int_pos_32776_tuple;
extern PyObject *const_tuple_str_plain_glXFreeContextEXT_tuple;
static PyObject *const_tuple_str_plain_glXBindTexImageEXT_tuple;
extern PyObject *const_str_plain_GLX_SAMPLES_SGIS;
extern PyObject *const_str_plain_VisualID;
extern PyObject *const_str_plain_GLX_RGBA_TYPE_SGIX;
extern PyObject *const_str_digest_2538588c7de134c9f0b7f14356fd6805;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_GREEN_VALUE_EXT_int_pos_38_tuple;
extern PyObject *const_str_digest_62964fb35c8f7bdbb2787880fda45a5d;
extern PyObject *const_str_plain_GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS;
extern PyObject *const_str_plain_GLX_SGIX_swap_barrier;
extern PyObject *const_tuple_str_plain_glXBindChannelToWindowSGIX_tuple;
extern PyObject *const_tuple_str_plain_glXSwapIntervalSGI_tuple;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV_int_pos_8390_tuple;
extern PyObject *const_str_plain_glXWaitForMscOML;
static PyObject *const_tuple_str_plain_GLX_Y_INVERTED_EXT_int_pos_8404_tuple;
extern PyObject *const_str_plain_GLX_SWAP_UNDEFINED_OML;
extern PyObject *const_str_plain_GLXPixmap;
extern PyObject *const_tuple_str_plain_glXQueryChannelRectSGIX_tuple;
static PyObject *const_tuple_str_plain_GLX_AUX3_EXT_int_pos_8421_tuple;
extern PyObject *const_str_plain_ctypes;
extern PyObject *const_tuple_str_plain_glXQueryGLXPbufferSGIX_tuple;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_FRAME_NV_int_pos_8392_tuple;
extern PyObject *const_tuple_str_plain_GLX_HEIGHT_SGIX_int_pos_32798_tuple;
extern PyObject *const_list_str_plain_dpy_str_plain_pbuf_list;
extern PyObject *const_tuple_str_plain_glXGetCurrentDisplayEXT_tuple;
static PyObject *const_tuple_str_plain_glXReleaseVideoDeviceNV_tuple;
static PyObject *const_tuple_str_plain_glXSendPbufferToVideoNV_tuple;
static PyObject *const_str_plain_GLX_Y_INVERTED_EXT;
extern PyObject *const_int_pos_32778;
extern PyObject *const_str_plain_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX;
extern PyObject *const_str_plain_GLX_MAX_PBUFFER_PIXELS_SGIX;
extern PyObject *const_tuple_str_plain_GLX_PIPE_RECT_LIMITS_SGIX_int_pos_2_tuple;
static PyObject *const_tuple_str_plain_glXGetVideoDeviceNV_tuple;
static PyObject *const_list_b6fe39b0e9e35a370ce9104704f66840_list;
extern PyObject *const_int_pos_32771;
extern PyObject *const_int_pos_32770;
static PyObject *const_str_plain_GLX_AUX1_EXT;
extern PyObject *const_int_pos_32772;
extern PyObject *const_int_pos_32775;
extern PyObject *const_str_plain___all__;
static PyObject *const_tuple_str_plain_glXGetVideoInfoNV_tuple;
extern PyObject *const_int_pos_32776;
extern PyObject *const_str_plain_glXBindSwapBarrierSGIX;
static PyObject *const_int_pos_8427;
static PyObject *const_str_plain_GLX_AUX5_EXT;
extern PyObject *const_list_str_empty_str_plain_None_str_empty_str_empty_list;
static PyObject *const_str_plain_iBufferType;
extern PyObject *const_str_plain_c_char;
static PyObject *const_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT;
static PyObject *const_str_plain_pVideoDevice;
extern PyObject *const_str_plain_visualid;
static PyObject *const_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV;
extern PyObject *const_str_plain_Pixmap;
static PyObject *const_list_str_plain_dpy_str_plain_screen_str_plain_VideoDevice_list;
extern PyObject *const_str_digest_5df681dbaa0a811eca97387924c622a5;
static PyObject *const_list_086872101edaafe07727f8675195e9ab_list;
extern PyObject *const_tuple_str_plain_GLX_SAMPLE_BUFFERS_3DFX_int_pos_32848_tuple;
extern PyObject *const_str_plain_GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX;
static PyObject *const_int_pos_8388;
static PyObject *const_int_pos_8389;
extern PyObject *const_str_plain_XID;
extern PyObject *const_int_pos_32;
static PyObject *const_int_pos_8387;
extern PyObject *const_str_digest_6e11ba28b53fbd45e6aff59887b45101;
extern PyObject *const_str_digest_43d9a1a91e0de9d13fefa95a8949881e;
extern PyObject *const_str_plain_GLXFBConfigSGIX;
extern PyObject *const_tuple_str_plain_GLX_DAMAGED_SGIX_int_pos_32800_tuple;
extern PyObject *const_str_plain_GLX_FRONT_RIGHT_BUFFER_BIT_SGIX;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_2_NV_int_pos_8394_tuple;
extern PyObject *const_tuple_str_plain_GLX_VISUAL_SELECT_GROUP_SGIX_int_pos_32808_tuple;
static PyObject *const_str_digest_f1874426d1a94f4d5dc574f84a6d7368;
extern PyObject *const_str_plain_glXFreeMemoryNV;
extern PyObject *const_tuple_str_plain_glXWaitForMscOML_tuple;
extern PyObject *const_str_plain_GLX_SGIX_video_resize;
extern PyObject *const_str_plain_GLboolean;
extern PyObject *const_str_plain_GLX_SAMPLES_3DFX;
extern PyObject *const_str_plain_GLX_SGIX_dmbuffer;
static PyObject *const_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV;
static PyObject *const_tuple_str_plain_GLX_TEXTURE_FORMAT_EXT_int_pos_8405_tuple;
extern PyObject *const_str_plain_bits_per_rgb;
extern PyObject *const_str_plain_GLXContextID;
extern PyObject *const_str_plain_GLX_DEPTH_BUFFER_BIT_SGIX;
extern PyObject *const_tuple_str_plain_glXGetFBConfigFromVisualSGIX_tuple;
extern PyObject *const_tuple_str_plain_GLX_SAMPLE_BUFFERS_SGIS_int_pos_100000_tuple;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_1_NV_int_pos_8393_tuple;
extern PyObject *const_str_digest_09c9901db243cc7e21b0c05419203dff;
static PyObject *const_str_plain_GLX_AUX6_EXT;
extern PyObject *const_str_digest_d28e94a8c0adec95295990a649bc1818;
extern PyObject *const_str_plain_GLX_VISUAL_CAVEAT_EXT;
static PyObject *const_str_plain_bBlock;
extern PyObject *const_str_digest_4be51464519e91b2d20686d7e832d2eb;
extern PyObject *const_tuple_str_plain_GLX_RGBA_FLOAT_BIT_ARB_int_pos_4_tuple;
extern PyObject *const_str_plain_c_int32;
extern PyObject *const_tuple_str_plain_GLX_SAMPLE_BUFFERS_ARB_int_pos_100000_tuple;
extern PyObject *const_int_pos_32793;
extern PyObject *const_str_plain_GLX_BAD_HYPERPIPE_CONFIG_SGIX;
extern PyObject *const_int_pos_32791;
extern PyObject *const_int_pos_32790;
extern PyObject *const_int_pos_32797;
extern PyObject *const_int_pos_32796;
extern PyObject *const_int_pos_32795;
extern PyObject *const_str_plain_GLX_BAD_HYPERPIPE_SGIX;
extern PyObject *const_int_pos_32799;
extern PyObject *const_str_plain_glXCushionSGI;
extern PyObject *const_tuple_str_plain_GLX_RGBA_FLOAT_TYPE_ARB_int_pos_8377_tuple;
extern PyObject *const_tuple_str_plain_GLX_TRANSPARENT_RED_VALUE_EXT_int_pos_37_tuple;
extern PyObject *const_str_digest_e148681b9ed3c2b82991e605edb55802;
extern PyObject *const_str_plain_GLX_MESA_pixmap_colormap;
static PyObject *const_str_plain_glXReleaseVideoImageNV;
extern PyObject *const_str_plain_GLuint;
extern PyObject *const_str_digest_db6d710a60d6c8c3d65c539b1d93387a;
static PyObject *const_str_plain_GLX_TEXTURE_FORMAT_EXT;
static PyObject *const_str_plain_glXSendPbufferToVideoNV;
static PyObject *const_str_plain_glXBindVideoImageNV;
extern PyObject *const_tuple_str_plain_glXHyperpipeConfigSGIX_tuple;
extern PyObject *const_str_digest_cd8ac315b16312396595f657b5904f0b;
static PyObject *const_str_plain_GLX_VIDEO_OUT_FRAME_NV;
extern PyObject *const_str_digest_0da1ae79a7b26bfaf6ae43f2e5c51733;
extern PyObject *const_str_plain_GLX_PBUFFER_SGIX;
extern PyObject *const_str_plain_GLX_HYPERPIPE_DISPLAY_PIPE_SGIX;
extern PyObject *const_str_plain__opaque_struct;
extern PyObject *const_tuple_str_plain_GLX_SGIX_swap_barrier_int_pos_1_tuple;
extern PyObject *const_str_plain_glXGetSyncValuesOML;
extern PyObject *const_tuple_str_plain_GLX_PIPE_RECT_SGIX_int_pos_1_tuple;
extern PyObject *const_list_c0e5a91fffcb5b0a2212cb7aa2b75804_list;
extern PyObject *const_str_digest_5ccc01c5a4080327d693c971f8f44722;
extern PyObject *const_str_plain_glXJoinSwapGroupSGIX;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT;
extern PyObject *const_str_plain_c_int64;
extern PyObject *const_str_digest_ca9ae164781f69747152eee8e449d7e7;
extern PyObject *const_str_plain_GLX_EXT_visual_rating;
extern PyObject *const_str_plain_GLX_NON_CONFORMANT_VISUAL_EXT;
extern PyObject *const_str_plain_private_data;
extern PyObject *const_str_digest_c54a971321a6201cc2aff1bf406f20f3;
static PyObject *const_int_pos_8394;
extern PyObject *const_str_digest_c02641944ae06a09a2ad26b1a7baa1a2;
static PyObject *const_int_pos_8426;
static PyObject *const_tuple_str_plain_GLX_AUX7_EXT_int_pos_8425_tuple;
static PyObject *const_int_pos_8424;
static PyObject *const_int_pos_8423;
extern PyObject *const_str_plain_c_int;
static PyObject *const_int_pos_8421;
static PyObject *const_int_pos_8420;
extern PyObject *const_str_empty;
static PyObject *const_str_digest_4e1a5d0367407337a6963aabb312ee17;
static PyObject *const_tuple_str_plain_GLX_VIDEO_OUT_DEPTH_NV_int_pos_8389_tuple;
extern PyObject *const_str_plain_GLX_DRAWABLE_TYPE_SGIX;
extern PyObject *const_str_plain_glXQueryHyperpipeAttribSGIX;
extern PyObject *const_str_plain_GLX_PSEUDO_COLOR_EXT;
extern PyObject *const_tuple_str_plain_glXQueryHyperpipeNetworkSGIX_tuple;
extern PyObject *const_int_pos_32798;
static PyObject *const_str_digest_8ccf23569b690bfb6f477e67763890f8;
static PyObject *const_tuple_str_plain_GLX_AUX6_EXT_int_pos_8424_tuple;
extern PyObject *const_tuple_str_plain_glXSet3DfxModeMESA_tuple;
static PyObject *const_str_plain_GLX_AUX4_EXT;
extern PyObject *const_tuple_none_tuple;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_str_digest_414e895a750d5a1d1c9e7b538fe702c7 = UNSTREAM_STRING( &constant_bin[ 25762 ], 103, 0 );
    const_str_plain_glXGetRefreshRateSGI = UNSTREAM_STRING( &constant_bin[ 25865 ], 20, 1 );
    const_str_plain_glXBindSwapBarrierNV = UNSTREAM_STRING( &constant_bin[ 25885 ], 20, 1 );
    const_tuple_str_plain_GLX_BACK_EXT_int_pos_8416_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_BACK_EXT = UNSTREAM_STRING( &constant_bin[ 25905 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BACK_EXT_int_pos_8416_tuple, 0, const_str_plain_GLX_BACK_EXT ); Py_INCREF( const_str_plain_GLX_BACK_EXT );
    const_int_pos_8416 = PyInt_FromLong( 8416l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BACK_EXT_int_pos_8416_tuple, 1, const_int_pos_8416 ); Py_INCREF( const_int_pos_8416 );
    const_tuple_str_plain_glXReleaseTextImageEXT_tuple = PyTuple_New( 1 );
    const_str_plain_glXReleaseTextImageEXT = UNSTREAM_STRING( &constant_bin[ 25917 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXReleaseTextImageEXT_tuple, 0, const_str_plain_glXReleaseTextImageEXT ); Py_INCREF( const_str_plain_glXReleaseTextImageEXT );
    const_str_plain_attrib_list = UNSTREAM_STRING( &constant_bin[ 25939 ], 11, 1 );
    const_str_plain_GLX_VIDEO_OUT_DEPTH_NV = UNSTREAM_STRING( &constant_bin[ 25950 ], 22, 1 );
    const_tuple_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT_int_pos_8402_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT = UNSTREAM_STRING( &constant_bin[ 25972 ], 30, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT_int_pos_8402_tuple, 0, const_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT ); Py_INCREF( const_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT );
    const_int_pos_8402 = PyInt_FromLong( 8402l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT_int_pos_8402_tuple, 1, const_int_pos_8402 ); Py_INCREF( const_int_pos_8402 );
    const_str_plain_GLX_TEXTURE_2D_BIT_EXT = UNSTREAM_STRING( &constant_bin[ 26002 ], 22, 1 );
    const_str_plain_GLX_AUX3_EXT = UNSTREAM_STRING( &constant_bin[ 26024 ], 12, 1 );
    const_str_plain_GLX_AUX8_EXT = UNSTREAM_STRING( &constant_bin[ 26036 ], 12, 1 );
    const_str_plain_GLX_NV_video_out = UNSTREAM_STRING( &constant_bin[ 26048 ], 16, 1 );
    const_tuple_str_plain_glXQueryMaxSwapGroupsNV_tuple = PyTuple_New( 1 );
    const_str_plain_glXQueryMaxSwapGroupsNV = UNSTREAM_STRING( &constant_bin[ 26064 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXQueryMaxSwapGroupsNV_tuple, 0, const_str_plain_glXQueryMaxSwapGroupsNV ); Py_INCREF( const_str_plain_glXQueryMaxSwapGroupsNV );
    const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT_int_pos_8401_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT = UNSTREAM_STRING( &constant_bin[ 26087 ], 28, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT_int_pos_8401_tuple, 0, const_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT ); Py_INCREF( const_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT_int_pos_8401_tuple, 1, const_int_pos_8401 ); Py_INCREF( const_int_pos_8401 );
    const_str_plain_glXGetVideoInfoNV = UNSTREAM_STRING( &constant_bin[ 26115 ], 17, 1 );
    const_str_digest_c6db3dc91a25c9b312aac3fb70b6536a = UNSTREAM_STRING( &constant_bin[ 26132 ], 90, 0 );
    const_tuple_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT_int_pos_8408_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT = UNSTREAM_STRING( &constant_bin[ 26222 ], 27, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT_int_pos_8408_tuple, 0, const_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT );
    const_int_pos_8408 = PyInt_FromLong( 8408l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT_int_pos_8408_tuple, 1, const_int_pos_8408 ); Py_INCREF( const_int_pos_8408 );
    const_tuple_str_plain_glXQueryFrameCountNV_tuple = PyTuple_New( 1 );
    const_str_plain_glXQueryFrameCountNV = UNSTREAM_STRING( &constant_bin[ 26249 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXQueryFrameCountNV_tuple, 0, const_str_plain_glXQueryFrameCountNV ); Py_INCREF( const_str_plain_glXQueryFrameCountNV );
    const_int_pos_8418 = PyInt_FromLong( 8418l );
    const_int_pos_8419 = PyInt_FromLong( 8419l );
    const_int_pos_8414 = PyInt_FromLong( 8414l );
    const_int_pos_8415 = PyInt_FromLong( 8415l );
    const_int_pos_8413 = PyInt_FromLong( 8413l );
    const_int_pos_8410 = PyInt_FromLong( 8410l );
    const_int_pos_8411 = PyInt_FromLong( 8411l );
    const_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT = UNSTREAM_STRING( &constant_bin[ 26269 ], 27, 1 );
    const_str_plain_glXJoinSwapGroupNV = UNSTREAM_STRING( &constant_bin[ 26132 ], 18, 1 );
    const_str_plain_VideoDevice = UNSTREAM_STRING( &constant_bin[ 25772 ], 11, 1 );
    const_int_pos_8391 = PyInt_FromLong( 8391l );
    const_int_pos_8393 = PyInt_FromLong( 8393l );
    const_int_pos_8392 = PyInt_FromLong( 8392l );
    const_tuple_str_plain_GLX_GLXEXT_VERSION_int_pos_10_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_GLXEXT_VERSION_int_pos_10_tuple, 0, const_str_plain_GLX_GLXEXT_VERSION ); Py_INCREF( const_str_plain_GLX_GLXEXT_VERSION );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_GLXEXT_VERSION_int_pos_10_tuple, 1, const_int_pos_10 ); Py_INCREF( const_int_pos_10 );
    const_str_plain_glXQuerySwapGroupNV = UNSTREAM_STRING( &constant_bin[ 26296 ], 19, 1 );
    const_tuple_str_plain_glXBindVideoImageNV_tuple = PyTuple_New( 1 );
    const_str_plain_glXBindVideoImageNV = UNSTREAM_STRING( &constant_bin[ 26315 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXBindVideoImageNV_tuple, 0, const_str_plain_glXBindVideoImageNV ); Py_INCREF( const_str_plain_glXBindVideoImageNV );
    const_str_digest_e385c4d0eb77065429f1121f25238fa1 = UNSTREAM_STRING( &constant_bin[ 26334 ], 126, 0 );
    const_tuple_str_plain_GLX_AUX4_EXT_int_pos_8422_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_AUX4_EXT = UNSTREAM_STRING( &constant_bin[ 26460 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX4_EXT_int_pos_8422_tuple, 0, const_str_plain_GLX_AUX4_EXT ); Py_INCREF( const_str_plain_GLX_AUX4_EXT );
    const_int_pos_8422 = PyInt_FromLong( 8422l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX4_EXT_int_pos_8422_tuple, 1, const_int_pos_8422 ); Py_INCREF( const_int_pos_8422 );
    const_tuple_str_plain_GLX_AUX0_EXT_int_pos_8418_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_AUX0_EXT = UNSTREAM_STRING( &constant_bin[ 26472 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX0_EXT_int_pos_8418_tuple, 0, const_str_plain_GLX_AUX0_EXT ); Py_INCREF( const_str_plain_GLX_AUX0_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX0_EXT_int_pos_8418_tuple, 1, const_int_pos_8418 ); Py_INCREF( const_int_pos_8418 );
    const_str_plain_GLX_MIPMAP_TEXTURE_EXT = UNSTREAM_STRING( &constant_bin[ 26484 ], 22, 1 );
    const_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT = UNSTREAM_STRING( &constant_bin[ 26506 ], 26, 1 );
    const_str_digest_d1bb062c077f34f880a7fd8ba4b82499 = UNSTREAM_STRING( &constant_bin[ 26532 ], 74, 0 );
    const_tuple_str_plain_glXQuerySwapGroupNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXQuerySwapGroupNV_tuple, 0, const_str_plain_glXQuerySwapGroupNV ); Py_INCREF( const_str_plain_glXQuerySwapGroupNV );
    const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_EXT_int_pos_8413_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_TEXTURE_RECTANGLE_EXT = UNSTREAM_STRING( &constant_bin[ 26606 ], 25, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_EXT_int_pos_8413_tuple, 0, const_str_plain_GLX_TEXTURE_RECTANGLE_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_RECTANGLE_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_EXT_int_pos_8413_tuple, 1, const_int_pos_8413 ); Py_INCREF( const_int_pos_8413 );
    const_tuple_str_plain_GLX_BACK_RIGHT_EXT_int_pos_8417_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_BACK_RIGHT_EXT = UNSTREAM_STRING( &constant_bin[ 26631 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BACK_RIGHT_EXT_int_pos_8417_tuple, 0, const_str_plain_GLX_BACK_RIGHT_EXT ); Py_INCREF( const_str_plain_GLX_BACK_RIGHT_EXT );
    const_int_pos_8417 = PyInt_FromLong( 8417l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BACK_RIGHT_EXT_int_pos_8417_tuple, 1, const_int_pos_8417 ); Py_INCREF( const_int_pos_8417 );
    const_list_str_plain_dpy_str_plain_drawable_str_plain_group_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_drawable_str_plain_group_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_drawable_str_plain_group_list, 1, const_str_plain_drawable ); Py_INCREF( const_str_plain_drawable );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_drawable_str_plain_group_list, 2, const_str_plain_group ); Py_INCREF( const_str_plain_group );
    const_str_plain_GLX_TEXTURE_1D_BIT_EXT = UNSTREAM_STRING( &constant_bin[ 26649 ], 22, 1 );
    const_tuple_str_plain_GLX_FRONT_EXT_int_pos_8414_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_FRONT_EXT = UNSTREAM_STRING( &constant_bin[ 26671 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_FRONT_EXT_int_pos_8414_tuple, 0, const_str_plain_GLX_FRONT_EXT ); Py_INCREF( const_str_plain_GLX_FRONT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_FRONT_EXT_int_pos_8414_tuple, 1, const_int_pos_8414 ); Py_INCREF( const_int_pos_8414 );
    const_list_str_plain_dpy_str_plain_screen_str_plain_count_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_screen_str_plain_count_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_screen_str_plain_count_list, 1, const_str_plain_screen ); Py_INCREF( const_str_plain_screen );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_screen_str_plain_count_list, 2, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_tuple_str_plain_glXGetRefreshRateSGI_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXGetRefreshRateSGI_tuple, 0, const_str_plain_glXGetRefreshRateSGI ); Py_INCREF( const_str_plain_glXGetRefreshRateSGI );
    const_str_plain_glXResetFrameCountNV = UNSTREAM_STRING( &constant_bin[ 26684 ], 20, 1 );
    const_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT = UNSTREAM_STRING( &constant_bin[ 26704 ], 27, 1 );
    const_list_af2cf34c9c2aeea740ead53b368c2419_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_af2cf34c9c2aeea740ead53b368c2419_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_af2cf34c9c2aeea740ead53b368c2419_list, 1, const_str_plain_drawable ); Py_INCREF( const_str_plain_drawable );
    PyList_SET_ITEM( const_list_af2cf34c9c2aeea740ead53b368c2419_list, 2, const_str_plain_group ); Py_INCREF( const_str_plain_group );
    PyList_SET_ITEM( const_list_af2cf34c9c2aeea740ead53b368c2419_list, 3, const_str_plain_barrier ); Py_INCREF( const_str_plain_barrier );
    const_tuple_str_plain_glXReleaseVideoImageNV_tuple = PyTuple_New( 1 );
    const_str_plain_glXReleaseVideoImageNV = UNSTREAM_STRING( &constant_bin[ 26532 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXReleaseVideoImageNV_tuple, 0, const_str_plain_glXReleaseVideoImageNV ); Py_INCREF( const_str_plain_glXReleaseVideoImageNV );
    const_tuple_str_plain_GLX_AUX8_EXT_int_pos_8426_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX8_EXT_int_pos_8426_tuple, 0, const_str_plain_GLX_AUX8_EXT ); Py_INCREF( const_str_plain_GLX_AUX8_EXT );
    const_int_pos_8426 = PyInt_FromLong( 8426l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX8_EXT_int_pos_8426_tuple, 1, const_int_pos_8426 ); Py_INCREF( const_int_pos_8426 );
    const_str_plain_pulCounterPbuffer = UNSTREAM_STRING( &constant_bin[ 26731 ], 17, 1 );
    const_tuple_str_plain_GLX_FRONT_RIGHT_EXT_int_pos_8415_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_FRONT_RIGHT_EXT = UNSTREAM_STRING( &constant_bin[ 26748 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_FRONT_RIGHT_EXT_int_pos_8415_tuple, 0, const_str_plain_GLX_FRONT_RIGHT_EXT ); Py_INCREF( const_str_plain_GLX_FRONT_RIGHT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_FRONT_RIGHT_EXT_int_pos_8415_tuple, 1, const_int_pos_8415 ); Py_INCREF( const_int_pos_8415 );
    const_tuple_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT_int_pos_8403_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT = UNSTREAM_STRING( &constant_bin[ 26767 ], 31, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT_int_pos_8403_tuple, 0, const_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT ); Py_INCREF( const_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT );
    const_int_pos_8403 = PyInt_FromLong( 8403l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT_int_pos_8403_tuple, 1, const_int_pos_8403 ); Py_INCREF( const_int_pos_8403 );
    const_tuple_str_plain_glXResetFrameCountNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXResetFrameCountNV_tuple, 0, const_str_plain_glXResetFrameCountNV ); Py_INCREF( const_str_plain_glXResetFrameCountNV );
    const_str_plain_GLX_VIDEO_OUT_COLOR_NV = UNSTREAM_STRING( &constant_bin[ 26798 ], 22, 1 );
    const_str_digest_4016b620dd9070ac17a9bd97f45d37ea = UNSTREAM_STRING( &constant_bin[ 26820 ], 133, 0 );
    const_str_digest_93833061a1a7d5ae372ab52c0119f31f = UNSTREAM_STRING( &constant_bin[ 26953 ], 123, 0 );
    const_str_plain_GLX_VIDEO_OUT_FIELD_1_NV = UNSTREAM_STRING( &constant_bin[ 27076 ], 24, 1 );
    const_str_digest_63af519f3ec97f6b155b392ba378e8b2 = UNSTREAM_STRING( &constant_bin[ 27100 ], 130, 0 );
    const_list_str_plain_dpy_str_plain_drawable_str_plain_buffer_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_drawable_str_plain_buffer_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_drawable_str_plain_buffer_list, 1, const_str_plain_drawable ); Py_INCREF( const_str_plain_drawable );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_drawable_str_plain_buffer_list, 2, const_str_plain_buffer ); Py_INCREF( const_str_plain_buffer );
    const_str_digest_bf01b0f9143c3dabea0b1b19171aff31 = UNSTREAM_STRING( &constant_bin[ 27230 ], 69, 0 );
    const_list_42edf42ed02a726d64afbc4d5851b6c5_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_42edf42ed02a726d64afbc4d5851b6c5_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_42edf42ed02a726d64afbc4d5851b6c5_list, 1, const_str_plain_pbuf ); Py_INCREF( const_str_plain_pbuf );
    const_str_plain_iBufferType = UNSTREAM_STRING( &constant_bin[ 27299 ], 11, 1 );
    PyList_SET_ITEM( const_list_42edf42ed02a726d64afbc4d5851b6c5_list, 2, const_str_plain_iBufferType ); Py_INCREF( const_str_plain_iBufferType );
    PyList_SET_ITEM( const_list_42edf42ed02a726d64afbc4d5851b6c5_list, 3, const_str_plain_pulCounterPbuffer ); Py_INCREF( const_str_plain_pulCounterPbuffer );
    const_str_plain_bBlock = UNSTREAM_STRING( &constant_bin[ 27310 ], 6, 1 );
    PyList_SET_ITEM( const_list_42edf42ed02a726d64afbc4d5851b6c5_list, 4, const_str_plain_bBlock ); Py_INCREF( const_str_plain_bBlock );
    const_tuple_str_plain_GLX_TEXTURE_1D_EXT_int_pos_8411_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_TEXTURE_1D_EXT = UNSTREAM_STRING( &constant_bin[ 27316 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_1D_EXT_int_pos_8411_tuple, 0, const_str_plain_GLX_TEXTURE_1D_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_1D_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_1D_EXT_int_pos_8411_tuple, 1, const_int_pos_8411 ); Py_INCREF( const_int_pos_8411 );
    const_str_plain_GLX_AUX7_EXT = UNSTREAM_STRING( &constant_bin[ 27334 ], 12, 1 );
    const_int_pos_8409 = PyInt_FromLong( 8409l );
    const_int_pos_8405 = PyInt_FromLong( 8405l );
    const_int_pos_8404 = PyInt_FromLong( 8404l );
    const_int_pos_8407 = PyInt_FromLong( 8407l );
    const_tuple_str_plain_glXJoinSwapGroupNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXJoinSwapGroupNV_tuple, 0, const_str_plain_glXJoinSwapGroupNV ); Py_INCREF( const_str_plain_glXJoinSwapGroupNV );
    const_str_plain_GLX_NV_vertex_array_range = UNSTREAM_STRING( &constant_bin[ 27346 ], 25, 1 );
    const_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT = UNSTREAM_STRING( &constant_bin[ 27371 ], 29, 1 );
    const_str_plain_GLX_BACK_LEFT_EXT = UNSTREAM_STRING( &constant_bin[ 27400 ], 17, 1 );
    const_tuple_str_plain_GLX_NV_video_out_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_NV_video_out_int_pos_1_tuple, 0, const_str_plain_GLX_NV_video_out ); Py_INCREF( const_str_plain_GLX_NV_video_out );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_NV_video_out_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_tuple_str_plain_GLX_AUX2_EXT_int_pos_8420_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_AUX2_EXT = UNSTREAM_STRING( &constant_bin[ 27417 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX2_EXT_int_pos_8420_tuple, 0, const_str_plain_GLX_AUX2_EXT ); Py_INCREF( const_str_plain_GLX_AUX2_EXT );
    const_int_pos_8420 = PyInt_FromLong( 8420l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX2_EXT_int_pos_8420_tuple, 1, const_int_pos_8420 ); Py_INCREF( const_int_pos_8420 );
    const_list_265dc922129348f3f8543af8faa8ab26_list = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 27429 ], 6124 );
    const_int_pos_8406 = PyInt_FromLong( 8406l );
    const_tuple_str_plain_GLX_NV_swap_group_int_pos_1_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_NV_swap_group = UNSTREAM_STRING( &constant_bin[ 33162 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_NV_swap_group_int_pos_1_tuple, 0, const_str_plain_GLX_NV_swap_group ); Py_INCREF( const_str_plain_GLX_NV_swap_group );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_NV_swap_group_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_digest_8e739a2246775620a5171b129f6a57f7 = UNSTREAM_STRING( &constant_bin[ 33553 ], 181, 0 );
    const_int_pos_8425 = PyInt_FromLong( 8425l );
    const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT_int_pos_8410_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT_int_pos_8410_tuple, 0, const_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT_int_pos_8410_tuple, 1, const_int_pos_8410 ); Py_INCREF( const_int_pos_8410 );
    const_str_digest_54ad5eaffdadc4af238a20981fb9c8d5 = UNSTREAM_STRING( &constant_bin[ 33734 ], 93, 0 );
    const_str_digest_812791e421daa76a35af3a1266ccf05f = UNSTREAM_STRING( &constant_bin[ 33827 ], 50, 0 );
    const_tuple_str_plain_glXBindSwapBarrierNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXBindSwapBarrierNV_tuple, 0, const_str_plain_glXBindSwapBarrierNV ); Py_INCREF( const_str_plain_glXBindSwapBarrierNV );
    const_tuple_str_plain_GLX_TEXTURE_TARGET_EXT_int_pos_8406_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_TEXTURE_TARGET_EXT = UNSTREAM_STRING( &constant_bin[ 30399 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_TARGET_EXT_int_pos_8406_tuple, 0, const_str_plain_GLX_TEXTURE_TARGET_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_TARGET_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_TARGET_EXT_int_pos_8406_tuple, 1, const_int_pos_8406 ); Py_INCREF( const_int_pos_8406 );
    const_str_plain_glXReleaseVideoDeviceNV = UNSTREAM_STRING( &constant_bin[ 25762 ], 23, 1 );
    const_str_plain_numVideoDevices = UNSTREAM_STRING( &constant_bin[ 26885 ], 15, 1 );
    const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT_int_pos_4_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT_int_pos_4_tuple, 0, const_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT_int_pos_4_tuple, 1, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT_int_pos_8409_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT_int_pos_8409_tuple, 0, const_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT_int_pos_8409_tuple, 1, const_int_pos_8409 ); Py_INCREF( const_int_pos_8409 );
    const_str_plain_GLX_TEXTURE_2D_EXT = UNSTREAM_STRING( &constant_bin[ 30659 ], 18, 1 );
    const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT_int_pos_8400_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT_int_pos_8400_tuple, 0, const_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT ); Py_INCREF( const_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT_int_pos_8400_tuple, 1, const_int_pos_8400 ); Py_INCREF( const_int_pos_8400 );
    const_list_28fa4832a7371e413208804bd2c2407c_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_28fa4832a7371e413208804bd2c2407c_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_28fa4832a7371e413208804bd2c2407c_list, 1, const_str_plain_drawable ); Py_INCREF( const_str_plain_drawable );
    PyList_SET_ITEM( const_list_28fa4832a7371e413208804bd2c2407c_list, 2, const_str_plain_buffer ); Py_INCREF( const_str_plain_buffer );
    PyList_SET_ITEM( const_list_28fa4832a7371e413208804bd2c2407c_list, 3, const_str_plain_attrib_list ); Py_INCREF( const_str_plain_attrib_list );
    const_str_plain_glXGetVideoDeviceNV = UNSTREAM_STRING( &constant_bin[ 26820 ], 19, 1 );
    const_str_plain__GLX_NV = UNSTREAM_STRING( &constant_bin[ 33877 ], 7, 1 );
    const_tuple_str_plain_GLX_TEXTURE_2D_EXT_int_pos_8412_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_2D_EXT_int_pos_8412_tuple, 0, const_str_plain_GLX_TEXTURE_2D_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_2D_EXT );
    const_int_pos_8412 = PyInt_FromLong( 8412l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_2D_EXT_int_pos_8412_tuple, 1, const_int_pos_8412 ); Py_INCREF( const_int_pos_8412 );
    const_str_digest_5fcb87f101acd4d4a8ad4bd9a9399ae6 = UNSTREAM_STRING( &constant_bin[ 33884 ], 54, 0 );
    const_str_plain_GLX_VIDEO_OUT_FIELD_2_NV = UNSTREAM_STRING( &constant_bin[ 30184 ], 24, 1 );
    const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_NV_int_pos_8387_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_NV_int_pos_8387_tuple, 0, const_str_plain_GLX_VIDEO_OUT_COLOR_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_COLOR_NV );
    const_int_pos_8387 = PyInt_FromLong( 8387l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_NV_int_pos_8387_tuple, 1, const_int_pos_8387 ); Py_INCREF( const_int_pos_8387 );
    const_tuple_str_plain_GLX_AUX9_EXT_int_pos_8427_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_AUX9_EXT = UNSTREAM_STRING( &constant_bin[ 30992 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX9_EXT_int_pos_8427_tuple, 0, const_str_plain_GLX_AUX9_EXT ); Py_INCREF( const_str_plain_GLX_AUX9_EXT );
    const_int_pos_8427 = PyInt_FromLong( 8427l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX9_EXT_int_pos_8427_tuple, 1, const_int_pos_8427 ); Py_INCREF( const_int_pos_8427 );
    const_str_plain_pulCounterOutputPbuffer = UNSTREAM_STRING( &constant_bin[ 33699 ], 23, 1 );
    const_tuple_str_plain_GLX_TEXTURE_1D_BIT_EXT_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_1D_BIT_EXT_int_pos_1_tuple, 0, const_str_plain_GLX_TEXTURE_1D_BIT_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_1D_BIT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_1D_BIT_EXT_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_tuple_str_plain_GLX_BACK_LEFT_EXT_int_pos_8416_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BACK_LEFT_EXT_int_pos_8416_tuple, 0, const_str_plain_GLX_BACK_LEFT_EXT ); Py_INCREF( const_str_plain_GLX_BACK_LEFT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_BACK_LEFT_EXT_int_pos_8416_tuple, 1, const_int_pos_8416 ); Py_INCREF( const_int_pos_8416 );
    const_str_plain_iVideoBuffer = UNSTREAM_STRING( &constant_bin[ 27052 ], 12, 1 );
    const_str_plain_glXBindTexImageEXT = UNSTREAM_STRING( &constant_bin[ 33508 ], 18, 1 );
    const_tuple_str_plain_GLX_FRONT_LEFT_EXT_int_pos_8414_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_FRONT_LEFT_EXT = UNSTREAM_STRING( &constant_bin[ 30712 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_FRONT_LEFT_EXT_int_pos_8414_tuple, 0, const_str_plain_GLX_FRONT_LEFT_EXT ); Py_INCREF( const_str_plain_GLX_FRONT_LEFT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_FRONT_LEFT_EXT_int_pos_8414_tuple, 1, const_int_pos_8414 ); Py_INCREF( const_int_pos_8414 );
    const_str_digest_2a148c04d8fd2fc8e9ee080f2b7a6788 = UNSTREAM_STRING( &constant_bin[ 33938 ], 151, 0 );
    const_tuple_str_plain_GLX_NV_vertex_array_range_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_NV_vertex_array_range_int_pos_1_tuple, 0, const_str_plain_GLX_NV_vertex_array_range ); Py_INCREF( const_str_plain_GLX_NV_vertex_array_range );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_NV_vertex_array_range_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_list_str_plain_dpy_str_plain_group_str_plain_barrier_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_group_str_plain_barrier_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_group_str_plain_barrier_list, 1, const_str_plain_group ); Py_INCREF( const_str_plain_group );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_group_str_plain_barrier_list, 2, const_str_plain_barrier ); Py_INCREF( const_str_plain_barrier );
    const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV_int_pos_8391_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = UNSTREAM_STRING( &constant_bin[ 30091 ], 32, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV_int_pos_8391_tuple, 0, const_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV_int_pos_8391_tuple, 1, const_int_pos_8391 ); Py_INCREF( const_int_pos_8391 );
    const_list_c5e695ca431ef6f10322bd3fd623ebfc_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_c5e695ca431ef6f10322bd3fd623ebfc_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_c5e695ca431ef6f10322bd3fd623ebfc_list, 1, const_str_plain_screen ); Py_INCREF( const_str_plain_screen );
    PyList_SET_ITEM( const_list_c5e695ca431ef6f10322bd3fd623ebfc_list, 2, const_str_plain_numVideoDevices ); Py_INCREF( const_str_plain_numVideoDevices );
    const_str_plain_pVideoDevice = UNSTREAM_STRING( &constant_bin[ 26929 ], 12, 1 );
    PyList_SET_ITEM( const_list_c5e695ca431ef6f10322bd3fd623ebfc_list, 3, const_str_plain_pVideoDevice ); Py_INCREF( const_str_plain_pVideoDevice );
    const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list, 1, const_str_plain_screen ); Py_INCREF( const_str_plain_screen );
    PyList_SET_ITEM( const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list, 2, const_str_plain_VideoDevice ); Py_INCREF( const_str_plain_VideoDevice );
    const_str_plain_pulCounterOutputVideo = UNSTREAM_STRING( &constant_bin[ 33658 ], 21, 1 );
    PyList_SET_ITEM( const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list, 3, const_str_plain_pulCounterOutputVideo ); Py_INCREF( const_str_plain_pulCounterOutputVideo );
    PyList_SET_ITEM( const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list, 4, const_str_plain_pulCounterOutputPbuffer ); Py_INCREF( const_str_plain_pulCounterOutputPbuffer );
    const_tuple_str_plain_GLX_VIDEO_OUT_ALPHA_NV_int_pos_8388_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_VIDEO_OUT_ALPHA_NV = UNSTREAM_STRING( &constant_bin[ 30000 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_ALPHA_NV_int_pos_8388_tuple, 0, const_str_plain_GLX_VIDEO_OUT_ALPHA_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_ALPHA_NV );
    const_int_pos_8388 = PyInt_FromLong( 8388l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_ALPHA_NV_int_pos_8388_tuple, 1, const_int_pos_8388 ); Py_INCREF( const_int_pos_8388 );
    const_tuple_str_plain_GLX_AUX1_EXT_int_pos_8419_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_AUX1_EXT = UNSTREAM_STRING( &constant_bin[ 30856 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX1_EXT_int_pos_8419_tuple, 0, const_str_plain_GLX_AUX1_EXT ); Py_INCREF( const_str_plain_GLX_AUX1_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX1_EXT_int_pos_8419_tuple, 1, const_int_pos_8419 ); Py_INCREF( const_int_pos_8419 );
    const_int_pos_8390 = PyInt_FromLong( 8390l );
    const_tuple_str_plain_GLX_TEXTURE_2D_BIT_EXT_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_2D_BIT_EXT_int_pos_2_tuple, 0, const_str_plain_GLX_TEXTURE_2D_BIT_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_2D_BIT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_2D_BIT_EXT_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_plain_GLXVideoDeviceNV = UNSTREAM_STRING( &constant_bin[ 25825 ], 16, 1 );
    const_tuple_str_plain_GLX_MIPMAP_TEXTURE_EXT_int_pos_8407_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_MIPMAP_TEXTURE_EXT_int_pos_8407_tuple, 0, const_str_plain_GLX_MIPMAP_TEXTURE_EXT ); Py_INCREF( const_str_plain_GLX_MIPMAP_TEXTURE_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_MIPMAP_TEXTURE_EXT_int_pos_8407_tuple, 1, const_int_pos_8407 ); Py_INCREF( const_int_pos_8407 );
    const_tuple_str_plain_GLX_AUX5_EXT_int_pos_8423_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_AUX5_EXT = UNSTREAM_STRING( &constant_bin[ 30924 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX5_EXT_int_pos_8423_tuple, 0, const_str_plain_GLX_AUX5_EXT ); Py_INCREF( const_str_plain_GLX_AUX5_EXT );
    const_int_pos_8423 = PyInt_FromLong( 8423l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX5_EXT_int_pos_8423_tuple, 1, const_int_pos_8423 ); Py_INCREF( const_int_pos_8423 );
    const_tuple_str_plain_glXBindTexImageEXT_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXBindTexImageEXT_tuple, 0, const_str_plain_glXBindTexImageEXT ); Py_INCREF( const_str_plain_glXBindTexImageEXT );
    const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV_int_pos_8390_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = UNSTREAM_STRING( &constant_bin[ 30054 ], 32, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV_int_pos_8390_tuple, 0, const_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV_int_pos_8390_tuple, 1, const_int_pos_8390 ); Py_INCREF( const_int_pos_8390 );
    const_tuple_str_plain_GLX_Y_INVERTED_EXT_int_pos_8404_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_Y_INVERTED_EXT = UNSTREAM_STRING( &constant_bin[ 30349 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_Y_INVERTED_EXT_int_pos_8404_tuple, 0, const_str_plain_GLX_Y_INVERTED_EXT ); Py_INCREF( const_str_plain_GLX_Y_INVERTED_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_Y_INVERTED_EXT_int_pos_8404_tuple, 1, const_int_pos_8404 ); Py_INCREF( const_int_pos_8404 );
    const_tuple_str_plain_GLX_AUX3_EXT_int_pos_8421_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX3_EXT_int_pos_8421_tuple, 0, const_str_plain_GLX_AUX3_EXT ); Py_INCREF( const_str_plain_GLX_AUX3_EXT );
    const_int_pos_8421 = PyInt_FromLong( 8421l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX3_EXT_int_pos_8421_tuple, 1, const_int_pos_8421 ); Py_INCREF( const_int_pos_8421 );
    const_tuple_str_plain_GLX_VIDEO_OUT_FRAME_NV_int_pos_8392_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_VIDEO_OUT_FRAME_NV = UNSTREAM_STRING( &constant_bin[ 30128 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FRAME_NV_int_pos_8392_tuple, 0, const_str_plain_GLX_VIDEO_OUT_FRAME_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_FRAME_NV );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FRAME_NV_int_pos_8392_tuple, 1, const_int_pos_8392 ); Py_INCREF( const_int_pos_8392 );
    const_tuple_str_plain_glXReleaseVideoDeviceNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXReleaseVideoDeviceNV_tuple, 0, const_str_plain_glXReleaseVideoDeviceNV ); Py_INCREF( const_str_plain_glXReleaseVideoDeviceNV );
    const_tuple_str_plain_glXSendPbufferToVideoNV_tuple = PyTuple_New( 1 );
    const_str_plain_glXSendPbufferToVideoNV = UNSTREAM_STRING( &constant_bin[ 33458 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXSendPbufferToVideoNV_tuple, 0, const_str_plain_glXSendPbufferToVideoNV ); Py_INCREF( const_str_plain_glXSendPbufferToVideoNV );
    const_tuple_str_plain_glXGetVideoDeviceNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXGetVideoDeviceNV_tuple, 0, const_str_plain_glXGetVideoDeviceNV ); Py_INCREF( const_str_plain_glXGetVideoDeviceNV );
    const_list_b6fe39b0e9e35a370ce9104704f66840_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_b6fe39b0e9e35a370ce9104704f66840_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_b6fe39b0e9e35a370ce9104704f66840_list, 1, const_str_plain_VideoDevice ); Py_INCREF( const_str_plain_VideoDevice );
    PyList_SET_ITEM( const_list_b6fe39b0e9e35a370ce9104704f66840_list, 2, const_str_plain_pbuf ); Py_INCREF( const_str_plain_pbuf );
    PyList_SET_ITEM( const_list_b6fe39b0e9e35a370ce9104704f66840_list, 3, const_str_plain_iVideoBuffer ); Py_INCREF( const_str_plain_iVideoBuffer );
    const_tuple_str_plain_glXGetVideoInfoNV_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_glXGetVideoInfoNV_tuple, 0, const_str_plain_glXGetVideoInfoNV ); Py_INCREF( const_str_plain_glXGetVideoInfoNV );
    const_list_str_plain_dpy_str_plain_screen_str_plain_VideoDevice_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_screen_str_plain_VideoDevice_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_screen_str_plain_VideoDevice_list, 1, const_str_plain_screen ); Py_INCREF( const_str_plain_screen );
    PyList_SET_ITEM( const_list_str_plain_dpy_str_plain_screen_str_plain_VideoDevice_list, 2, const_str_plain_VideoDevice ); Py_INCREF( const_str_plain_VideoDevice );
    const_list_086872101edaafe07727f8675195e9ab_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_086872101edaafe07727f8675195e9ab_list, 0, const_str_plain_dpy ); Py_INCREF( const_str_plain_dpy );
    PyList_SET_ITEM( const_list_086872101edaafe07727f8675195e9ab_list, 1, const_str_plain_screen ); Py_INCREF( const_str_plain_screen );
    PyList_SET_ITEM( const_list_086872101edaafe07727f8675195e9ab_list, 2, const_str_plain_maxGroups ); Py_INCREF( const_str_plain_maxGroups );
    PyList_SET_ITEM( const_list_086872101edaafe07727f8675195e9ab_list, 3, const_str_plain_maxBarriers ); Py_INCREF( const_str_plain_maxBarriers );
    const_int_pos_8389 = PyInt_FromLong( 8389l );
    const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_2_NV_int_pos_8394_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_2_NV_int_pos_8394_tuple, 0, const_str_plain_GLX_VIDEO_OUT_FIELD_2_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_FIELD_2_NV );
    const_int_pos_8394 = PyInt_FromLong( 8394l );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_2_NV_int_pos_8394_tuple, 1, const_int_pos_8394 ); Py_INCREF( const_int_pos_8394 );
    const_str_digest_f1874426d1a94f4d5dc574f84a6d7368 = UNSTREAM_STRING( &constant_bin[ 34089 ], 93, 0 );
    const_tuple_str_plain_GLX_TEXTURE_FORMAT_EXT_int_pos_8405_tuple = PyTuple_New( 2 );
    const_str_plain_GLX_TEXTURE_FORMAT_EXT = UNSTREAM_STRING( &constant_bin[ 30372 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_EXT_int_pos_8405_tuple, 0, const_str_plain_GLX_TEXTURE_FORMAT_EXT ); Py_INCREF( const_str_plain_GLX_TEXTURE_FORMAT_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_EXT_int_pos_8405_tuple, 1, const_int_pos_8405 ); Py_INCREF( const_int_pos_8405 );
    const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_1_NV_int_pos_8393_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_1_NV_int_pos_8393_tuple, 0, const_str_plain_GLX_VIDEO_OUT_FIELD_1_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_FIELD_1_NV );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_1_NV_int_pos_8393_tuple, 1, const_int_pos_8393 ); Py_INCREF( const_int_pos_8393 );
    const_str_plain_GLX_AUX6_EXT = UNSTREAM_STRING( &constant_bin[ 30941 ], 12, 1 );
    const_tuple_str_plain_GLX_AUX7_EXT_int_pos_8425_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX7_EXT_int_pos_8425_tuple, 0, const_str_plain_GLX_AUX7_EXT ); Py_INCREF( const_str_plain_GLX_AUX7_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX7_EXT_int_pos_8425_tuple, 1, const_int_pos_8425 ); Py_INCREF( const_int_pos_8425 );
    const_int_pos_8424 = PyInt_FromLong( 8424l );
    const_str_digest_4e1a5d0367407337a6963aabb312ee17 = UNSTREAM_STRING( &constant_bin[ 34182 ], 118, 0 );
    const_tuple_str_plain_GLX_VIDEO_OUT_DEPTH_NV_int_pos_8389_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_DEPTH_NV_int_pos_8389_tuple, 0, const_str_plain_GLX_VIDEO_OUT_DEPTH_NV ); Py_INCREF( const_str_plain_GLX_VIDEO_OUT_DEPTH_NV );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_DEPTH_NV_int_pos_8389_tuple, 1, const_int_pos_8389 ); Py_INCREF( const_int_pos_8389 );
    const_str_digest_8ccf23569b690bfb6f477e67763890f8 = UNSTREAM_STRING( &constant_bin[ 34300 ], 86, 0 );
    const_tuple_str_plain_GLX_AUX6_EXT_int_pos_8424_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX6_EXT_int_pos_8424_tuple, 0, const_str_plain_GLX_AUX6_EXT ); Py_INCREF( const_str_plain_GLX_AUX6_EXT );
    PyTuple_SET_ITEM( const_tuple_str_plain_GLX_AUX6_EXT_int_pos_8424_tuple, 1, const_int_pos_8424 ); Py_INCREF( const_int_pos_8424 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_OpenGL$raw$_GLX_NV( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_332484f944f5735f9ff38439c1dee7da;

static void createModuleCodeObjects(void)
{
    module_filename_obj = const_str_digest_5fcb87f101acd4d4a8ad4bd9a9399ae6;
    codeobj_332484f944f5735f9ff38439c1dee7da = MAKE_CODEOBJ( module_filename_obj, const_str_plain__GLX_NV, 1, const_tuple_empty, 0, CO_NOFREE );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_1_struct__XDisplay( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_2_struct__XDisplay( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_3_struct___GLXcontextRec( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_4_struct___GLXcontextRec( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_5_struct___GLXFBConfigRec( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_6_struct___GLXFBConfigRec( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_7_struct_anon_103( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_8_struct_anon_18( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_9_struct__XExtData( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_10_struct_anon_107( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_11_struct_anon_108( PyObject **python_pars );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_1_struct__XDisplay( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_1_struct__XDisplay );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_1_struct__XDisplay );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_2_struct__XDisplay( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_2_struct__XDisplay );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_2_struct__XDisplay );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_3_struct___GLXcontextRec( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_3_struct___GLXcontextRec );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_3_struct___GLXcontextRec );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_4_struct___GLXcontextRec( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_4_struct___GLXcontextRec );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_4_struct___GLXcontextRec );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_5_struct___GLXFBConfigRec( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_5_struct___GLXFBConfigRec );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_5_struct___GLXFBConfigRec );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_6_struct___GLXFBConfigRec( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_6_struct___GLXFBConfigRec );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_6_struct___GLXFBConfigRec );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_7_struct_anon_103( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = LIST_COPY( const_list_18f477154d2fff5ffc050ea731cb93b4_list );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_7_struct_anon_103 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_7_struct_anon_103 );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_8_struct_anon_18( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = LIST_COPY( const_list_7a1ccd6364c109af5f21b16b30ec899d_list );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_8_struct_anon_18 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_8_struct_anon_18 );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_9_struct__XExtData( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = LIST_COPY( const_list_d1e2e2f9c5ed90e4b898dfdcada50e60_list );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_9_struct__XExtData );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_9_struct__XExtData );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_10_struct_anon_107( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = LIST_COPY( const_list_str_plain_pipeName_str_plain_networkId_list );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_10_struct_anon_107 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_10_struct_anon_107 );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_OpenGL$raw$_GLX_NV$$$class_11_struct_anon_108( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___slots__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = LIST_COPY( const_list_3c9ed202b8f22c762d54a2f0222c2b5a_list );
    assert( var___slots__ == NULL );
    var___slots__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___slots__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___slots__,
            var___slots__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_11_struct_anon_108 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___slots__ );
    Py_DECREF( var___slots__ );
    var___slots__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( OpenGL$raw$_GLX_NV$$$class_11_struct_anon_108 );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_OpenGL$raw$_GLX_NV =
{
    PyModuleDef_HEAD_INIT,
    "OpenGL.raw._GLX_NV",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( OpenGL$raw$_GLX_NV )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_OpenGL$raw$_GLX_NV );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION >= 350
    PyType_Ready( &Nuitka_Coroutine_Type );
    PyType_Ready( &Nuitka_CoroutineWrapper_Type );
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    createModuleConstants();
    createModuleCodeObjects();

    // puts( "in initOpenGL$raw$_GLX_NV" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_OpenGL$raw$_GLX_NV = Py_InitModule4(
        "OpenGL.raw._GLX_NV",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_OpenGL$raw$_GLX_NV = PyModule_Create( &mdef_OpenGL$raw$_GLX_NV );
#endif

    moduledict_OpenGL$raw$_GLX_NV = (PyDictObject *)((PyModuleObject *)module_OpenGL$raw$_GLX_NV)->md_dict;

    CHECK_OBJECT( module_OpenGL$raw$_GLX_NV );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_bfe8ab4328a5466c3dbd700a824dfd10, module_OpenGL$raw$_GLX_NV );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_OpenGL$raw$_GLX_NV );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__class = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__class = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__class = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__class = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__class = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__class = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__class_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__class = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__class_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__class = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__class_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__class = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__class_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__class = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_element_name_73;
    PyObject *tmp_args_element_name_74;
    PyObject *tmp_args_element_name_75;
    PyObject *tmp_args_element_name_76;
    PyObject *tmp_args_element_name_77;
    PyObject *tmp_args_element_name_78;
    PyObject *tmp_args_element_name_79;
    PyObject *tmp_args_element_name_80;
    PyObject *tmp_args_element_name_81;
    PyObject *tmp_args_element_name_82;
    PyObject *tmp_args_element_name_83;
    PyObject *tmp_args_element_name_84;
    PyObject *tmp_args_element_name_85;
    PyObject *tmp_args_element_name_86;
    PyObject *tmp_args_element_name_87;
    PyObject *tmp_args_element_name_88;
    PyObject *tmp_args_element_name_89;
    PyObject *tmp_args_element_name_90;
    PyObject *tmp_args_element_name_91;
    PyObject *tmp_args_element_name_92;
    PyObject *tmp_args_element_name_93;
    PyObject *tmp_args_element_name_94;
    PyObject *tmp_args_element_name_95;
    PyObject *tmp_args_element_name_96;
    PyObject *tmp_args_element_name_97;
    PyObject *tmp_args_element_name_98;
    PyObject *tmp_args_element_name_99;
    PyObject *tmp_args_element_name_100;
    PyObject *tmp_args_element_name_101;
    PyObject *tmp_args_element_name_102;
    PyObject *tmp_args_element_name_103;
    PyObject *tmp_args_element_name_104;
    PyObject *tmp_args_element_name_105;
    PyObject *tmp_args_element_name_106;
    PyObject *tmp_args_element_name_107;
    PyObject *tmp_args_element_name_108;
    PyObject *tmp_args_element_name_109;
    PyObject *tmp_args_element_name_110;
    PyObject *tmp_args_element_name_111;
    PyObject *tmp_args_element_name_112;
    PyObject *tmp_args_element_name_113;
    PyObject *tmp_args_element_name_114;
    PyObject *tmp_args_element_name_115;
    PyObject *tmp_args_element_name_116;
    PyObject *tmp_args_element_name_117;
    PyObject *tmp_args_element_name_118;
    PyObject *tmp_args_element_name_119;
    PyObject *tmp_args_element_name_120;
    PyObject *tmp_args_element_name_121;
    PyObject *tmp_args_element_name_122;
    PyObject *tmp_args_element_name_123;
    PyObject *tmp_args_element_name_124;
    PyObject *tmp_args_element_name_125;
    PyObject *tmp_args_element_name_126;
    PyObject *tmp_args_element_name_127;
    PyObject *tmp_args_element_name_128;
    PyObject *tmp_args_element_name_129;
    PyObject *tmp_args_element_name_130;
    PyObject *tmp_args_element_name_131;
    PyObject *tmp_args_element_name_132;
    PyObject *tmp_args_element_name_133;
    PyObject *tmp_args_element_name_134;
    PyObject *tmp_args_element_name_135;
    PyObject *tmp_args_element_name_136;
    PyObject *tmp_args_element_name_137;
    PyObject *tmp_args_element_name_138;
    PyObject *tmp_args_element_name_139;
    PyObject *tmp_args_element_name_140;
    PyObject *tmp_args_element_name_141;
    PyObject *tmp_args_element_name_142;
    PyObject *tmp_args_element_name_143;
    PyObject *tmp_args_element_name_144;
    PyObject *tmp_args_element_name_145;
    PyObject *tmp_args_element_name_146;
    PyObject *tmp_args_element_name_147;
    PyObject *tmp_args_element_name_148;
    PyObject *tmp_args_element_name_149;
    PyObject *tmp_args_element_name_150;
    PyObject *tmp_args_element_name_151;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_args_name_3;
    PyObject *tmp_args_name_4;
    PyObject *tmp_args_name_5;
    PyObject *tmp_args_name_6;
    PyObject *tmp_args_name_7;
    PyObject *tmp_args_name_8;
    PyObject *tmp_args_name_9;
    PyObject *tmp_args_name_10;
    PyObject *tmp_args_name_11;
    PyObject *tmp_args_name_12;
    PyObject *tmp_args_name_13;
    PyObject *tmp_args_name_14;
    PyObject *tmp_args_name_15;
    PyObject *tmp_args_name_16;
    PyObject *tmp_args_name_17;
    PyObject *tmp_args_name_18;
    PyObject *tmp_args_name_19;
    PyObject *tmp_args_name_20;
    PyObject *tmp_args_name_21;
    PyObject *tmp_args_name_22;
    PyObject *tmp_args_name_23;
    PyObject *tmp_args_name_24;
    PyObject *tmp_args_name_25;
    PyObject *tmp_args_name_26;
    PyObject *tmp_args_name_27;
    PyObject *tmp_args_name_28;
    PyObject *tmp_args_name_29;
    PyObject *tmp_args_name_30;
    PyObject *tmp_args_name_31;
    PyObject *tmp_args_name_32;
    PyObject *tmp_args_name_33;
    PyObject *tmp_args_name_34;
    PyObject *tmp_args_name_35;
    PyObject *tmp_args_name_36;
    PyObject *tmp_args_name_37;
    PyObject *tmp_args_name_38;
    PyObject *tmp_args_name_39;
    PyObject *tmp_args_name_40;
    PyObject *tmp_args_name_41;
    PyObject *tmp_args_name_42;
    PyObject *tmp_args_name_43;
    PyObject *tmp_args_name_44;
    PyObject *tmp_args_name_45;
    PyObject *tmp_args_name_46;
    PyObject *tmp_args_name_47;
    PyObject *tmp_args_name_48;
    PyObject *tmp_args_name_49;
    PyObject *tmp_args_name_50;
    PyObject *tmp_args_name_51;
    PyObject *tmp_args_name_52;
    PyObject *tmp_args_name_53;
    PyObject *tmp_args_name_54;
    PyObject *tmp_args_name_55;
    PyObject *tmp_args_name_56;
    PyObject *tmp_args_name_57;
    PyObject *tmp_args_name_58;
    PyObject *tmp_args_name_59;
    PyObject *tmp_args_name_60;
    PyObject *tmp_args_name_61;
    PyObject *tmp_args_name_62;
    PyObject *tmp_args_name_63;
    PyObject *tmp_args_name_64;
    PyObject *tmp_args_name_65;
    PyObject *tmp_args_name_66;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_name_7;
    PyObject *tmp_assattr_name_8;
    PyObject *tmp_assattr_name_9;
    PyObject *tmp_assattr_name_10;
    PyObject *tmp_assattr_name_11;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assattr_target_7;
    PyObject *tmp_assattr_target_8;
    PyObject *tmp_assattr_target_9;
    PyObject *tmp_assattr_target_10;
    PyObject *tmp_assattr_target_11;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_assign_source_260;
    PyObject *tmp_assign_source_261;
    PyObject *tmp_assign_source_262;
    PyObject *tmp_assign_source_263;
    PyObject *tmp_assign_source_264;
    PyObject *tmp_assign_source_265;
    PyObject *tmp_assign_source_266;
    PyObject *tmp_assign_source_267;
    PyObject *tmp_assign_source_268;
    PyObject *tmp_assign_source_269;
    PyObject *tmp_assign_source_270;
    PyObject *tmp_assign_source_271;
    PyObject *tmp_assign_source_272;
    PyObject *tmp_assign_source_273;
    PyObject *tmp_assign_source_274;
    PyObject *tmp_assign_source_275;
    PyObject *tmp_assign_source_276;
    PyObject *tmp_assign_source_277;
    PyObject *tmp_assign_source_278;
    PyObject *tmp_assign_source_279;
    PyObject *tmp_assign_source_280;
    PyObject *tmp_assign_source_281;
    PyObject *tmp_assign_source_282;
    PyObject *tmp_assign_source_283;
    PyObject *tmp_assign_source_284;
    PyObject *tmp_assign_source_285;
    PyObject *tmp_assign_source_286;
    PyObject *tmp_assign_source_287;
    PyObject *tmp_assign_source_288;
    PyObject *tmp_assign_source_289;
    PyObject *tmp_assign_source_290;
    PyObject *tmp_assign_source_291;
    PyObject *tmp_assign_source_292;
    PyObject *tmp_assign_source_293;
    PyObject *tmp_assign_source_294;
    PyObject *tmp_assign_source_295;
    PyObject *tmp_assign_source_296;
    PyObject *tmp_assign_source_297;
    PyObject *tmp_assign_source_298;
    PyObject *tmp_assign_source_299;
    PyObject *tmp_assign_source_300;
    PyObject *tmp_assign_source_301;
    PyObject *tmp_assign_source_302;
    PyObject *tmp_assign_source_303;
    PyObject *tmp_assign_source_304;
    PyObject *tmp_assign_source_305;
    PyObject *tmp_assign_source_306;
    PyObject *tmp_assign_source_307;
    PyObject *tmp_assign_source_308;
    PyObject *tmp_assign_source_309;
    PyObject *tmp_assign_source_310;
    PyObject *tmp_assign_source_311;
    PyObject *tmp_assign_source_312;
    PyObject *tmp_assign_source_313;
    PyObject *tmp_assign_source_314;
    PyObject *tmp_assign_source_315;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_bases_name_2;
    PyObject *tmp_bases_name_3;
    PyObject *tmp_bases_name_4;
    PyObject *tmp_bases_name_5;
    PyObject *tmp_bases_name_6;
    PyObject *tmp_bases_name_7;
    PyObject *tmp_bases_name_8;
    PyObject *tmp_bases_name_9;
    PyObject *tmp_bases_name_10;
    PyObject *tmp_bases_name_11;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    PyObject *tmp_called_name_83;
    PyObject *tmp_called_name_84;
    PyObject *tmp_called_name_85;
    PyObject *tmp_called_name_86;
    PyObject *tmp_called_name_87;
    PyObject *tmp_called_name_88;
    PyObject *tmp_called_name_89;
    PyObject *tmp_called_name_90;
    PyObject *tmp_called_name_91;
    PyObject *tmp_called_name_92;
    PyObject *tmp_called_name_93;
    PyObject *tmp_called_name_94;
    PyObject *tmp_called_name_95;
    PyObject *tmp_called_name_96;
    PyObject *tmp_called_name_97;
    PyObject *tmp_called_name_98;
    PyObject *tmp_called_name_99;
    PyObject *tmp_called_name_100;
    PyObject *tmp_called_name_101;
    PyObject *tmp_called_name_102;
    PyObject *tmp_called_name_103;
    PyObject *tmp_called_name_104;
    PyObject *tmp_called_name_105;
    PyObject *tmp_called_name_106;
    PyObject *tmp_called_name_107;
    PyObject *tmp_called_name_108;
    PyObject *tmp_called_name_109;
    PyObject *tmp_called_name_110;
    PyObject *tmp_called_name_111;
    PyObject *tmp_called_name_112;
    PyObject *tmp_called_name_113;
    PyObject *tmp_called_name_114;
    PyObject *tmp_called_name_115;
    PyObject *tmp_called_name_116;
    PyObject *tmp_called_name_117;
    PyObject *tmp_called_name_118;
    PyObject *tmp_called_name_119;
    PyObject *tmp_called_name_120;
    PyObject *tmp_called_name_121;
    PyObject *tmp_called_name_122;
    PyObject *tmp_called_name_123;
    PyObject *tmp_called_name_124;
    PyObject *tmp_called_name_125;
    PyObject *tmp_called_name_126;
    PyObject *tmp_called_name_127;
    PyObject *tmp_called_name_128;
    PyObject *tmp_called_name_129;
    PyObject *tmp_called_name_130;
    PyObject *tmp_called_name_131;
    PyObject *tmp_called_name_132;
    PyObject *tmp_called_name_133;
    PyObject *tmp_called_name_134;
    PyObject *tmp_called_name_135;
    PyObject *tmp_called_name_136;
    PyObject *tmp_called_name_137;
    PyObject *tmp_called_name_138;
    PyObject *tmp_called_name_139;
    PyObject *tmp_called_name_140;
    PyObject *tmp_called_name_141;
    PyObject *tmp_called_name_142;
    PyObject *tmp_called_name_143;
    PyObject *tmp_called_name_144;
    PyObject *tmp_called_name_145;
    PyObject *tmp_called_name_146;
    PyObject *tmp_called_name_147;
    PyObject *tmp_called_name_148;
    PyObject *tmp_called_name_149;
    PyObject *tmp_called_name_150;
    PyObject *tmp_called_name_151;
    PyObject *tmp_called_name_152;
    PyObject *tmp_called_name_153;
    PyObject *tmp_called_name_154;
    PyObject *tmp_called_name_155;
    PyObject *tmp_called_name_156;
    PyObject *tmp_called_name_157;
    PyObject *tmp_called_name_158;
    PyObject *tmp_called_name_159;
    PyObject *tmp_called_name_160;
    PyObject *tmp_called_name_161;
    PyObject *tmp_called_name_162;
    PyObject *tmp_called_name_163;
    PyObject *tmp_called_name_164;
    PyObject *tmp_called_name_165;
    PyObject *tmp_called_name_166;
    PyObject *tmp_called_name_167;
    PyObject *tmp_called_name_168;
    PyObject *tmp_called_name_169;
    PyObject *tmp_called_name_170;
    PyObject *tmp_called_name_171;
    PyObject *tmp_called_name_172;
    PyObject *tmp_called_name_173;
    PyObject *tmp_called_name_174;
    PyObject *tmp_called_name_175;
    PyObject *tmp_called_name_176;
    PyObject *tmp_called_name_177;
    PyObject *tmp_called_name_178;
    PyObject *tmp_called_name_179;
    PyObject *tmp_called_name_180;
    PyObject *tmp_called_name_181;
    PyObject *tmp_called_name_182;
    PyObject *tmp_called_name_183;
    PyObject *tmp_called_name_184;
    PyObject *tmp_called_name_185;
    PyObject *tmp_called_name_186;
    PyObject *tmp_called_name_187;
    PyObject *tmp_called_name_188;
    PyObject *tmp_called_name_189;
    PyObject *tmp_called_name_190;
    PyObject *tmp_called_name_191;
    PyObject *tmp_called_name_192;
    PyObject *tmp_called_name_193;
    PyObject *tmp_called_name_194;
    PyObject *tmp_called_name_195;
    PyObject *tmp_called_name_196;
    PyObject *tmp_called_name_197;
    PyObject *tmp_called_name_198;
    PyObject *tmp_called_name_199;
    PyObject *tmp_called_name_200;
    PyObject *tmp_called_name_201;
    PyObject *tmp_called_name_202;
    PyObject *tmp_called_name_203;
    PyObject *tmp_called_name_204;
    PyObject *tmp_called_name_205;
    PyObject *tmp_called_name_206;
    PyObject *tmp_called_name_207;
    PyObject *tmp_called_name_208;
    PyObject *tmp_called_name_209;
    PyObject *tmp_called_name_210;
    PyObject *tmp_called_name_211;
    PyObject *tmp_called_name_212;
    PyObject *tmp_called_name_213;
    PyObject *tmp_called_name_214;
    PyObject *tmp_called_name_215;
    PyObject *tmp_called_name_216;
    PyObject *tmp_called_name_217;
    PyObject *tmp_called_name_218;
    PyObject *tmp_called_name_219;
    PyObject *tmp_called_name_220;
    PyObject *tmp_called_name_221;
    PyObject *tmp_called_name_222;
    PyObject *tmp_called_name_223;
    PyObject *tmp_called_name_224;
    PyObject *tmp_called_name_225;
    PyObject *tmp_called_name_226;
    PyObject *tmp_called_name_227;
    PyObject *tmp_called_name_228;
    PyObject *tmp_called_name_229;
    PyObject *tmp_called_name_230;
    PyObject *tmp_called_name_231;
    PyObject *tmp_called_name_232;
    PyObject *tmp_called_name_233;
    PyObject *tmp_called_name_234;
    PyObject *tmp_called_name_235;
    PyObject *tmp_called_name_236;
    PyObject *tmp_called_name_237;
    PyObject *tmp_called_name_238;
    PyObject *tmp_called_name_239;
    PyObject *tmp_called_name_240;
    PyObject *tmp_called_name_241;
    PyObject *tmp_called_name_242;
    PyObject *tmp_called_name_243;
    PyObject *tmp_called_name_244;
    PyObject *tmp_called_name_245;
    PyObject *tmp_called_name_246;
    PyObject *tmp_called_name_247;
    PyObject *tmp_called_name_248;
    PyObject *tmp_called_name_249;
    PyObject *tmp_called_name_250;
    PyObject *tmp_called_name_251;
    PyObject *tmp_called_name_252;
    PyObject *tmp_called_name_253;
    PyObject *tmp_called_name_254;
    PyObject *tmp_called_name_255;
    PyObject *tmp_called_name_256;
    PyObject *tmp_called_name_257;
    PyObject *tmp_called_name_258;
    PyObject *tmp_called_name_259;
    PyObject *tmp_called_name_260;
    PyObject *tmp_called_name_261;
    PyObject *tmp_called_name_262;
    PyObject *tmp_called_name_263;
    PyObject *tmp_called_name_264;
    PyObject *tmp_called_name_265;
    PyObject *tmp_called_name_266;
    PyObject *tmp_called_name_267;
    PyObject *tmp_called_name_268;
    PyObject *tmp_called_name_269;
    PyObject *tmp_called_name_270;
    PyObject *tmp_called_name_271;
    PyObject *tmp_called_name_272;
    PyObject *tmp_called_name_273;
    PyObject *tmp_called_name_274;
    PyObject *tmp_called_name_275;
    PyObject *tmp_called_name_276;
    PyObject *tmp_called_name_277;
    PyObject *tmp_called_name_278;
    PyObject *tmp_called_name_279;
    PyObject *tmp_called_name_280;
    PyObject *tmp_called_name_281;
    PyObject *tmp_called_name_282;
    PyObject *tmp_called_name_283;
    PyObject *tmp_called_name_284;
    PyObject *tmp_called_name_285;
    PyObject *tmp_called_name_286;
    PyObject *tmp_called_name_287;
    PyObject *tmp_called_name_288;
    PyObject *tmp_called_name_289;
    PyObject *tmp_called_name_290;
    PyObject *tmp_called_name_291;
    PyObject *tmp_called_name_292;
    PyObject *tmp_called_name_293;
    PyObject *tmp_called_name_294;
    PyObject *tmp_called_name_295;
    PyObject *tmp_called_name_296;
    PyObject *tmp_called_name_297;
    PyObject *tmp_called_name_298;
    PyObject *tmp_called_name_299;
    PyObject *tmp_called_name_300;
    PyObject *tmp_called_name_301;
    PyObject *tmp_called_name_302;
    PyObject *tmp_called_name_303;
    PyObject *tmp_called_name_304;
    PyObject *tmp_called_name_305;
    PyObject *tmp_called_name_306;
    PyObject *tmp_called_name_307;
    PyObject *tmp_called_name_308;
    PyObject *tmp_called_name_309;
    PyObject *tmp_called_name_310;
    PyObject *tmp_called_name_311;
    PyObject *tmp_called_name_312;
    PyObject *tmp_called_name_313;
    PyObject *tmp_called_name_314;
    PyObject *tmp_called_name_315;
    PyObject *tmp_called_name_316;
    PyObject *tmp_called_name_317;
    PyObject *tmp_called_name_318;
    PyObject *tmp_called_name_319;
    PyObject *tmp_called_name_320;
    PyObject *tmp_called_name_321;
    PyObject *tmp_called_name_322;
    PyObject *tmp_called_name_323;
    PyObject *tmp_called_name_324;
    PyObject *tmp_called_name_325;
    PyObject *tmp_called_name_326;
    PyObject *tmp_called_name_327;
    PyObject *tmp_called_name_328;
    PyObject *tmp_called_name_329;
    PyObject *tmp_called_name_330;
    PyObject *tmp_called_name_331;
    PyObject *tmp_called_name_332;
    PyObject *tmp_called_name_333;
    PyObject *tmp_called_name_334;
    PyObject *tmp_called_name_335;
    PyObject *tmp_called_name_336;
    PyObject *tmp_called_name_337;
    PyObject *tmp_called_name_338;
    PyObject *tmp_called_name_339;
    PyObject *tmp_called_name_340;
    PyObject *tmp_called_name_341;
    PyObject *tmp_called_name_342;
    PyObject *tmp_called_name_343;
    PyObject *tmp_called_name_344;
    PyObject *tmp_called_name_345;
    PyObject *tmp_called_name_346;
    PyObject *tmp_called_name_347;
    PyObject *tmp_called_name_348;
    PyObject *tmp_called_name_349;
    PyObject *tmp_called_name_350;
    PyObject *tmp_called_name_351;
    PyObject *tmp_called_name_352;
    PyObject *tmp_called_name_353;
    PyObject *tmp_called_name_354;
    PyObject *tmp_called_name_355;
    PyObject *tmp_called_name_356;
    PyObject *tmp_called_name_357;
    PyObject *tmp_called_name_358;
    PyObject *tmp_called_name_359;
    PyObject *tmp_called_name_360;
    PyObject *tmp_called_name_361;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_key_28;
    PyObject *tmp_dict_key_29;
    PyObject *tmp_dict_key_30;
    PyObject *tmp_dict_key_31;
    PyObject *tmp_dict_key_32;
    PyObject *tmp_dict_key_33;
    PyObject *tmp_dict_key_34;
    PyObject *tmp_dict_key_35;
    PyObject *tmp_dict_key_36;
    PyObject *tmp_dict_key_37;
    PyObject *tmp_dict_key_38;
    PyObject *tmp_dict_key_39;
    PyObject *tmp_dict_key_40;
    PyObject *tmp_dict_key_41;
    PyObject *tmp_dict_key_42;
    PyObject *tmp_dict_key_43;
    PyObject *tmp_dict_key_44;
    PyObject *tmp_dict_key_45;
    PyObject *tmp_dict_key_46;
    PyObject *tmp_dict_key_47;
    PyObject *tmp_dict_key_48;
    PyObject *tmp_dict_key_49;
    PyObject *tmp_dict_key_50;
    PyObject *tmp_dict_key_51;
    PyObject *tmp_dict_key_52;
    PyObject *tmp_dict_key_53;
    PyObject *tmp_dict_key_54;
    PyObject *tmp_dict_key_55;
    PyObject *tmp_dict_key_56;
    PyObject *tmp_dict_key_57;
    PyObject *tmp_dict_key_58;
    PyObject *tmp_dict_key_59;
    PyObject *tmp_dict_key_60;
    PyObject *tmp_dict_key_61;
    PyObject *tmp_dict_key_62;
    PyObject *tmp_dict_key_63;
    PyObject *tmp_dict_key_64;
    PyObject *tmp_dict_key_65;
    PyObject *tmp_dict_key_66;
    PyObject *tmp_dict_key_67;
    PyObject *tmp_dict_key_68;
    PyObject *tmp_dict_key_69;
    PyObject *tmp_dict_key_70;
    PyObject *tmp_dict_key_71;
    PyObject *tmp_dict_key_72;
    PyObject *tmp_dict_key_73;
    PyObject *tmp_dict_key_74;
    PyObject *tmp_dict_key_75;
    PyObject *tmp_dict_key_76;
    PyObject *tmp_dict_key_77;
    PyObject *tmp_dict_key_78;
    PyObject *tmp_dict_key_79;
    PyObject *tmp_dict_key_80;
    PyObject *tmp_dict_key_81;
    PyObject *tmp_dict_key_82;
    PyObject *tmp_dict_key_83;
    PyObject *tmp_dict_key_84;
    PyObject *tmp_dict_key_85;
    PyObject *tmp_dict_key_86;
    PyObject *tmp_dict_key_87;
    PyObject *tmp_dict_key_88;
    PyObject *tmp_dict_key_89;
    PyObject *tmp_dict_key_90;
    PyObject *tmp_dict_key_91;
    PyObject *tmp_dict_key_92;
    PyObject *tmp_dict_key_93;
    PyObject *tmp_dict_key_94;
    PyObject *tmp_dict_key_95;
    PyObject *tmp_dict_key_96;
    PyObject *tmp_dict_key_97;
    PyObject *tmp_dict_key_98;
    PyObject *tmp_dict_key_99;
    PyObject *tmp_dict_key_100;
    PyObject *tmp_dict_key_101;
    PyObject *tmp_dict_key_102;
    PyObject *tmp_dict_key_103;
    PyObject *tmp_dict_key_104;
    PyObject *tmp_dict_key_105;
    PyObject *tmp_dict_key_106;
    PyObject *tmp_dict_key_107;
    PyObject *tmp_dict_key_108;
    PyObject *tmp_dict_key_109;
    PyObject *tmp_dict_key_110;
    PyObject *tmp_dict_key_111;
    PyObject *tmp_dict_key_112;
    PyObject *tmp_dict_key_113;
    PyObject *tmp_dict_key_114;
    PyObject *tmp_dict_key_115;
    PyObject *tmp_dict_key_116;
    PyObject *tmp_dict_key_117;
    PyObject *tmp_dict_key_118;
    PyObject *tmp_dict_key_119;
    PyObject *tmp_dict_key_120;
    PyObject *tmp_dict_key_121;
    PyObject *tmp_dict_key_122;
    PyObject *tmp_dict_key_123;
    PyObject *tmp_dict_key_124;
    PyObject *tmp_dict_key_125;
    PyObject *tmp_dict_key_126;
    PyObject *tmp_dict_key_127;
    PyObject *tmp_dict_key_128;
    PyObject *tmp_dict_key_129;
    PyObject *tmp_dict_key_130;
    PyObject *tmp_dict_key_131;
    PyObject *tmp_dict_key_132;
    PyObject *tmp_dict_key_133;
    PyObject *tmp_dict_key_134;
    PyObject *tmp_dict_key_135;
    PyObject *tmp_dict_key_136;
    PyObject *tmp_dict_key_137;
    PyObject *tmp_dict_key_138;
    PyObject *tmp_dict_key_139;
    PyObject *tmp_dict_key_140;
    PyObject *tmp_dict_key_141;
    PyObject *tmp_dict_key_142;
    PyObject *tmp_dict_key_143;
    PyObject *tmp_dict_key_144;
    PyObject *tmp_dict_key_145;
    PyObject *tmp_dict_key_146;
    PyObject *tmp_dict_key_147;
    PyObject *tmp_dict_key_148;
    PyObject *tmp_dict_key_149;
    PyObject *tmp_dict_key_150;
    PyObject *tmp_dict_key_151;
    PyObject *tmp_dict_key_152;
    PyObject *tmp_dict_key_153;
    PyObject *tmp_dict_key_154;
    PyObject *tmp_dict_key_155;
    PyObject *tmp_dict_key_156;
    PyObject *tmp_dict_key_157;
    PyObject *tmp_dict_key_158;
    PyObject *tmp_dict_key_159;
    PyObject *tmp_dict_key_160;
    PyObject *tmp_dict_key_161;
    PyObject *tmp_dict_key_162;
    PyObject *tmp_dict_key_163;
    PyObject *tmp_dict_key_164;
    PyObject *tmp_dict_key_165;
    PyObject *tmp_dict_key_166;
    PyObject *tmp_dict_key_167;
    PyObject *tmp_dict_key_168;
    PyObject *tmp_dict_key_169;
    PyObject *tmp_dict_key_170;
    PyObject *tmp_dict_key_171;
    PyObject *tmp_dict_key_172;
    PyObject *tmp_dict_key_173;
    PyObject *tmp_dict_key_174;
    PyObject *tmp_dict_key_175;
    PyObject *tmp_dict_key_176;
    PyObject *tmp_dict_key_177;
    PyObject *tmp_dict_key_178;
    PyObject *tmp_dict_key_179;
    PyObject *tmp_dict_key_180;
    PyObject *tmp_dict_key_181;
    PyObject *tmp_dict_key_182;
    PyObject *tmp_dict_key_183;
    PyObject *tmp_dict_key_184;
    PyObject *tmp_dict_key_185;
    PyObject *tmp_dict_key_186;
    PyObject *tmp_dict_key_187;
    PyObject *tmp_dict_key_188;
    PyObject *tmp_dict_key_189;
    PyObject *tmp_dict_key_190;
    PyObject *tmp_dict_key_191;
    PyObject *tmp_dict_key_192;
    PyObject *tmp_dict_key_193;
    PyObject *tmp_dict_key_194;
    PyObject *tmp_dict_key_195;
    PyObject *tmp_dict_key_196;
    PyObject *tmp_dict_key_197;
    PyObject *tmp_dict_key_198;
    PyObject *tmp_dict_key_199;
    PyObject *tmp_dict_key_200;
    PyObject *tmp_dict_key_201;
    PyObject *tmp_dict_key_202;
    PyObject *tmp_dict_key_203;
    PyObject *tmp_dict_key_204;
    PyObject *tmp_dict_key_205;
    PyObject *tmp_dict_key_206;
    PyObject *tmp_dict_key_207;
    PyObject *tmp_dict_key_208;
    PyObject *tmp_dict_key_209;
    PyObject *tmp_dict_key_210;
    PyObject *tmp_dict_key_211;
    PyObject *tmp_dict_key_212;
    PyObject *tmp_dict_key_213;
    PyObject *tmp_dict_key_214;
    PyObject *tmp_dict_key_215;
    PyObject *tmp_dict_key_216;
    PyObject *tmp_dict_key_217;
    PyObject *tmp_dict_key_218;
    PyObject *tmp_dict_key_219;
    PyObject *tmp_dict_key_220;
    PyObject *tmp_dict_key_221;
    PyObject *tmp_dict_key_222;
    PyObject *tmp_dict_key_223;
    PyObject *tmp_dict_key_224;
    PyObject *tmp_dict_key_225;
    PyObject *tmp_dict_key_226;
    PyObject *tmp_dict_key_227;
    PyObject *tmp_dict_key_228;
    PyObject *tmp_dict_key_229;
    PyObject *tmp_dict_key_230;
    PyObject *tmp_dict_key_231;
    PyObject *tmp_dict_key_232;
    PyObject *tmp_dict_key_233;
    PyObject *tmp_dict_key_234;
    PyObject *tmp_dict_key_235;
    PyObject *tmp_dict_key_236;
    PyObject *tmp_dict_key_237;
    PyObject *tmp_dict_key_238;
    PyObject *tmp_dict_key_239;
    PyObject *tmp_dict_key_240;
    PyObject *tmp_dict_key_241;
    PyObject *tmp_dict_key_242;
    PyObject *tmp_dict_key_243;
    PyObject *tmp_dict_key_244;
    PyObject *tmp_dict_key_245;
    PyObject *tmp_dict_key_246;
    PyObject *tmp_dict_key_247;
    PyObject *tmp_dict_key_248;
    PyObject *tmp_dict_key_249;
    PyObject *tmp_dict_key_250;
    PyObject *tmp_dict_key_251;
    PyObject *tmp_dict_key_252;
    PyObject *tmp_dict_key_253;
    PyObject *tmp_dict_key_254;
    PyObject *tmp_dict_key_255;
    PyObject *tmp_dict_key_256;
    PyObject *tmp_dict_key_257;
    PyObject *tmp_dict_key_258;
    PyObject *tmp_dict_key_259;
    PyObject *tmp_dict_key_260;
    PyObject *tmp_dict_key_261;
    PyObject *tmp_dict_key_262;
    PyObject *tmp_dict_key_263;
    PyObject *tmp_dict_key_264;
    PyObject *tmp_dict_key_265;
    PyObject *tmp_dict_key_266;
    PyObject *tmp_dict_key_267;
    PyObject *tmp_dict_key_268;
    PyObject *tmp_dict_key_269;
    PyObject *tmp_dict_key_270;
    PyObject *tmp_dict_key_271;
    PyObject *tmp_dict_key_272;
    PyObject *tmp_dict_key_273;
    PyObject *tmp_dict_key_274;
    PyObject *tmp_dict_key_275;
    PyObject *tmp_dict_key_276;
    PyObject *tmp_dict_key_277;
    PyObject *tmp_dict_key_278;
    PyObject *tmp_dict_key_279;
    PyObject *tmp_dict_key_280;
    PyObject *tmp_dict_key_281;
    PyObject *tmp_dict_key_282;
    PyObject *tmp_dict_key_283;
    PyObject *tmp_dict_key_284;
    PyObject *tmp_dict_key_285;
    PyObject *tmp_dict_key_286;
    PyObject *tmp_dict_key_287;
    PyObject *tmp_dict_key_288;
    PyObject *tmp_dict_key_289;
    PyObject *tmp_dict_key_290;
    PyObject *tmp_dict_key_291;
    PyObject *tmp_dict_key_292;
    PyObject *tmp_dict_key_293;
    PyObject *tmp_dict_key_294;
    PyObject *tmp_dict_key_295;
    PyObject *tmp_dict_key_296;
    PyObject *tmp_dict_key_297;
    PyObject *tmp_dict_key_298;
    PyObject *tmp_dict_key_299;
    PyObject *tmp_dict_key_300;
    PyObject *tmp_dict_key_301;
    PyObject *tmp_dict_key_302;
    PyObject *tmp_dict_key_303;
    PyObject *tmp_dict_key_304;
    PyObject *tmp_dict_key_305;
    PyObject *tmp_dict_key_306;
    PyObject *tmp_dict_key_307;
    PyObject *tmp_dict_key_308;
    PyObject *tmp_dict_key_309;
    PyObject *tmp_dict_key_310;
    PyObject *tmp_dict_key_311;
    PyObject *tmp_dict_key_312;
    PyObject *tmp_dict_key_313;
    PyObject *tmp_dict_key_314;
    PyObject *tmp_dict_key_315;
    PyObject *tmp_dict_key_316;
    PyObject *tmp_dict_key_317;
    PyObject *tmp_dict_key_318;
    PyObject *tmp_dict_key_319;
    PyObject *tmp_dict_key_320;
    PyObject *tmp_dict_key_321;
    PyObject *tmp_dict_key_322;
    PyObject *tmp_dict_key_323;
    PyObject *tmp_dict_key_324;
    PyObject *tmp_dict_key_325;
    PyObject *tmp_dict_key_326;
    PyObject *tmp_dict_key_327;
    PyObject *tmp_dict_key_328;
    PyObject *tmp_dict_key_329;
    PyObject *tmp_dict_key_330;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_name_2;
    PyObject *tmp_dict_name_3;
    PyObject *tmp_dict_name_4;
    PyObject *tmp_dict_name_5;
    PyObject *tmp_dict_name_6;
    PyObject *tmp_dict_name_7;
    PyObject *tmp_dict_name_8;
    PyObject *tmp_dict_name_9;
    PyObject *tmp_dict_name_10;
    PyObject *tmp_dict_name_11;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dict_value_28;
    PyObject *tmp_dict_value_29;
    PyObject *tmp_dict_value_30;
    PyObject *tmp_dict_value_31;
    PyObject *tmp_dict_value_32;
    PyObject *tmp_dict_value_33;
    PyObject *tmp_dict_value_34;
    PyObject *tmp_dict_value_35;
    PyObject *tmp_dict_value_36;
    PyObject *tmp_dict_value_37;
    PyObject *tmp_dict_value_38;
    PyObject *tmp_dict_value_39;
    PyObject *tmp_dict_value_40;
    PyObject *tmp_dict_value_41;
    PyObject *tmp_dict_value_42;
    PyObject *tmp_dict_value_43;
    PyObject *tmp_dict_value_44;
    PyObject *tmp_dict_value_45;
    PyObject *tmp_dict_value_46;
    PyObject *tmp_dict_value_47;
    PyObject *tmp_dict_value_48;
    PyObject *tmp_dict_value_49;
    PyObject *tmp_dict_value_50;
    PyObject *tmp_dict_value_51;
    PyObject *tmp_dict_value_52;
    PyObject *tmp_dict_value_53;
    PyObject *tmp_dict_value_54;
    PyObject *tmp_dict_value_55;
    PyObject *tmp_dict_value_56;
    PyObject *tmp_dict_value_57;
    PyObject *tmp_dict_value_58;
    PyObject *tmp_dict_value_59;
    PyObject *tmp_dict_value_60;
    PyObject *tmp_dict_value_61;
    PyObject *tmp_dict_value_62;
    PyObject *tmp_dict_value_63;
    PyObject *tmp_dict_value_64;
    PyObject *tmp_dict_value_65;
    PyObject *tmp_dict_value_66;
    PyObject *tmp_dict_value_67;
    PyObject *tmp_dict_value_68;
    PyObject *tmp_dict_value_69;
    PyObject *tmp_dict_value_70;
    PyObject *tmp_dict_value_71;
    PyObject *tmp_dict_value_72;
    PyObject *tmp_dict_value_73;
    PyObject *tmp_dict_value_74;
    PyObject *tmp_dict_value_75;
    PyObject *tmp_dict_value_76;
    PyObject *tmp_dict_value_77;
    PyObject *tmp_dict_value_78;
    PyObject *tmp_dict_value_79;
    PyObject *tmp_dict_value_80;
    PyObject *tmp_dict_value_81;
    PyObject *tmp_dict_value_82;
    PyObject *tmp_dict_value_83;
    PyObject *tmp_dict_value_84;
    PyObject *tmp_dict_value_85;
    PyObject *tmp_dict_value_86;
    PyObject *tmp_dict_value_87;
    PyObject *tmp_dict_value_88;
    PyObject *tmp_dict_value_89;
    PyObject *tmp_dict_value_90;
    PyObject *tmp_dict_value_91;
    PyObject *tmp_dict_value_92;
    PyObject *tmp_dict_value_93;
    PyObject *tmp_dict_value_94;
    PyObject *tmp_dict_value_95;
    PyObject *tmp_dict_value_96;
    PyObject *tmp_dict_value_97;
    PyObject *tmp_dict_value_98;
    PyObject *tmp_dict_value_99;
    PyObject *tmp_dict_value_100;
    PyObject *tmp_dict_value_101;
    PyObject *tmp_dict_value_102;
    PyObject *tmp_dict_value_103;
    PyObject *tmp_dict_value_104;
    PyObject *tmp_dict_value_105;
    PyObject *tmp_dict_value_106;
    PyObject *tmp_dict_value_107;
    PyObject *tmp_dict_value_108;
    PyObject *tmp_dict_value_109;
    PyObject *tmp_dict_value_110;
    PyObject *tmp_dict_value_111;
    PyObject *tmp_dict_value_112;
    PyObject *tmp_dict_value_113;
    PyObject *tmp_dict_value_114;
    PyObject *tmp_dict_value_115;
    PyObject *tmp_dict_value_116;
    PyObject *tmp_dict_value_117;
    PyObject *tmp_dict_value_118;
    PyObject *tmp_dict_value_119;
    PyObject *tmp_dict_value_120;
    PyObject *tmp_dict_value_121;
    PyObject *tmp_dict_value_122;
    PyObject *tmp_dict_value_123;
    PyObject *tmp_dict_value_124;
    PyObject *tmp_dict_value_125;
    PyObject *tmp_dict_value_126;
    PyObject *tmp_dict_value_127;
    PyObject *tmp_dict_value_128;
    PyObject *tmp_dict_value_129;
    PyObject *tmp_dict_value_130;
    PyObject *tmp_dict_value_131;
    PyObject *tmp_dict_value_132;
    PyObject *tmp_dict_value_133;
    PyObject *tmp_dict_value_134;
    PyObject *tmp_dict_value_135;
    PyObject *tmp_dict_value_136;
    PyObject *tmp_dict_value_137;
    PyObject *tmp_dict_value_138;
    PyObject *tmp_dict_value_139;
    PyObject *tmp_dict_value_140;
    PyObject *tmp_dict_value_141;
    PyObject *tmp_dict_value_142;
    PyObject *tmp_dict_value_143;
    PyObject *tmp_dict_value_144;
    PyObject *tmp_dict_value_145;
    PyObject *tmp_dict_value_146;
    PyObject *tmp_dict_value_147;
    PyObject *tmp_dict_value_148;
    PyObject *tmp_dict_value_149;
    PyObject *tmp_dict_value_150;
    PyObject *tmp_dict_value_151;
    PyObject *tmp_dict_value_152;
    PyObject *tmp_dict_value_153;
    PyObject *tmp_dict_value_154;
    PyObject *tmp_dict_value_155;
    PyObject *tmp_dict_value_156;
    PyObject *tmp_dict_value_157;
    PyObject *tmp_dict_value_158;
    PyObject *tmp_dict_value_159;
    PyObject *tmp_dict_value_160;
    PyObject *tmp_dict_value_161;
    PyObject *tmp_dict_value_162;
    PyObject *tmp_dict_value_163;
    PyObject *tmp_dict_value_164;
    PyObject *tmp_dict_value_165;
    PyObject *tmp_dict_value_166;
    PyObject *tmp_dict_value_167;
    PyObject *tmp_dict_value_168;
    PyObject *tmp_dict_value_169;
    PyObject *tmp_dict_value_170;
    PyObject *tmp_dict_value_171;
    PyObject *tmp_dict_value_172;
    PyObject *tmp_dict_value_173;
    PyObject *tmp_dict_value_174;
    PyObject *tmp_dict_value_175;
    PyObject *tmp_dict_value_176;
    PyObject *tmp_dict_value_177;
    PyObject *tmp_dict_value_178;
    PyObject *tmp_dict_value_179;
    PyObject *tmp_dict_value_180;
    PyObject *tmp_dict_value_181;
    PyObject *tmp_dict_value_182;
    PyObject *tmp_dict_value_183;
    PyObject *tmp_dict_value_184;
    PyObject *tmp_dict_value_185;
    PyObject *tmp_dict_value_186;
    PyObject *tmp_dict_value_187;
    PyObject *tmp_dict_value_188;
    PyObject *tmp_dict_value_189;
    PyObject *tmp_dict_value_190;
    PyObject *tmp_dict_value_191;
    PyObject *tmp_dict_value_192;
    PyObject *tmp_dict_value_193;
    PyObject *tmp_dict_value_194;
    PyObject *tmp_dict_value_195;
    PyObject *tmp_dict_value_196;
    PyObject *tmp_dict_value_197;
    PyObject *tmp_dict_value_198;
    PyObject *tmp_dict_value_199;
    PyObject *tmp_dict_value_200;
    PyObject *tmp_dict_value_201;
    PyObject *tmp_dict_value_202;
    PyObject *tmp_dict_value_203;
    PyObject *tmp_dict_value_204;
    PyObject *tmp_dict_value_205;
    PyObject *tmp_dict_value_206;
    PyObject *tmp_dict_value_207;
    PyObject *tmp_dict_value_208;
    PyObject *tmp_dict_value_209;
    PyObject *tmp_dict_value_210;
    PyObject *tmp_dict_value_211;
    PyObject *tmp_dict_value_212;
    PyObject *tmp_dict_value_213;
    PyObject *tmp_dict_value_214;
    PyObject *tmp_dict_value_215;
    PyObject *tmp_dict_value_216;
    PyObject *tmp_dict_value_217;
    PyObject *tmp_dict_value_218;
    PyObject *tmp_dict_value_219;
    PyObject *tmp_dict_value_220;
    PyObject *tmp_dict_value_221;
    PyObject *tmp_dict_value_222;
    PyObject *tmp_dict_value_223;
    PyObject *tmp_dict_value_224;
    PyObject *tmp_dict_value_225;
    PyObject *tmp_dict_value_226;
    PyObject *tmp_dict_value_227;
    PyObject *tmp_dict_value_228;
    PyObject *tmp_dict_value_229;
    PyObject *tmp_dict_value_230;
    PyObject *tmp_dict_value_231;
    PyObject *tmp_dict_value_232;
    PyObject *tmp_dict_value_233;
    PyObject *tmp_dict_value_234;
    PyObject *tmp_dict_value_235;
    PyObject *tmp_dict_value_236;
    PyObject *tmp_dict_value_237;
    PyObject *tmp_dict_value_238;
    PyObject *tmp_dict_value_239;
    PyObject *tmp_dict_value_240;
    PyObject *tmp_dict_value_241;
    PyObject *tmp_dict_value_242;
    PyObject *tmp_dict_value_243;
    PyObject *tmp_dict_value_244;
    PyObject *tmp_dict_value_245;
    PyObject *tmp_dict_value_246;
    PyObject *tmp_dict_value_247;
    PyObject *tmp_dict_value_248;
    PyObject *tmp_dict_value_249;
    PyObject *tmp_dict_value_250;
    PyObject *tmp_dict_value_251;
    PyObject *tmp_dict_value_252;
    PyObject *tmp_dict_value_253;
    PyObject *tmp_dict_value_254;
    PyObject *tmp_dict_value_255;
    PyObject *tmp_dict_value_256;
    PyObject *tmp_dict_value_257;
    PyObject *tmp_dict_value_258;
    PyObject *tmp_dict_value_259;
    PyObject *tmp_dict_value_260;
    PyObject *tmp_dict_value_261;
    PyObject *tmp_dict_value_262;
    PyObject *tmp_dict_value_263;
    PyObject *tmp_dict_value_264;
    PyObject *tmp_dict_value_265;
    PyObject *tmp_dict_value_266;
    PyObject *tmp_dict_value_267;
    PyObject *tmp_dict_value_268;
    PyObject *tmp_dict_value_269;
    PyObject *tmp_dict_value_270;
    PyObject *tmp_dict_value_271;
    PyObject *tmp_dict_value_272;
    PyObject *tmp_dict_value_273;
    PyObject *tmp_dict_value_274;
    PyObject *tmp_dict_value_275;
    PyObject *tmp_dict_value_276;
    PyObject *tmp_dict_value_277;
    PyObject *tmp_dict_value_278;
    PyObject *tmp_dict_value_279;
    PyObject *tmp_dict_value_280;
    PyObject *tmp_dict_value_281;
    PyObject *tmp_dict_value_282;
    PyObject *tmp_dict_value_283;
    PyObject *tmp_dict_value_284;
    PyObject *tmp_dict_value_285;
    PyObject *tmp_dict_value_286;
    PyObject *tmp_dict_value_287;
    PyObject *tmp_dict_value_288;
    PyObject *tmp_dict_value_289;
    PyObject *tmp_dict_value_290;
    PyObject *tmp_dict_value_291;
    PyObject *tmp_dict_value_292;
    PyObject *tmp_dict_value_293;
    PyObject *tmp_dict_value_294;
    PyObject *tmp_dict_value_295;
    PyObject *tmp_dict_value_296;
    PyObject *tmp_dict_value_297;
    PyObject *tmp_dict_value_298;
    PyObject *tmp_dict_value_299;
    PyObject *tmp_dict_value_300;
    PyObject *tmp_dict_value_301;
    PyObject *tmp_dict_value_302;
    PyObject *tmp_dict_value_303;
    PyObject *tmp_dict_value_304;
    PyObject *tmp_dict_value_305;
    PyObject *tmp_dict_value_306;
    PyObject *tmp_dict_value_307;
    PyObject *tmp_dict_value_308;
    PyObject *tmp_dict_value_309;
    PyObject *tmp_dict_value_310;
    PyObject *tmp_dict_value_311;
    PyObject *tmp_dict_value_312;
    PyObject *tmp_dict_value_313;
    PyObject *tmp_dict_value_314;
    PyObject *tmp_dict_value_315;
    PyObject *tmp_dict_value_316;
    PyObject *tmp_dict_value_317;
    PyObject *tmp_dict_value_318;
    PyObject *tmp_dict_value_319;
    PyObject *tmp_dict_value_320;
    PyObject *tmp_dict_value_321;
    PyObject *tmp_dict_value_322;
    PyObject *tmp_dict_value_323;
    PyObject *tmp_dict_value_324;
    PyObject *tmp_dict_value_325;
    PyObject *tmp_dict_value_326;
    PyObject *tmp_dict_value_327;
    PyObject *tmp_dict_value_328;
    PyObject *tmp_dict_value_329;
    PyObject *tmp_dict_value_330;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_key_name_1;
    PyObject *tmp_key_name_2;
    PyObject *tmp_key_name_3;
    PyObject *tmp_key_name_4;
    PyObject *tmp_key_name_5;
    PyObject *tmp_key_name_6;
    PyObject *tmp_key_name_7;
    PyObject *tmp_key_name_8;
    PyObject *tmp_key_name_9;
    PyObject *tmp_key_name_10;
    PyObject *tmp_key_name_11;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    PyObject *tmp_kw_name_7;
    PyObject *tmp_kw_name_8;
    PyObject *tmp_kw_name_9;
    PyObject *tmp_kw_name_10;
    PyObject *tmp_kw_name_11;
    PyObject *tmp_kw_name_12;
    PyObject *tmp_kw_name_13;
    PyObject *tmp_kw_name_14;
    PyObject *tmp_kw_name_15;
    PyObject *tmp_kw_name_16;
    PyObject *tmp_kw_name_17;
    PyObject *tmp_kw_name_18;
    PyObject *tmp_kw_name_19;
    PyObject *tmp_kw_name_20;
    PyObject *tmp_kw_name_21;
    PyObject *tmp_kw_name_22;
    PyObject *tmp_kw_name_23;
    PyObject *tmp_kw_name_24;
    PyObject *tmp_kw_name_25;
    PyObject *tmp_kw_name_26;
    PyObject *tmp_kw_name_27;
    PyObject *tmp_kw_name_28;
    PyObject *tmp_kw_name_29;
    PyObject *tmp_kw_name_30;
    PyObject *tmp_kw_name_31;
    PyObject *tmp_kw_name_32;
    PyObject *tmp_kw_name_33;
    PyObject *tmp_kw_name_34;
    PyObject *tmp_kw_name_35;
    PyObject *tmp_kw_name_36;
    PyObject *tmp_kw_name_37;
    PyObject *tmp_kw_name_38;
    PyObject *tmp_kw_name_39;
    PyObject *tmp_kw_name_40;
    PyObject *tmp_kw_name_41;
    PyObject *tmp_kw_name_42;
    PyObject *tmp_kw_name_43;
    PyObject *tmp_kw_name_44;
    PyObject *tmp_kw_name_45;
    PyObject *tmp_kw_name_46;
    PyObject *tmp_kw_name_47;
    PyObject *tmp_kw_name_48;
    PyObject *tmp_kw_name_49;
    PyObject *tmp_kw_name_50;
    PyObject *tmp_kw_name_51;
    PyObject *tmp_kw_name_52;
    PyObject *tmp_kw_name_53;
    PyObject *tmp_kw_name_54;
    PyObject *tmp_kw_name_55;
    PyObject *tmp_kw_name_56;
    PyObject *tmp_kw_name_57;
    PyObject *tmp_kw_name_58;
    PyObject *tmp_kw_name_59;
    PyObject *tmp_kw_name_60;
    PyObject *tmp_kw_name_61;
    PyObject *tmp_kw_name_62;
    PyObject *tmp_kw_name_63;
    PyObject *tmp_kw_name_64;
    PyObject *tmp_kw_name_65;
    PyObject *tmp_kw_name_66;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_list_element_7;
    PyObject *tmp_list_element_8;
    PyObject *tmp_list_element_9;
    PyObject *tmp_list_element_10;
    PyObject *tmp_list_element_11;
    PyObject *tmp_list_element_12;
    PyObject *tmp_list_element_13;
    PyObject *tmp_list_element_14;
    PyObject *tmp_list_element_15;
    PyObject *tmp_list_element_16;
    PyObject *tmp_list_element_17;
    PyObject *tmp_list_element_18;
    PyObject *tmp_list_element_19;
    PyObject *tmp_list_element_20;
    PyObject *tmp_list_element_21;
    PyObject *tmp_list_element_22;
    PyObject *tmp_list_element_23;
    PyObject *tmp_list_element_24;
    PyObject *tmp_list_element_25;
    PyObject *tmp_list_element_26;
    PyObject *tmp_list_element_27;
    PyObject *tmp_list_element_28;
    PyObject *tmp_list_element_29;
    PyObject *tmp_list_element_30;
    PyObject *tmp_list_element_31;
    PyObject *tmp_list_element_32;
    PyObject *tmp_list_element_33;
    PyObject *tmp_list_element_34;
    PyObject *tmp_list_element_35;
    PyObject *tmp_list_element_36;
    PyObject *tmp_list_element_37;
    PyObject *tmp_list_element_38;
    PyObject *tmp_list_element_39;
    PyObject *tmp_list_element_40;
    PyObject *tmp_list_element_41;
    PyObject *tmp_list_element_42;
    PyObject *tmp_list_element_43;
    PyObject *tmp_list_element_44;
    PyObject *tmp_list_element_45;
    PyObject *tmp_list_element_46;
    PyObject *tmp_list_element_47;
    PyObject *tmp_list_element_48;
    PyObject *tmp_list_element_49;
    PyObject *tmp_list_element_50;
    PyObject *tmp_list_element_51;
    PyObject *tmp_list_element_52;
    PyObject *tmp_list_element_53;
    PyObject *tmp_list_element_54;
    PyObject *tmp_list_element_55;
    PyObject *tmp_list_element_56;
    PyObject *tmp_list_element_57;
    PyObject *tmp_list_element_58;
    PyObject *tmp_list_element_59;
    PyObject *tmp_list_element_60;
    PyObject *tmp_list_element_61;
    PyObject *tmp_list_element_62;
    PyObject *tmp_list_element_63;
    PyObject *tmp_list_element_64;
    PyObject *tmp_list_element_65;
    PyObject *tmp_list_element_66;
    PyObject *tmp_list_element_67;
    PyObject *tmp_list_element_68;
    PyObject *tmp_list_element_69;
    PyObject *tmp_list_element_70;
    PyObject *tmp_list_element_71;
    PyObject *tmp_list_element_72;
    PyObject *tmp_list_element_73;
    PyObject *tmp_list_element_74;
    PyObject *tmp_list_element_75;
    bool tmp_result;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_source_name_83;
    PyObject *tmp_source_name_84;
    PyObject *tmp_source_name_85;
    PyObject *tmp_source_name_86;
    PyObject *tmp_source_name_87;
    PyObject *tmp_source_name_88;
    PyObject *tmp_source_name_89;
    PyObject *tmp_source_name_90;
    PyObject *tmp_source_name_91;
    PyObject *tmp_source_name_92;
    PyObject *tmp_source_name_93;
    PyObject *tmp_source_name_94;
    PyObject *tmp_source_name_95;
    PyObject *tmp_source_name_96;
    PyObject *tmp_source_name_97;
    PyObject *tmp_source_name_98;
    PyObject *tmp_source_name_99;
    PyObject *tmp_source_name_100;
    PyObject *tmp_source_name_101;
    PyObject *tmp_source_name_102;
    PyObject *tmp_source_name_103;
    PyObject *tmp_source_name_104;
    PyObject *tmp_source_name_105;
    PyObject *tmp_source_name_106;
    PyObject *tmp_source_name_107;
    PyObject *tmp_source_name_108;
    PyObject *tmp_source_name_109;
    PyObject *tmp_source_name_110;
    PyObject *tmp_source_name_111;
    PyObject *tmp_source_name_112;
    PyObject *tmp_source_name_113;
    PyObject *tmp_source_name_114;
    PyObject *tmp_source_name_115;
    PyObject *tmp_source_name_116;
    PyObject *tmp_source_name_117;
    PyObject *tmp_source_name_118;
    PyObject *tmp_source_name_119;
    PyObject *tmp_source_name_120;
    PyObject *tmp_source_name_121;
    PyObject *tmp_source_name_122;
    PyObject *tmp_source_name_123;
    PyObject *tmp_source_name_124;
    PyObject *tmp_source_name_125;
    PyObject *tmp_source_name_126;
    PyObject *tmp_source_name_127;
    PyObject *tmp_source_name_128;
    PyObject *tmp_source_name_129;
    PyObject *tmp_source_name_130;
    PyObject *tmp_source_name_131;
    PyObject *tmp_source_name_132;
    PyObject *tmp_source_name_133;
    PyObject *tmp_source_name_134;
    PyObject *tmp_source_name_135;
    PyObject *tmp_source_name_136;
    PyObject *tmp_source_name_137;
    PyObject *tmp_source_name_138;
    PyObject *tmp_source_name_139;
    PyObject *tmp_source_name_140;
    PyObject *tmp_source_name_141;
    PyObject *tmp_source_name_142;
    PyObject *tmp_source_name_143;
    PyObject *tmp_source_name_144;
    PyObject *tmp_source_name_145;
    PyObject *tmp_source_name_146;
    PyObject *tmp_source_name_147;
    PyObject *tmp_source_name_148;
    PyObject *tmp_source_name_149;
    PyObject *tmp_source_name_150;
    PyObject *tmp_source_name_151;
    PyObject *tmp_source_name_152;
    PyObject *tmp_source_name_153;
    PyObject *tmp_source_name_154;
    PyObject *tmp_source_name_155;
    PyObject *tmp_source_name_156;
    PyObject *tmp_source_name_157;
    PyObject *tmp_source_name_158;
    PyObject *tmp_source_name_159;
    PyObject *tmp_source_name_160;
    PyObject *tmp_source_name_161;
    PyObject *tmp_source_name_162;
    PyObject *tmp_source_name_163;
    PyObject *tmp_source_name_164;
    PyObject *tmp_source_name_165;
    PyObject *tmp_source_name_166;
    PyObject *tmp_source_name_167;
    PyObject *tmp_source_name_168;
    PyObject *tmp_source_name_169;
    PyObject *tmp_source_name_170;
    PyObject *tmp_source_name_171;
    PyObject *tmp_source_name_172;
    PyObject *tmp_source_name_173;
    PyObject *tmp_source_name_174;
    PyObject *tmp_source_name_175;
    PyObject *tmp_source_name_176;
    PyObject *tmp_source_name_177;
    PyObject *tmp_source_name_178;
    PyObject *tmp_source_name_179;
    PyObject *tmp_source_name_180;
    PyObject *tmp_source_name_181;
    PyObject *tmp_source_name_182;
    PyObject *tmp_source_name_183;
    PyObject *tmp_source_name_184;
    PyObject *tmp_source_name_185;
    PyObject *tmp_source_name_186;
    PyObject *tmp_source_name_187;
    PyObject *tmp_source_name_188;
    PyObject *tmp_source_name_189;
    PyObject *tmp_source_name_190;
    PyObject *tmp_source_name_191;
    PyObject *tmp_source_name_192;
    PyObject *tmp_source_name_193;
    PyObject *tmp_source_name_194;
    PyObject *tmp_source_name_195;
    PyObject *tmp_source_name_196;
    PyObject *tmp_source_name_197;
    PyObject *tmp_source_name_198;
    PyObject *tmp_source_name_199;
    PyObject *tmp_source_name_200;
    PyObject *tmp_source_name_201;
    PyObject *tmp_source_name_202;
    PyObject *tmp_source_name_203;
    PyObject *tmp_source_name_204;
    PyObject *tmp_source_name_205;
    PyObject *tmp_source_name_206;
    PyObject *tmp_source_name_207;
    PyObject *tmp_source_name_208;
    PyObject *tmp_source_name_209;
    PyObject *tmp_source_name_210;
    PyObject *tmp_source_name_211;
    PyObject *tmp_source_name_212;
    PyObject *tmp_source_name_213;
    PyObject *tmp_source_name_214;
    PyObject *tmp_source_name_215;
    PyObject *tmp_source_name_216;
    PyObject *tmp_source_name_217;
    PyObject *tmp_source_name_218;
    PyObject *tmp_source_name_219;
    PyObject *tmp_source_name_220;
    PyObject *tmp_source_name_221;
    PyObject *tmp_source_name_222;
    PyObject *tmp_source_name_223;
    PyObject *tmp_source_name_224;
    PyObject *tmp_source_name_225;
    PyObject *tmp_source_name_226;
    PyObject *tmp_source_name_227;
    PyObject *tmp_source_name_228;
    PyObject *tmp_source_name_229;
    PyObject *tmp_source_name_230;
    PyObject *tmp_source_name_231;
    PyObject *tmp_source_name_232;
    PyObject *tmp_source_name_233;
    PyObject *tmp_source_name_234;
    PyObject *tmp_source_name_235;
    PyObject *tmp_source_name_236;
    PyObject *tmp_source_name_237;
    PyObject *tmp_source_name_238;
    PyObject *tmp_source_name_239;
    PyObject *tmp_source_name_240;
    PyObject *tmp_source_name_241;
    PyObject *tmp_source_name_242;
    PyObject *tmp_source_name_243;
    PyObject *tmp_source_name_244;
    PyObject *tmp_source_name_245;
    PyObject *tmp_source_name_246;
    PyObject *tmp_source_name_247;
    PyObject *tmp_source_name_248;
    PyObject *tmp_source_name_249;
    PyObject *tmp_source_name_250;
    PyObject *tmp_source_name_251;
    PyObject *tmp_source_name_252;
    PyObject *tmp_source_name_253;
    PyObject *tmp_source_name_254;
    PyObject *tmp_source_name_255;
    PyObject *tmp_source_name_256;
    PyObject *tmp_source_name_257;
    PyObject *tmp_source_name_258;
    PyObject *tmp_source_name_259;
    PyObject *tmp_source_name_260;
    PyObject *tmp_source_name_261;
    PyObject *tmp_source_name_262;
    PyObject *tmp_source_name_263;
    PyObject *tmp_source_name_264;
    PyObject *tmp_source_name_265;
    PyObject *tmp_source_name_266;
    PyObject *tmp_source_name_267;
    PyObject *tmp_source_name_268;
    PyObject *tmp_source_name_269;
    PyObject *tmp_source_name_270;
    PyObject *tmp_source_name_271;
    PyObject *tmp_source_name_272;
    PyObject *tmp_source_name_273;
    PyObject *tmp_source_name_274;
    PyObject *tmp_source_name_275;
    PyObject *tmp_source_name_276;
    PyObject *tmp_source_name_277;
    PyObject *tmp_source_name_278;
    PyObject *tmp_source_name_279;
    PyObject *tmp_source_name_280;
    PyObject *tmp_source_name_281;
    PyObject *tmp_source_name_282;
    PyObject *tmp_source_name_283;
    PyObject *tmp_source_name_284;
    PyObject *tmp_source_name_285;
    PyObject *tmp_source_name_286;
    PyObject *tmp_source_name_287;
    PyObject *tmp_source_name_288;
    PyObject *tmp_source_name_289;
    PyObject *tmp_source_name_290;
    PyObject *tmp_source_name_291;
    PyObject *tmp_source_name_292;
    PyObject *tmp_source_name_293;
    PyObject *tmp_source_name_294;
    PyObject *tmp_star_imported_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_tuple_element_23;
    PyObject *tmp_tuple_element_24;
    PyObject *tmp_tuple_element_25;
    PyObject *tmp_tuple_element_26;
    PyObject *tmp_tuple_element_27;
    PyObject *tmp_tuple_element_28;
    PyObject *tmp_tuple_element_29;
    PyObject *tmp_tuple_element_30;
    PyObject *tmp_tuple_element_31;
    PyObject *tmp_tuple_element_32;
    PyObject *tmp_tuple_element_33;
    PyObject *tmp_tuple_element_34;
    PyObject *tmp_tuple_element_35;
    PyObject *tmp_tuple_element_36;
    PyObject *tmp_tuple_element_37;
    PyObject *tmp_tuple_element_38;
    PyObject *tmp_tuple_element_39;
    PyObject *tmp_tuple_element_40;
    PyObject *tmp_tuple_element_41;
    PyObject *tmp_tuple_element_42;
    PyObject *tmp_tuple_element_43;
    PyObject *tmp_tuple_element_44;
    PyObject *tmp_tuple_element_45;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = Py_None;
    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_5fcb87f101acd4d4a8ad4bd9a9399ae6;
    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    frame_module = MAKE_MODULE_FRAME( codeobj_332484f944f5735f9ff38439c1dee7da, module_OpenGL$raw$_GLX_NV );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_OpenGL$raw$_GLX_NV)->md_dict;
    frame_module->f_lineno = 5;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_OpenGL, tmp_import_globals_1, tmp_import_globals_1, const_tuple_str_plain_platform_str_plain_constant_tuple, const_int_neg_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 5;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_platform );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 5;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform, tmp_assign_source_3 );
    tmp_import_globals_2 = ((PyModuleObject *)module_OpenGL$raw$_GLX_NV)->md_dict;
    frame_module->f_lineno = 5;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain_OpenGL, tmp_import_globals_2, tmp_import_globals_2, const_tuple_str_plain_platform_str_plain_constant_tuple, const_int_neg_1 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 5;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_constant );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 5;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant, tmp_assign_source_4 );
    tmp_import_globals_3 = ((PyModuleObject *)module_OpenGL$raw$_GLX_NV)->md_dict;
    frame_module->f_lineno = 6;
    tmp_star_imported_1 = IMPORT_MODULE( const_str_plain_ctypes, tmp_import_globals_3, tmp_import_globals_3, const_tuple_str_chr_42_tuple, const_int_neg_1 );
    if ( tmp_star_imported_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 6;
        goto frame_exception_exit_1;
    }
    tmp_result = IMPORT_MODULE_STAR( module_OpenGL$raw$_GLX_NV, true, tmp_star_imported_1 );
    Py_DECREF( tmp_star_imported_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 6;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = Py_None;
    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_void, tmp_assign_source_5 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 13;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_Constant );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 13;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 13;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_GLXEXT_VERSION_int_pos_10_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 13;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_GLXEXT_VERSION, tmp_assign_source_6 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 16;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_Constant );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 16;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLE_BUFFERS_ARB_int_pos_100000_tuple, 0 ) );

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLE_BUFFERS_ARB, tmp_assign_source_7 );
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 17;
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Constant );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 17;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 17;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLES_ARB_int_pos_100001_tuple, 0 ) );

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLES_ARB, tmp_assign_source_8 );
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 19;
        goto frame_exception_exit_1;
    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Constant );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 19;
    tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_RGBA_FLOAT_TYPE_ARB_int_pos_8377_tuple, 0 ) );

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_RGBA_FLOAT_TYPE_ARB, tmp_assign_source_9 );
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 20;
        goto frame_exception_exit_1;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_Constant );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 20;
    tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_RGBA_FLOAT_BIT_ARB_int_pos_4_tuple, 0 ) );

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_RGBA_FLOAT_BIT_ARB, tmp_assign_source_10 );
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 22;
        goto frame_exception_exit_1;
    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_Constant );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 22;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 22;
    tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLE_BUFFERS_SGIS_int_pos_100000_tuple, 0 ) );

    Py_DECREF( tmp_called_name_6 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 22;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLE_BUFFERS_SGIS, tmp_assign_source_11 );
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 23;
        goto frame_exception_exit_1;
    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_Constant );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 23;
    tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLES_SGIS_int_pos_100001_tuple, 0 ) );

    Py_DECREF( tmp_called_name_7 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLES_SGIS, tmp_assign_source_12 );
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 25;
        goto frame_exception_exit_1;
    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_Constant );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 25;
    tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_X_VISUAL_TYPE_EXT_int_pos_34_tuple, 0 ) );

    Py_DECREF( tmp_called_name_8 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_X_VISUAL_TYPE_EXT, tmp_assign_source_13 );
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 26;
        goto frame_exception_exit_1;
    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Constant );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 26;
    tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_TYPE_EXT_int_pos_35_tuple, 0 ) );

    Py_DECREF( tmp_called_name_9 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_TYPE_EXT, tmp_assign_source_14 );
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 27;
        goto frame_exception_exit_1;
    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_Constant );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 27;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 27;
    tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_INDEX_VALUE_EXT_int_pos_36_tuple, 0 ) );

    Py_DECREF( tmp_called_name_10 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 27;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_INDEX_VALUE_EXT, tmp_assign_source_15 );
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 28;
        goto frame_exception_exit_1;
    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Constant );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 28;
    tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_RED_VALUE_EXT_int_pos_37_tuple, 0 ) );

    Py_DECREF( tmp_called_name_11 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_RED_VALUE_EXT, tmp_assign_source_16 );
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 29;
        goto frame_exception_exit_1;
    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_Constant );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 29;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 29;
    tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_GREEN_VALUE_EXT_int_pos_38_tuple, 0 ) );

    Py_DECREF( tmp_called_name_12 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 29;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_GREEN_VALUE_EXT, tmp_assign_source_17 );
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 30;
        goto frame_exception_exit_1;
    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_Constant );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 30;
    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_BLUE_VALUE_EXT_int_pos_39_tuple, 0 ) );

    Py_DECREF( tmp_called_name_13 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_BLUE_VALUE_EXT, tmp_assign_source_18 );
    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 31;
        goto frame_exception_exit_1;
    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_Constant );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 31;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 31;
    tmp_assign_source_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_ALPHA_VALUE_EXT_int_pos_40_tuple, 0 ) );

    Py_DECREF( tmp_called_name_14 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 31;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_ALPHA_VALUE_EXT, tmp_assign_source_19 );
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 32;
        goto frame_exception_exit_1;
    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_Constant );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 32;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 32;
    tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_NONE_EXT_int_pos_32768_tuple, 0 ) );

    Py_DECREF( tmp_called_name_15 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 32;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_NONE_EXT, tmp_assign_source_20 );
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_Constant );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 33;
    tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_16, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRUE_COLOR_EXT_int_pos_32770_tuple, 0 ) );

    Py_DECREF( tmp_called_name_16 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRUE_COLOR_EXT, tmp_assign_source_21 );
    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 34;
        goto frame_exception_exit_1;
    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_Constant );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 34;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 34;
    tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_17, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_DIRECT_COLOR_EXT_int_pos_32771_tuple, 0 ) );

    Py_DECREF( tmp_called_name_17 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 34;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_DIRECT_COLOR_EXT, tmp_assign_source_22 );
    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 35;
        goto frame_exception_exit_1;
    }

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_Constant );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 35;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 35;
    tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_18, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PSEUDO_COLOR_EXT_int_pos_32772_tuple, 0 ) );

    Py_DECREF( tmp_called_name_18 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 35;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PSEUDO_COLOR_EXT, tmp_assign_source_23 );
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 36;
        goto frame_exception_exit_1;
    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_Constant );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 36;
    tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_19, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_STATIC_COLOR_EXT_int_pos_32773_tuple, 0 ) );

    Py_DECREF( tmp_called_name_19 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_STATIC_COLOR_EXT, tmp_assign_source_24 );
    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 37;
        goto frame_exception_exit_1;
    }

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_Constant );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 37;
    tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_20, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_GRAY_SCALE_EXT_int_pos_32774_tuple, 0 ) );

    Py_DECREF( tmp_called_name_20 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_GRAY_SCALE_EXT, tmp_assign_source_25 );
    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 38;
        goto frame_exception_exit_1;
    }

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_Constant );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 38;
    tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_21, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_STATIC_GRAY_EXT_int_pos_32775_tuple, 0 ) );

    Py_DECREF( tmp_called_name_21 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_STATIC_GRAY_EXT, tmp_assign_source_26 );
    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_Constant );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 39;
    tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_RGB_EXT_int_pos_32776_tuple, 0 ) );

    Py_DECREF( tmp_called_name_22 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_RGB_EXT, tmp_assign_source_27 );
    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 40;
        goto frame_exception_exit_1;
    }

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_Constant );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 40;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 40;
    tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_23, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TRANSPARENT_INDEX_EXT_int_pos_32777_tuple, 0 ) );

    Py_DECREF( tmp_called_name_23 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 40;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TRANSPARENT_INDEX_EXT, tmp_assign_source_28 );
    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 46;
        goto frame_exception_exit_1;
    }

    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_Constant );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 46;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 46;
    tmp_assign_source_29 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VISUAL_CAVEAT_EXT_int_pos_32_tuple, 0 ) );

    Py_DECREF( tmp_called_name_24 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 46;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VISUAL_CAVEAT_EXT, tmp_assign_source_29 );
    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }

    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_Constant );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 47;
    tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_25, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SLOW_VISUAL_EXT_int_pos_32769_tuple, 0 ) );

    Py_DECREF( tmp_called_name_25 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SLOW_VISUAL_EXT, tmp_assign_source_30 );
    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 48;
        goto frame_exception_exit_1;
    }

    tmp_called_name_26 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_Constant );
    if ( tmp_called_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 48;
    tmp_assign_source_31 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_26, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_NON_CONFORMANT_VISUAL_EXT_int_pos_32781_tuple, 0 ) );

    Py_DECREF( tmp_called_name_26 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_NON_CONFORMANT_VISUAL_EXT, tmp_assign_source_31 );
    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 50;
        goto frame_exception_exit_1;
    }

    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_Constant );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 50;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 50;
    tmp_assign_source_32 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_27, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SHARE_CONTEXT_EXT_int_pos_32778_tuple, 0 ) );

    Py_DECREF( tmp_called_name_27 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 50;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SHARE_CONTEXT_EXT, tmp_assign_source_32 );
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 51;
        goto frame_exception_exit_1;
    }

    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_Constant );
    if ( tmp_called_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 51;
    tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_28, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VISUAL_ID_EXT_int_pos_32779_tuple, 0 ) );

    Py_DECREF( tmp_called_name_28 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VISUAL_ID_EXT, tmp_assign_source_33 );
    tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_29 == NULL ))
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 52;
        goto frame_exception_exit_1;
    }

    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_Constant );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 52;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 52;
    tmp_assign_source_34 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_29, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SCREEN_EXT_int_pos_32780_tuple, 0 ) );

    Py_DECREF( tmp_called_name_29 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 52;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SCREEN_EXT, tmp_assign_source_34 );
    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 54;
        goto frame_exception_exit_1;
    }

    tmp_called_name_30 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_Constant );
    if ( tmp_called_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 54;
    tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_30, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_WINDOW_BIT_SGIX_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_30 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_WINDOW_BIT_SGIX, tmp_assign_source_35 );
    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 55;
        goto frame_exception_exit_1;
    }

    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_Constant );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 55;
    tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_31, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PIXMAP_BIT_SGIX_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_31 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PIXMAP_BIT_SGIX, tmp_assign_source_36 );
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 56;
        goto frame_exception_exit_1;
    }

    tmp_called_name_32 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_Constant );
    if ( tmp_called_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 56;
    tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_32, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_RGBA_BIT_SGIX_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_32 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_RGBA_BIT_SGIX, tmp_assign_source_37 );
    tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_33 == NULL ))
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 57;
        goto frame_exception_exit_1;
    }

    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_Constant );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 57;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 57;
    tmp_assign_source_38 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_33, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_COLOR_INDEX_BIT_SGIX_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_33 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 57;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_COLOR_INDEX_BIT_SGIX, tmp_assign_source_38 );
    tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_34 == NULL ))
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 58;
        goto frame_exception_exit_1;
    }

    tmp_called_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_Constant );
    if ( tmp_called_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 58;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 58;
    tmp_assign_source_39 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_34, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_DRAWABLE_TYPE_SGIX_int_pos_32784_tuple, 0 ) );

    Py_DECREF( tmp_called_name_34 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 58;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_DRAWABLE_TYPE_SGIX, tmp_assign_source_39 );
    tmp_source_name_35 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_35 == NULL ))
    {
        tmp_source_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 59;
        goto frame_exception_exit_1;
    }

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_Constant );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 59;
    tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_35, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_RENDER_TYPE_SGIX_int_pos_32785_tuple, 0 ) );

    Py_DECREF( tmp_called_name_35 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_RENDER_TYPE_SGIX, tmp_assign_source_40 );
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 60;
        goto frame_exception_exit_1;
    }

    tmp_called_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_Constant );
    if ( tmp_called_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 60;
    tmp_assign_source_41 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_36, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_X_RENDERABLE_SGIX_int_pos_32786_tuple, 0 ) );

    Py_DECREF( tmp_called_name_36 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_X_RENDERABLE_SGIX, tmp_assign_source_41 );
    tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_37 == NULL ))
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 61;
        goto frame_exception_exit_1;
    }

    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_Constant );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 61;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 61;
    tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_37, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FBCONFIG_ID_SGIX_int_pos_32787_tuple, 0 ) );

    Py_DECREF( tmp_called_name_37 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 61;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FBCONFIG_ID_SGIX, tmp_assign_source_42 );
    tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_38 == NULL ))
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 62;
        goto frame_exception_exit_1;
    }

    tmp_called_name_38 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_Constant );
    if ( tmp_called_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 62;
    tmp_assign_source_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_38, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_RGBA_TYPE_SGIX_int_pos_32788_tuple, 0 ) );

    Py_DECREF( tmp_called_name_38 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_RGBA_TYPE_SGIX, tmp_assign_source_43 );
    tmp_source_name_39 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_39 == NULL ))
    {
        tmp_source_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 63;
        goto frame_exception_exit_1;
    }

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_Constant );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 63;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 63;
    tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_39, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_COLOR_INDEX_TYPE_SGIX_int_pos_32789_tuple, 0 ) );

    Py_DECREF( tmp_called_name_39 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 63;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_COLOR_INDEX_TYPE_SGIX, tmp_assign_source_44 );
    tmp_source_name_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_40 == NULL ))
    {
        tmp_source_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 65;
        goto frame_exception_exit_1;
    }

    tmp_called_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_Constant );
    if ( tmp_called_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 65;
    tmp_assign_source_45 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_40, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PBUFFER_BIT_SGIX_int_pos_4_tuple, 0 ) );

    Py_DECREF( tmp_called_name_40 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PBUFFER_BIT_SGIX, tmp_assign_source_45 );
    tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_41 == NULL ))
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 66;
        goto frame_exception_exit_1;
    }

    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_Constant );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 66;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 66;
    tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_41, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BUFFER_CLOBBER_MASK_SGIX_int_pos_134217728_tuple, 0 ) );

    Py_DECREF( tmp_called_name_41 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 66;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BUFFER_CLOBBER_MASK_SGIX, tmp_assign_source_46 );
    tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_42 == NULL ))
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }

    tmp_called_name_42 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_Constant );
    if ( tmp_called_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 67;
    tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_42, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FRONT_LEFT_BUFFER_BIT_SGIX_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_42 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FRONT_LEFT_BUFFER_BIT_SGIX, tmp_assign_source_47 );
    tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_43 == NULL ))
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }

    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_Constant );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 68;
    tmp_assign_source_48 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_43, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FRONT_RIGHT_BUFFER_BIT_SGIX_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_43 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FRONT_RIGHT_BUFFER_BIT_SGIX, tmp_assign_source_48 );
    tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_44 == NULL ))
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }

    tmp_called_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_Constant );
    if ( tmp_called_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 69;
    tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_44, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BACK_LEFT_BUFFER_BIT_SGIX_int_pos_4_tuple, 0 ) );

    Py_DECREF( tmp_called_name_44 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BACK_LEFT_BUFFER_BIT_SGIX, tmp_assign_source_49 );
    tmp_source_name_45 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_45 == NULL ))
    {
        tmp_source_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }

    tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_Constant );
    if ( tmp_called_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 70;
    tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_45, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BACK_RIGHT_BUFFER_BIT_SGIX_int_pos_8_tuple, 0 ) );

    Py_DECREF( tmp_called_name_45 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BACK_RIGHT_BUFFER_BIT_SGIX, tmp_assign_source_50 );
    tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_46 == NULL ))
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 71;
        goto frame_exception_exit_1;
    }

    tmp_called_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_Constant );
    if ( tmp_called_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 71;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 71;
    tmp_assign_source_51 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_46, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX_BUFFERS_BIT_SGIX_int_pos_16_tuple, 0 ) );

    Py_DECREF( tmp_called_name_46 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 71;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX_BUFFERS_BIT_SGIX, tmp_assign_source_51 );
    tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_47 == NULL ))
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 72;
        goto frame_exception_exit_1;
    }

    tmp_called_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_Constant );
    if ( tmp_called_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 72;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 72;
    tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_47, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_DEPTH_BUFFER_BIT_SGIX_int_pos_32_tuple, 0 ) );

    Py_DECREF( tmp_called_name_47 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 72;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_DEPTH_BUFFER_BIT_SGIX, tmp_assign_source_52 );
    tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_48 == NULL ))
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 73;
        goto frame_exception_exit_1;
    }

    tmp_called_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_Constant );
    if ( tmp_called_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 73;
    tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_48, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_STENCIL_BUFFER_BIT_SGIX_int_pos_64_tuple, 0 ) );

    Py_DECREF( tmp_called_name_48 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_STENCIL_BUFFER_BIT_SGIX, tmp_assign_source_53 );
    tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_49 == NULL ))
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 74;
        goto frame_exception_exit_1;
    }

    tmp_called_name_49 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_Constant );
    if ( tmp_called_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 74;
    tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_49, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_ACCUM_BUFFER_BIT_SGIX_int_pos_128_tuple, 0 ) );

    Py_DECREF( tmp_called_name_49 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_ACCUM_BUFFER_BIT_SGIX, tmp_assign_source_54 );
    tmp_source_name_50 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_50 == NULL ))
    {
        tmp_source_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 75;
        goto frame_exception_exit_1;
    }

    tmp_called_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_Constant );
    if ( tmp_called_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 75;
    tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_50, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLE_BUFFERS_BIT_SGIX_int_pos_256_tuple, 0 ) );

    Py_DECREF( tmp_called_name_50 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLE_BUFFERS_BIT_SGIX, tmp_assign_source_55 );
    tmp_source_name_51 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_51 == NULL ))
    {
        tmp_source_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 76;
        goto frame_exception_exit_1;
    }

    tmp_called_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_Constant );
    if ( tmp_called_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 76;
    tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_51, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MAX_PBUFFER_WIDTH_SGIX_int_pos_32790_tuple, 0 ) );

    Py_DECREF( tmp_called_name_51 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MAX_PBUFFER_WIDTH_SGIX, tmp_assign_source_56 );
    tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_52 == NULL ))
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 77;
        goto frame_exception_exit_1;
    }

    tmp_called_name_52 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_Constant );
    if ( tmp_called_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 77;
    tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_52, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MAX_PBUFFER_HEIGHT_SGIX_int_pos_32791_tuple, 0 ) );

    Py_DECREF( tmp_called_name_52 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MAX_PBUFFER_HEIGHT_SGIX, tmp_assign_source_57 );
    tmp_source_name_53 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_53 == NULL ))
    {
        tmp_source_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }

    tmp_called_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_Constant );
    if ( tmp_called_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 78;
    tmp_assign_source_58 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_53, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MAX_PBUFFER_PIXELS_SGIX_int_pos_32792_tuple, 0 ) );

    Py_DECREF( tmp_called_name_53 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MAX_PBUFFER_PIXELS_SGIX, tmp_assign_source_58 );
    tmp_source_name_54 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_54 == NULL ))
    {
        tmp_source_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_54 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 79;
        goto frame_exception_exit_1;
    }

    tmp_called_name_54 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_Constant );
    if ( tmp_called_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 79;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 79;
    tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_54, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_OPTIMAL_PBUFFER_WIDTH_SGIX_int_pos_32793_tuple, 0 ) );

    Py_DECREF( tmp_called_name_54 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 79;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_OPTIMAL_PBUFFER_WIDTH_SGIX, tmp_assign_source_59 );
    tmp_source_name_55 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_55 == NULL ))
    {
        tmp_source_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_55 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 80;
        goto frame_exception_exit_1;
    }

    tmp_called_name_55 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_Constant );
    if ( tmp_called_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 80;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 80;
    tmp_assign_source_60 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_55, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX_int_pos_32794_tuple, 0 ) );

    Py_DECREF( tmp_called_name_55 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 80;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX, tmp_assign_source_60 );
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_56 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 81;
        goto frame_exception_exit_1;
    }

    tmp_called_name_56 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_Constant );
    if ( tmp_called_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 81;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 81;
    tmp_assign_source_61 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_56, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PRESERVED_CONTENTS_SGIX_int_pos_32795_tuple, 0 ) );

    Py_DECREF( tmp_called_name_56 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 81;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PRESERVED_CONTENTS_SGIX, tmp_assign_source_61 );
    tmp_source_name_57 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_57 == NULL ))
    {
        tmp_source_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_57 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 82;
        goto frame_exception_exit_1;
    }

    tmp_called_name_57 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_Constant );
    if ( tmp_called_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 82;
    tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_57, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_LARGEST_PBUFFER_SGIX_int_pos_32796_tuple, 0 ) );

    Py_DECREF( tmp_called_name_57 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_LARGEST_PBUFFER_SGIX, tmp_assign_source_62 );
    tmp_source_name_58 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_58 == NULL ))
    {
        tmp_source_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 83;
        goto frame_exception_exit_1;
    }

    tmp_called_name_58 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_Constant );
    if ( tmp_called_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 83;
    tmp_assign_source_63 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_58, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_WIDTH_SGIX_int_pos_32797_tuple, 0 ) );

    Py_DECREF( tmp_called_name_58 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_WIDTH_SGIX, tmp_assign_source_63 );
    tmp_source_name_59 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_59 == NULL ))
    {
        tmp_source_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }

    tmp_called_name_59 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_Constant );
    if ( tmp_called_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 84;
    tmp_assign_source_64 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_59, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HEIGHT_SGIX_int_pos_32798_tuple, 0 ) );

    Py_DECREF( tmp_called_name_59 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HEIGHT_SGIX, tmp_assign_source_64 );
    tmp_source_name_60 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_60 == NULL ))
    {
        tmp_source_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 85;
        goto frame_exception_exit_1;
    }

    tmp_called_name_60 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_Constant );
    if ( tmp_called_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 85;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 85;
    tmp_assign_source_65 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_60, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_EVENT_MASK_SGIX_int_pos_32799_tuple, 0 ) );

    Py_DECREF( tmp_called_name_60 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 85;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_EVENT_MASK_SGIX, tmp_assign_source_65 );
    tmp_source_name_61 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_61 == NULL ))
    {
        tmp_source_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_61 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 86;
        goto frame_exception_exit_1;
    }

    tmp_called_name_61 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_Constant );
    if ( tmp_called_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 86;
    tmp_assign_source_66 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_61, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_DAMAGED_SGIX_int_pos_32800_tuple, 0 ) );

    Py_DECREF( tmp_called_name_61 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_DAMAGED_SGIX, tmp_assign_source_66 );
    tmp_source_name_62 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_62 == NULL ))
    {
        tmp_source_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 87;
        goto frame_exception_exit_1;
    }

    tmp_called_name_62 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_Constant );
    if ( tmp_called_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 87;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 87;
    tmp_assign_source_67 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_62, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAVED_SGIX_int_pos_32801_tuple, 0 ) );

    Py_DECREF( tmp_called_name_62 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 87;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAVED_SGIX, tmp_assign_source_67 );
    tmp_source_name_63 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_63 == NULL ))
    {
        tmp_source_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 88;
        goto frame_exception_exit_1;
    }

    tmp_called_name_63 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_Constant );
    if ( tmp_called_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 88;
    tmp_assign_source_68 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_63, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_WINDOW_SGIX_int_pos_32802_tuple, 0 ) );

    Py_DECREF( tmp_called_name_63 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_WINDOW_SGIX, tmp_assign_source_68 );
    tmp_source_name_64 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_64 == NULL ))
    {
        tmp_source_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_64 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 89;
        goto frame_exception_exit_1;
    }

    tmp_called_name_64 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_Constant );
    if ( tmp_called_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 89;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 89;
    tmp_assign_source_69 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_64, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PBUFFER_SGIX_int_pos_32803_tuple, 0 ) );

    Py_DECREF( tmp_called_name_64 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 89;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PBUFFER_SGIX, tmp_assign_source_69 );
    tmp_source_name_65 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_65 == NULL ))
    {
        tmp_source_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 92;
        goto frame_exception_exit_1;
    }

    tmp_called_name_65 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_Constant );
    if ( tmp_called_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 92;
    tmp_assign_source_70 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_65, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SYNC_FRAME_SGIX_int_0_tuple, 0 ) );

    Py_DECREF( tmp_called_name_65 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SYNC_FRAME_SGIX, tmp_assign_source_70 );
    tmp_source_name_66 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_66 == NULL ))
    {
        tmp_source_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_66 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 93;
        goto frame_exception_exit_1;
    }

    tmp_called_name_66 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_Constant );
    if ( tmp_called_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 93;
    tmp_assign_source_71 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_66, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SYNC_SWAP_SGIX_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_66 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SYNC_SWAP_SGIX, tmp_assign_source_71 );
    tmp_source_name_67 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_67 == NULL ))
    {
        tmp_source_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_67 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 95;
        goto frame_exception_exit_1;
    }

    tmp_called_name_67 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_Constant );
    if ( tmp_called_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 95;
    tmp_assign_source_72 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_67, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_DIGITAL_MEDIA_PBUFFER_SGIX_int_pos_32804_tuple, 0 ) );

    Py_DECREF( tmp_called_name_67 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_DIGITAL_MEDIA_PBUFFER_SGIX, tmp_assign_source_72 );
    tmp_source_name_68 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_68 == NULL ))
    {
        tmp_source_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }

    tmp_called_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_Constant );
    if ( tmp_called_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 99;
    tmp_assign_source_73 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_68, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BLENDED_RGBA_SGIS_int_pos_32805_tuple, 0 ) );

    Py_DECREF( tmp_called_name_68 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BLENDED_RGBA_SGIS, tmp_assign_source_73 );
    tmp_source_name_69 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_69 == NULL ))
    {
        tmp_source_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 101;
        goto frame_exception_exit_1;
    }

    tmp_called_name_69 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_Constant );
    if ( tmp_called_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 101;
    tmp_assign_source_74 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_69, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS_int_pos_32806_tuple, 0 ) );

    Py_DECREF( tmp_called_name_69 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS, tmp_assign_source_74 );
    tmp_source_name_70 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_70 == NULL ))
    {
        tmp_source_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_70 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 102;
        goto frame_exception_exit_1;
    }

    tmp_called_name_70 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_Constant );
    if ( tmp_called_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 102;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 102;
    tmp_assign_source_75 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_70, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS_int_pos_32807_tuple, 0 ) );

    Py_DECREF( tmp_called_name_70 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 102;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS, tmp_assign_source_75 );
    tmp_source_name_71 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_71 == NULL ))
    {
        tmp_source_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_71 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 105;
        goto frame_exception_exit_1;
    }

    tmp_called_name_71 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_Constant );
    if ( tmp_called_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 105;
    tmp_assign_source_76 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_71, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLE_BUFFERS_3DFX_int_pos_32848_tuple, 0 ) );

    Py_DECREF( tmp_called_name_71 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLE_BUFFERS_3DFX, tmp_assign_source_76 );
    tmp_source_name_72 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_72 == NULL ))
    {
        tmp_source_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_72 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }

    tmp_called_name_72 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain_Constant );
    if ( tmp_called_name_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 106;
    tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_72, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SAMPLES_3DFX_int_pos_32849_tuple, 0 ) );

    Py_DECREF( tmp_called_name_72 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SAMPLES_3DFX, tmp_assign_source_77 );
    tmp_source_name_73 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_73 == NULL ))
    {
        tmp_source_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_73 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 111;
        goto frame_exception_exit_1;
    }

    tmp_called_name_73 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain_Constant );
    if ( tmp_called_name_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 111;
    tmp_assign_source_78 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_73, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_3DFX_WINDOW_MODE_MESA_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_73 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_3DFX_WINDOW_MODE_MESA, tmp_assign_source_78 );
    tmp_source_name_74 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_74 == NULL ))
    {
        tmp_source_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_74 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 112;
        goto frame_exception_exit_1;
    }

    tmp_called_name_74 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_Constant );
    if ( tmp_called_name_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 112;
    tmp_assign_source_79 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_74, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_3DFX_FULLSCREEN_MODE_MESA_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_74 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_3DFX_FULLSCREEN_MODE_MESA, tmp_assign_source_79 );
    tmp_source_name_75 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_75 == NULL ))
    {
        tmp_source_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_75 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }

    tmp_called_name_75 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain_Constant );
    if ( tmp_called_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 114;
    tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_75, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VISUAL_SELECT_GROUP_SGIX_int_pos_32808_tuple, 0 ) );

    Py_DECREF( tmp_called_name_75 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VISUAL_SELECT_GROUP_SGIX, tmp_assign_source_80 );
    tmp_source_name_76 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_76 == NULL ))
    {
        tmp_source_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_76 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }

    tmp_called_name_76 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain_Constant );
    if ( tmp_called_name_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 116;
    tmp_assign_source_81 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_76, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SWAP_METHOD_OML_int_pos_32864_tuple, 0 ) );

    Py_DECREF( tmp_called_name_76 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SWAP_METHOD_OML, tmp_assign_source_81 );
    tmp_source_name_77 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_77 == NULL ))
    {
        tmp_source_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_77 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }

    tmp_called_name_77 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain_Constant );
    if ( tmp_called_name_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 117;
    tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_77, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SWAP_EXCHANGE_OML_int_pos_32865_tuple, 0 ) );

    Py_DECREF( tmp_called_name_77 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SWAP_EXCHANGE_OML, tmp_assign_source_82 );
    tmp_source_name_78 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_78 == NULL ))
    {
        tmp_source_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }

    tmp_called_name_78 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_Constant );
    if ( tmp_called_name_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 118;
    tmp_assign_source_83 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_78, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SWAP_COPY_OML_int_pos_32866_tuple, 0 ) );

    Py_DECREF( tmp_called_name_78 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SWAP_COPY_OML, tmp_assign_source_83 );
    tmp_source_name_79 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_79 == NULL ))
    {
        tmp_source_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_79 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }

    tmp_called_name_79 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain_Constant );
    if ( tmp_called_name_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 119;
    tmp_assign_source_84 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_79, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SWAP_UNDEFINED_OML_int_pos_32867_tuple, 0 ) );

    Py_DECREF( tmp_called_name_79 );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SWAP_UNDEFINED_OML, tmp_assign_source_84 );
    tmp_source_name_80 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_80 == NULL ))
    {
        tmp_source_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 122;
        goto frame_exception_exit_1;
    }

    tmp_called_name_80 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_Constant );
    if ( tmp_called_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 122;
    tmp_assign_source_85 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_80, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FLOAT_COMPONENTS_NV_int_pos_8368_tuple, 0 ) );

    Py_DECREF( tmp_called_name_80 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FLOAT_COMPONENTS_NV, tmp_assign_source_85 );
    tmp_source_name_81 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_81 == NULL ))
    {
        tmp_source_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_81 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }

    tmp_called_name_81 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain_Constant );
    if ( tmp_called_name_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 124;
    tmp_assign_source_86 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_81, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX_int_pos_80_tuple, 0 ) );

    Py_DECREF( tmp_called_name_81 );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX, tmp_assign_source_86 );
    tmp_source_name_82 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_82 == NULL ))
    {
        tmp_source_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }

    tmp_called_name_82 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_Constant );
    if ( tmp_called_name_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 125;
    tmp_assign_source_87 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_82, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BAD_HYPERPIPE_CONFIG_SGIX_int_pos_91_tuple, 0 ) );

    Py_DECREF( tmp_called_name_82 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BAD_HYPERPIPE_CONFIG_SGIX, tmp_assign_source_87 );
    tmp_source_name_83 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_83 == NULL ))
    {
        tmp_source_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_83 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }

    tmp_called_name_83 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain_Constant );
    if ( tmp_called_name_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 126;
    tmp_assign_source_88 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_83, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BAD_HYPERPIPE_SGIX_int_pos_92_tuple, 0 ) );

    Py_DECREF( tmp_called_name_83 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BAD_HYPERPIPE_SGIX, tmp_assign_source_88 );
    tmp_source_name_84 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_84 == NULL ))
    {
        tmp_source_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_84 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }

    tmp_called_name_84 = LOOKUP_ATTRIBUTE( tmp_source_name_84, const_str_plain_Constant );
    if ( tmp_called_name_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 127;
    tmp_assign_source_89 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_84, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HYPERPIPE_DISPLAY_PIPE_SGIX_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_84 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HYPERPIPE_DISPLAY_PIPE_SGIX, tmp_assign_source_89 );
    tmp_source_name_85 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_85 == NULL ))
    {
        tmp_source_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_85 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }

    tmp_called_name_85 = LOOKUP_ATTRIBUTE( tmp_source_name_85, const_str_plain_Constant );
    if ( tmp_called_name_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 128;
    tmp_assign_source_90 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_85, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HYPERPIPE_RENDER_PIPE_SGIX_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_85 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HYPERPIPE_RENDER_PIPE_SGIX, tmp_assign_source_90 );
    tmp_source_name_86 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_86 == NULL ))
    {
        tmp_source_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }

    tmp_called_name_86 = LOOKUP_ATTRIBUTE( tmp_source_name_86, const_str_plain_Constant );
    if ( tmp_called_name_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 129;
    tmp_assign_source_91 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_86, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PIPE_RECT_SGIX_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_86 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PIPE_RECT_SGIX, tmp_assign_source_91 );
    tmp_source_name_87 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_87 == NULL ))
    {
        tmp_source_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_87 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }

    tmp_called_name_87 = LOOKUP_ATTRIBUTE( tmp_source_name_87, const_str_plain_Constant );
    if ( tmp_called_name_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 130;
    tmp_assign_source_92 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_87, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_PIPE_RECT_LIMITS_SGIX_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_87 );
    if ( tmp_assign_source_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_PIPE_RECT_LIMITS_SGIX, tmp_assign_source_92 );
    tmp_source_name_88 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_88 == NULL ))
    {
        tmp_source_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }

    tmp_called_name_88 = LOOKUP_ATTRIBUTE( tmp_source_name_88, const_str_plain_Constant );
    if ( tmp_called_name_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 131;
    tmp_assign_source_93 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_88, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HYPERPIPE_STEREO_SGIX_int_pos_3_tuple, 0 ) );

    Py_DECREF( tmp_called_name_88 );
    if ( tmp_assign_source_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HYPERPIPE_STEREO_SGIX, tmp_assign_source_93 );
    tmp_source_name_89 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_89 == NULL ))
    {
        tmp_source_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_89 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }

    tmp_called_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_89, const_str_plain_Constant );
    if ( tmp_called_name_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 132;
    tmp_assign_source_94 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_89, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX_int_pos_4_tuple, 0 ) );

    Py_DECREF( tmp_called_name_89 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX, tmp_assign_source_94 );
    tmp_source_name_90 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_90 == NULL ))
    {
        tmp_source_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }

    tmp_called_name_90 = LOOKUP_ATTRIBUTE( tmp_source_name_90, const_str_plain_Constant );
    if ( tmp_called_name_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 133;
    tmp_assign_source_95 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_90, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_HYPERPIPE_ID_SGIX_int_pos_32816_tuple, 0 ) );

    Py_DECREF( tmp_called_name_90 );
    if ( tmp_assign_source_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_HYPERPIPE_ID_SGIX, tmp_assign_source_95 );
    tmp_source_name_91 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_91 == NULL ))
    {
        tmp_source_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_91 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }

    tmp_called_name_91 = LOOKUP_ATTRIBUTE( tmp_source_name_91, const_str_plain_Constant );
    if ( tmp_called_name_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 141;
    tmp_assign_source_96 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_91, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_NV_int_pos_8387_tuple, 0 ) );

    Py_DECREF( tmp_called_name_91 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_COLOR_NV, tmp_assign_source_96 );
    tmp_source_name_92 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_92 == NULL ))
    {
        tmp_source_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }

    tmp_called_name_92 = LOOKUP_ATTRIBUTE( tmp_source_name_92, const_str_plain_Constant );
    if ( tmp_called_name_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 142;
    tmp_assign_source_97 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_92, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_ALPHA_NV_int_pos_8388_tuple, 0 ) );

    Py_DECREF( tmp_called_name_92 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_ALPHA_NV, tmp_assign_source_97 );
    tmp_source_name_93 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_93 == NULL ))
    {
        tmp_source_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_93 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }

    tmp_called_name_93 = LOOKUP_ATTRIBUTE( tmp_source_name_93, const_str_plain_Constant );
    if ( tmp_called_name_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 143;
    tmp_assign_source_98 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_93, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_DEPTH_NV_int_pos_8389_tuple, 0 ) );

    Py_DECREF( tmp_called_name_93 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_DEPTH_NV, tmp_assign_source_98 );
    tmp_source_name_94 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_94 == NULL ))
    {
        tmp_source_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_94 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }

    tmp_called_name_94 = LOOKUP_ATTRIBUTE( tmp_source_name_94, const_str_plain_Constant );
    if ( tmp_called_name_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 144;
    tmp_assign_source_99 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_94, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV_int_pos_8390_tuple, 0 ) );

    Py_DECREF( tmp_called_name_94 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV, tmp_assign_source_99 );
    tmp_source_name_95 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_95 == NULL ))
    {
        tmp_source_name_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_95 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }

    tmp_called_name_95 = LOOKUP_ATTRIBUTE( tmp_source_name_95, const_str_plain_Constant );
    if ( tmp_called_name_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 145;
    tmp_assign_source_100 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_95, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV_int_pos_8391_tuple, 0 ) );

    Py_DECREF( tmp_called_name_95 );
    if ( tmp_assign_source_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV, tmp_assign_source_100 );
    tmp_source_name_96 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_96 == NULL ))
    {
        tmp_source_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_96 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }

    tmp_called_name_96 = LOOKUP_ATTRIBUTE( tmp_source_name_96, const_str_plain_Constant );
    if ( tmp_called_name_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 146;
    tmp_assign_source_101 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_96, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FRAME_NV_int_pos_8392_tuple, 0 ) );

    Py_DECREF( tmp_called_name_96 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_FRAME_NV, tmp_assign_source_101 );
    tmp_source_name_97 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_97 == NULL ))
    {
        tmp_source_name_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_97 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }

    tmp_called_name_97 = LOOKUP_ATTRIBUTE( tmp_source_name_97, const_str_plain_Constant );
    if ( tmp_called_name_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 147;
    tmp_assign_source_102 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_97, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_1_NV_int_pos_8393_tuple, 0 ) );

    Py_DECREF( tmp_called_name_97 );
    if ( tmp_assign_source_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_FIELD_1_NV, tmp_assign_source_102 );
    tmp_source_name_98 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_98 == NULL ))
    {
        tmp_source_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_98 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 148;
        goto frame_exception_exit_1;
    }

    tmp_called_name_98 = LOOKUP_ATTRIBUTE( tmp_source_name_98, const_str_plain_Constant );
    if ( tmp_called_name_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 148;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 148;
    tmp_assign_source_103 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_98, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_VIDEO_OUT_FIELD_2_NV_int_pos_8394_tuple, 0 ) );

    Py_DECREF( tmp_called_name_98 );
    if ( tmp_assign_source_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 148;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_VIDEO_OUT_FIELD_2_NV, tmp_assign_source_103 );
    tmp_source_name_99 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_99 == NULL ))
    {
        tmp_source_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_99 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 150;
        goto frame_exception_exit_1;
    }

    tmp_called_name_99 = LOOKUP_ATTRIBUTE( tmp_source_name_99, const_str_plain_Constant );
    if ( tmp_called_name_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 150;
    tmp_assign_source_104 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_99, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT_int_pos_8400_tuple, 0 ) );

    Py_DECREF( tmp_called_name_99 );
    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BIND_TO_TEXTURE_RGB_EXT, tmp_assign_source_104 );
    tmp_source_name_100 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_100 == NULL ))
    {
        tmp_source_name_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_100 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 151;
        goto frame_exception_exit_1;
    }

    tmp_called_name_100 = LOOKUP_ATTRIBUTE( tmp_source_name_100, const_str_plain_Constant );
    if ( tmp_called_name_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 151;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 151;
    tmp_assign_source_105 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_100, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT_int_pos_8401_tuple, 0 ) );

    Py_DECREF( tmp_called_name_100 );
    if ( tmp_assign_source_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 151;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BIND_TO_TEXTURE_RGBA_EXT, tmp_assign_source_105 );
    tmp_source_name_101 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_101 == NULL ))
    {
        tmp_source_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_101 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 152;
        goto frame_exception_exit_1;
    }

    tmp_called_name_101 = LOOKUP_ATTRIBUTE( tmp_source_name_101, const_str_plain_Constant );
    if ( tmp_called_name_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 152;
    tmp_assign_source_106 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_101, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT_int_pos_8402_tuple, 0 ) );

    Py_DECREF( tmp_called_name_101 );
    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BIND_TO_MIPMAP_TEXTURE_EXT, tmp_assign_source_106 );
    tmp_source_name_102 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_102 == NULL ))
    {
        tmp_source_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_102 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 153;
        goto frame_exception_exit_1;
    }

    tmp_called_name_102 = LOOKUP_ATTRIBUTE( tmp_source_name_102, const_str_plain_Constant );
    if ( tmp_called_name_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 153;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 153;
    tmp_assign_source_107 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_102, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT_int_pos_8403_tuple, 0 ) );

    Py_DECREF( tmp_called_name_102 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 153;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BIND_TO_TEXTURE_TARGETS_EXT, tmp_assign_source_107 );
    tmp_source_name_103 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_103 == NULL ))
    {
        tmp_source_name_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_103 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 154;
        goto frame_exception_exit_1;
    }

    tmp_called_name_103 = LOOKUP_ATTRIBUTE( tmp_source_name_103, const_str_plain_Constant );
    if ( tmp_called_name_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 154;
    tmp_assign_source_108 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_103, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_Y_INVERTED_EXT_int_pos_8404_tuple, 0 ) );

    Py_DECREF( tmp_called_name_103 );
    if ( tmp_assign_source_108 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_Y_INVERTED_EXT, tmp_assign_source_108 );
    tmp_source_name_104 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_104 == NULL ))
    {
        tmp_source_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_104 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 155;
        goto frame_exception_exit_1;
    }

    tmp_called_name_104 = LOOKUP_ATTRIBUTE( tmp_source_name_104, const_str_plain_Constant );
    if ( tmp_called_name_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 155;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 155;
    tmp_assign_source_109 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_104, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_EXT_int_pos_8405_tuple, 0 ) );

    Py_DECREF( tmp_called_name_104 );
    if ( tmp_assign_source_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 155;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_FORMAT_EXT, tmp_assign_source_109 );
    tmp_source_name_105 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_105 == NULL ))
    {
        tmp_source_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_105 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 156;
        goto frame_exception_exit_1;
    }

    tmp_called_name_105 = LOOKUP_ATTRIBUTE( tmp_source_name_105, const_str_plain_Constant );
    if ( tmp_called_name_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 156;
    tmp_assign_source_110 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_105, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_TARGET_EXT_int_pos_8406_tuple, 0 ) );

    Py_DECREF( tmp_called_name_105 );
    if ( tmp_assign_source_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_TARGET_EXT, tmp_assign_source_110 );
    tmp_source_name_106 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_106 == NULL ))
    {
        tmp_source_name_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_106 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 157;
        goto frame_exception_exit_1;
    }

    tmp_called_name_106 = LOOKUP_ATTRIBUTE( tmp_source_name_106, const_str_plain_Constant );
    if ( tmp_called_name_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 157;
    tmp_assign_source_111 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_106, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MIPMAP_TEXTURE_EXT_int_pos_8407_tuple, 0 ) );

    Py_DECREF( tmp_called_name_106 );
    if ( tmp_assign_source_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MIPMAP_TEXTURE_EXT, tmp_assign_source_111 );
    tmp_source_name_107 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_107 == NULL ))
    {
        tmp_source_name_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_107 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }

    tmp_called_name_107 = LOOKUP_ATTRIBUTE( tmp_source_name_107, const_str_plain_Constant );
    if ( tmp_called_name_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 158;
    tmp_assign_source_112 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_107, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT_int_pos_8408_tuple, 0 ) );

    Py_DECREF( tmp_called_name_107 );
    if ( tmp_assign_source_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_FORMAT_NONE_EXT, tmp_assign_source_112 );
    tmp_source_name_108 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_108 == NULL ))
    {
        tmp_source_name_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_108 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }

    tmp_called_name_108 = LOOKUP_ATTRIBUTE( tmp_source_name_108, const_str_plain_Constant );
    if ( tmp_called_name_108 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 159;
    tmp_assign_source_113 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_108, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT_int_pos_8409_tuple, 0 ) );

    Py_DECREF( tmp_called_name_108 );
    if ( tmp_assign_source_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_FORMAT_RGB_EXT, tmp_assign_source_113 );
    tmp_source_name_109 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_109 == NULL ))
    {
        tmp_source_name_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_109 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }

    tmp_called_name_109 = LOOKUP_ATTRIBUTE( tmp_source_name_109, const_str_plain_Constant );
    if ( tmp_called_name_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 160;
    tmp_assign_source_114 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_109, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT_int_pos_8410_tuple, 0 ) );

    Py_DECREF( tmp_called_name_109 );
    if ( tmp_assign_source_114 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_FORMAT_RGBA_EXT, tmp_assign_source_114 );
    tmp_source_name_110 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_110 == NULL ))
    {
        tmp_source_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_110 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }

    tmp_called_name_110 = LOOKUP_ATTRIBUTE( tmp_source_name_110, const_str_plain_Constant );
    if ( tmp_called_name_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 161;
    tmp_assign_source_115 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_110, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_1D_BIT_EXT_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_110 );
    if ( tmp_assign_source_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_1D_BIT_EXT, tmp_assign_source_115 );
    tmp_source_name_111 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_111 == NULL ))
    {
        tmp_source_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_111 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }

    tmp_called_name_111 = LOOKUP_ATTRIBUTE( tmp_source_name_111, const_str_plain_Constant );
    if ( tmp_called_name_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 162;
    tmp_assign_source_116 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_111, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_2D_BIT_EXT_int_pos_2_tuple, 0 ) );

    Py_DECREF( tmp_called_name_111 );
    if ( tmp_assign_source_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_2D_BIT_EXT, tmp_assign_source_116 );
    tmp_source_name_112 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_112 == NULL ))
    {
        tmp_source_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_112 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 163;
        goto frame_exception_exit_1;
    }

    tmp_called_name_112 = LOOKUP_ATTRIBUTE( tmp_source_name_112, const_str_plain_Constant );
    if ( tmp_called_name_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 163;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 163;
    tmp_assign_source_117 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_112, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT_int_pos_4_tuple, 0 ) );

    Py_DECREF( tmp_called_name_112 );
    if ( tmp_assign_source_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 163;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_RECTANGLE_BIT_EXT, tmp_assign_source_117 );
    tmp_source_name_113 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_113 == NULL ))
    {
        tmp_source_name_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_113 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 164;
        goto frame_exception_exit_1;
    }

    tmp_called_name_113 = LOOKUP_ATTRIBUTE( tmp_source_name_113, const_str_plain_Constant );
    if ( tmp_called_name_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 164;
    tmp_assign_source_118 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_113, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_1D_EXT_int_pos_8411_tuple, 0 ) );

    Py_DECREF( tmp_called_name_113 );
    if ( tmp_assign_source_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_1D_EXT, tmp_assign_source_118 );
    tmp_source_name_114 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_114 == NULL ))
    {
        tmp_source_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_114 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 165;
        goto frame_exception_exit_1;
    }

    tmp_called_name_114 = LOOKUP_ATTRIBUTE( tmp_source_name_114, const_str_plain_Constant );
    if ( tmp_called_name_114 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 165;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 165;
    tmp_assign_source_119 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_114, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_2D_EXT_int_pos_8412_tuple, 0 ) );

    Py_DECREF( tmp_called_name_114 );
    if ( tmp_assign_source_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 165;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_2D_EXT, tmp_assign_source_119 );
    tmp_source_name_115 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_115 == NULL ))
    {
        tmp_source_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_115 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 166;
        goto frame_exception_exit_1;
    }

    tmp_called_name_115 = LOOKUP_ATTRIBUTE( tmp_source_name_115, const_str_plain_Constant );
    if ( tmp_called_name_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 166;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 166;
    tmp_assign_source_120 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_115, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_TEXTURE_RECTANGLE_EXT_int_pos_8413_tuple, 0 ) );

    Py_DECREF( tmp_called_name_115 );
    if ( tmp_assign_source_120 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 166;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_TEXTURE_RECTANGLE_EXT, tmp_assign_source_120 );
    tmp_source_name_116 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_116 == NULL ))
    {
        tmp_source_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_116 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 167;
        goto frame_exception_exit_1;
    }

    tmp_called_name_116 = LOOKUP_ATTRIBUTE( tmp_source_name_116, const_str_plain_Constant );
    if ( tmp_called_name_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 167;
    tmp_assign_source_121 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_116, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FRONT_LEFT_EXT_int_pos_8414_tuple, 0 ) );

    Py_DECREF( tmp_called_name_116 );
    if ( tmp_assign_source_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FRONT_LEFT_EXT, tmp_assign_source_121 );
    tmp_source_name_117 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_117 == NULL ))
    {
        tmp_source_name_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_117 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 168;
        goto frame_exception_exit_1;
    }

    tmp_called_name_117 = LOOKUP_ATTRIBUTE( tmp_source_name_117, const_str_plain_Constant );
    if ( tmp_called_name_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 168;
    tmp_assign_source_122 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_117, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FRONT_RIGHT_EXT_int_pos_8415_tuple, 0 ) );

    Py_DECREF( tmp_called_name_117 );
    if ( tmp_assign_source_122 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FRONT_RIGHT_EXT, tmp_assign_source_122 );
    tmp_source_name_118 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_118 == NULL ))
    {
        tmp_source_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_118 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 169;
        goto frame_exception_exit_1;
    }

    tmp_called_name_118 = LOOKUP_ATTRIBUTE( tmp_source_name_118, const_str_plain_Constant );
    if ( tmp_called_name_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 169;
    tmp_assign_source_123 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_118, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BACK_LEFT_EXT_int_pos_8416_tuple, 0 ) );

    Py_DECREF( tmp_called_name_118 );
    if ( tmp_assign_source_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BACK_LEFT_EXT, tmp_assign_source_123 );
    tmp_source_name_119 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_119 == NULL ))
    {
        tmp_source_name_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_119 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }

    tmp_called_name_119 = LOOKUP_ATTRIBUTE( tmp_source_name_119, const_str_plain_Constant );
    if ( tmp_called_name_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 170;
    tmp_assign_source_124 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_119, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BACK_RIGHT_EXT_int_pos_8417_tuple, 0 ) );

    Py_DECREF( tmp_called_name_119 );
    if ( tmp_assign_source_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BACK_RIGHT_EXT, tmp_assign_source_124 );
    tmp_source_name_120 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_120 == NULL ))
    {
        tmp_source_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_120 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 171;
        goto frame_exception_exit_1;
    }

    tmp_called_name_120 = LOOKUP_ATTRIBUTE( tmp_source_name_120, const_str_plain_Constant );
    if ( tmp_called_name_120 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 171;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 171;
    tmp_assign_source_125 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_120, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_FRONT_EXT_int_pos_8414_tuple, 0 ) );

    Py_DECREF( tmp_called_name_120 );
    if ( tmp_assign_source_125 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 171;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_FRONT_EXT, tmp_assign_source_125 );
    tmp_source_name_121 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_121 == NULL ))
    {
        tmp_source_name_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_121 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 172;
        goto frame_exception_exit_1;
    }

    tmp_called_name_121 = LOOKUP_ATTRIBUTE( tmp_source_name_121, const_str_plain_Constant );
    if ( tmp_called_name_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 172;
    tmp_assign_source_126 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_121, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_BACK_EXT_int_pos_8416_tuple, 0 ) );

    Py_DECREF( tmp_called_name_121 );
    if ( tmp_assign_source_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_BACK_EXT, tmp_assign_source_126 );
    tmp_source_name_122 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_122 == NULL ))
    {
        tmp_source_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_122 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }

    tmp_called_name_122 = LOOKUP_ATTRIBUTE( tmp_source_name_122, const_str_plain_Constant );
    if ( tmp_called_name_122 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 173;
    tmp_assign_source_127 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_122, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX0_EXT_int_pos_8418_tuple, 0 ) );

    Py_DECREF( tmp_called_name_122 );
    if ( tmp_assign_source_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX0_EXT, tmp_assign_source_127 );
    tmp_source_name_123 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_123 == NULL ))
    {
        tmp_source_name_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_123 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }

    tmp_called_name_123 = LOOKUP_ATTRIBUTE( tmp_source_name_123, const_str_plain_Constant );
    if ( tmp_called_name_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 174;
    tmp_assign_source_128 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_123, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX1_EXT_int_pos_8419_tuple, 0 ) );

    Py_DECREF( tmp_called_name_123 );
    if ( tmp_assign_source_128 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX1_EXT, tmp_assign_source_128 );
    tmp_source_name_124 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_124 == NULL ))
    {
        tmp_source_name_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_124 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 175;
        goto frame_exception_exit_1;
    }

    tmp_called_name_124 = LOOKUP_ATTRIBUTE( tmp_source_name_124, const_str_plain_Constant );
    if ( tmp_called_name_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 175;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 175;
    tmp_assign_source_129 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_124, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX2_EXT_int_pos_8420_tuple, 0 ) );

    Py_DECREF( tmp_called_name_124 );
    if ( tmp_assign_source_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 175;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX2_EXT, tmp_assign_source_129 );
    tmp_source_name_125 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_125 == NULL ))
    {
        tmp_source_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_125 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 176;
        goto frame_exception_exit_1;
    }

    tmp_called_name_125 = LOOKUP_ATTRIBUTE( tmp_source_name_125, const_str_plain_Constant );
    if ( tmp_called_name_125 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 176;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 176;
    tmp_assign_source_130 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_125, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX3_EXT_int_pos_8421_tuple, 0 ) );

    Py_DECREF( tmp_called_name_125 );
    if ( tmp_assign_source_130 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 176;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX3_EXT, tmp_assign_source_130 );
    tmp_source_name_126 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_126 == NULL ))
    {
        tmp_source_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_126 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }

    tmp_called_name_126 = LOOKUP_ATTRIBUTE( tmp_source_name_126, const_str_plain_Constant );
    if ( tmp_called_name_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 177;
    tmp_assign_source_131 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_126, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX4_EXT_int_pos_8422_tuple, 0 ) );

    Py_DECREF( tmp_called_name_126 );
    if ( tmp_assign_source_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX4_EXT, tmp_assign_source_131 );
    tmp_source_name_127 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_127 == NULL ))
    {
        tmp_source_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_127 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 178;
        goto frame_exception_exit_1;
    }

    tmp_called_name_127 = LOOKUP_ATTRIBUTE( tmp_source_name_127, const_str_plain_Constant );
    if ( tmp_called_name_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 178;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 178;
    tmp_assign_source_132 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_127, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX5_EXT_int_pos_8423_tuple, 0 ) );

    Py_DECREF( tmp_called_name_127 );
    if ( tmp_assign_source_132 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 178;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX5_EXT, tmp_assign_source_132 );
    tmp_source_name_128 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_128 == NULL ))
    {
        tmp_source_name_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_128 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }

    tmp_called_name_128 = LOOKUP_ATTRIBUTE( tmp_source_name_128, const_str_plain_Constant );
    if ( tmp_called_name_128 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 179;
    tmp_assign_source_133 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_128, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX6_EXT_int_pos_8424_tuple, 0 ) );

    Py_DECREF( tmp_called_name_128 );
    if ( tmp_assign_source_133 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX6_EXT, tmp_assign_source_133 );
    tmp_source_name_129 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_129 == NULL ))
    {
        tmp_source_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_129 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }

    tmp_called_name_129 = LOOKUP_ATTRIBUTE( tmp_source_name_129, const_str_plain_Constant );
    if ( tmp_called_name_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 180;
    tmp_assign_source_134 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_129, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX7_EXT_int_pos_8425_tuple, 0 ) );

    Py_DECREF( tmp_called_name_129 );
    if ( tmp_assign_source_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX7_EXT, tmp_assign_source_134 );
    tmp_source_name_130 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_130 == NULL ))
    {
        tmp_source_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_130 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }

    tmp_called_name_130 = LOOKUP_ATTRIBUTE( tmp_source_name_130, const_str_plain_Constant );
    if ( tmp_called_name_130 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 181;
    tmp_assign_source_135 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_130, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX8_EXT_int_pos_8426_tuple, 0 ) );

    Py_DECREF( tmp_called_name_130 );
    if ( tmp_assign_source_135 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX8_EXT, tmp_assign_source_135 );
    tmp_source_name_131 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_131 == NULL ))
    {
        tmp_source_name_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_131 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }

    tmp_called_name_131 = LOOKUP_ATTRIBUTE( tmp_source_name_131, const_str_plain_Constant );
    if ( tmp_called_name_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 182;
    tmp_assign_source_136 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_131, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_AUX9_EXT_int_pos_8427_tuple, 0 ) );

    Py_DECREF( tmp_called_name_131 );
    if ( tmp_assign_source_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_AUX9_EXT, tmp_assign_source_136 );
    tmp_source_name_132 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_132 == NULL ))
    {
        tmp_source_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_132 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 185;
        goto frame_exception_exit_1;
    }

    tmp_called_name_132 = LOOKUP_ATTRIBUTE( tmp_source_name_132, const_str_plain_Constant );
    if ( tmp_called_name_132 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 185;
    tmp_assign_source_137 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_132, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_ARB_multisample_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_132 );
    if ( tmp_assign_source_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_ARB_multisample, tmp_assign_source_137 );
    tmp_source_name_133 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_133 == NULL ))
    {
        tmp_source_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_133 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }

    tmp_called_name_133 = LOOKUP_ATTRIBUTE( tmp_source_name_133, const_str_plain_Constant );
    if ( tmp_called_name_133 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 187;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 187;
    tmp_assign_source_138 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_133, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_ARB_fbconfig_float_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_133 );
    if ( tmp_assign_source_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 187;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_ARB_fbconfig_float, tmp_assign_source_138 );
    tmp_source_name_134 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_134 == NULL ))
    {
        tmp_source_name_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_134 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }

    tmp_called_name_134 = LOOKUP_ATTRIBUTE( tmp_source_name_134, const_str_plain_Constant );
    if ( tmp_called_name_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 189;
    tmp_assign_source_139 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_134, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIS_multisample_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_134 );
    if ( tmp_assign_source_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIS_multisample, tmp_assign_source_139 );
    tmp_source_name_135 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_135 == NULL ))
    {
        tmp_source_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_135 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 191;
        goto frame_exception_exit_1;
    }

    tmp_called_name_135 = LOOKUP_ATTRIBUTE( tmp_source_name_135, const_str_plain_Constant );
    if ( tmp_called_name_135 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 191;
    tmp_assign_source_140 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_135, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_EXT_visual_info_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_135 );
    if ( tmp_assign_source_140 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_EXT_visual_info, tmp_assign_source_140 );
    tmp_source_name_136 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_136 == NULL ))
    {
        tmp_source_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_136 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 193;
        goto frame_exception_exit_1;
    }

    tmp_called_name_136 = LOOKUP_ATTRIBUTE( tmp_source_name_136, const_str_plain_Constant );
    if ( tmp_called_name_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 193;
    tmp_assign_source_141 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_136, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGI_swap_control_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_136 );
    if ( tmp_assign_source_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGI_swap_control, tmp_assign_source_141 );
    tmp_source_name_137 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_137 == NULL ))
    {
        tmp_source_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_137 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }

    tmp_called_name_137 = LOOKUP_ATTRIBUTE( tmp_source_name_137, const_str_plain_createBaseFunction );
    if ( tmp_called_name_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = const_tuple_str_plain_glXSwapIntervalSGI_tuple;
    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_source_name_138 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_138 == NULL ))
    {
        tmp_source_name_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_138 == NULL )
    {
        Py_DECREF( tmp_called_name_137 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 195;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_138, const_str_plain_GL );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_137 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 195;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_2 == NULL ))
    {
        tmp_dict_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_name_137 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 195;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = PyList_New( 1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_137 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_dict_value_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 196;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_dict_value_3, 0, tmp_list_element_1 );
    tmp_dict_key_3 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    tmp_dict_value_4 = const_str_digest_398742706f3b36b51b4b658eb9bbd121;
    tmp_dict_key_4 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_None_list );
    tmp_dict_key_5 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_module->f_lineno = 198;
    tmp_assign_source_142 = CALL_FUNCTION( tmp_called_name_137, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_137 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_142 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXSwapIntervalSGI, tmp_assign_source_142 );
    tmp_source_name_139 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_139 == NULL ))
    {
        tmp_source_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_139 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 202;
        goto frame_exception_exit_1;
    }

    tmp_called_name_138 = LOOKUP_ATTRIBUTE( tmp_source_name_139, const_str_plain_Constant );
    if ( tmp_called_name_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 202;
    tmp_assign_source_143 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_138, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGI_video_sync_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_138 );
    if ( tmp_assign_source_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGI_video_sync, tmp_assign_source_143 );
    tmp_source_name_140 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_140 == NULL ))
    {
        tmp_source_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_140 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 203;
        goto frame_exception_exit_1;
    }

    tmp_called_name_139 = LOOKUP_ATTRIBUTE( tmp_source_name_140, const_str_plain_createBaseFunction );
    if ( tmp_called_name_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto frame_exception_exit_1;
    }
    tmp_args_name_2 = const_tuple_str_plain_glXGetVideoSyncSGI_tuple;
    tmp_kw_name_2 = _PyDict_NewPresized( 5 );
    tmp_source_name_141 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_141 == NULL ))
    {
        tmp_source_name_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_141 == NULL )
    {
        Py_DECREF( tmp_called_name_139 );
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 204;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_6 = LOOKUP_ATTRIBUTE( tmp_source_name_141, const_str_plain_GL );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_139 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 204;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_6 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    tmp_dict_value_7 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_7 == NULL ))
    {
        tmp_dict_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_7 == NULL )
    {
        Py_DECREF( tmp_called_name_139 );
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 204;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_7 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_7, tmp_dict_value_7 );
    tmp_dict_value_8 = PyList_New( 1 );
    tmp_called_name_140 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_140 == NULL ))
    {
        tmp_called_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_140 == NULL )
    {
        Py_DECREF( tmp_called_name_139 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_dict_value_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_args_element_name_1 == NULL ))
    {
        tmp_args_element_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_139 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_dict_value_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 205;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_140, call_args );
    }

    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_139 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_dict_value_8 );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_8, 0, tmp_list_element_2 );
    tmp_dict_key_8 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_8, tmp_dict_value_8 );
    Py_DECREF( tmp_dict_value_8 );
    tmp_dict_value_9 = const_str_digest_953492a6b4a4315981818859ede6c029;
    tmp_dict_key_9 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_9, tmp_dict_value_9 );
    tmp_dict_value_10 = LIST_COPY( const_list_str_empty_list );
    tmp_dict_key_10 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_10, tmp_dict_value_10 );
    Py_DECREF( tmp_dict_value_10 );
    frame_module->f_lineno = 207;
    tmp_assign_source_144 = CALL_FUNCTION( tmp_called_name_139, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_139 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 207;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetVideoSyncSGI, tmp_assign_source_144 );
    tmp_source_name_142 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_142 == NULL ))
    {
        tmp_source_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_142 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 210;
        goto frame_exception_exit_1;
    }

    tmp_called_name_141 = LOOKUP_ATTRIBUTE( tmp_source_name_142, const_str_plain_createBaseFunction );
    if ( tmp_called_name_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 210;
        goto frame_exception_exit_1;
    }
    tmp_args_name_3 = const_tuple_str_plain_glXWaitVideoSyncSGI_tuple;
    tmp_kw_name_3 = _PyDict_NewPresized( 5 );
    tmp_source_name_143 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_143 == NULL ))
    {
        tmp_source_name_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_143 == NULL )
    {
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_11 = LOOKUP_ATTRIBUTE( tmp_source_name_143, const_str_plain_GL );
    if ( tmp_dict_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_11 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_11, tmp_dict_value_11 );
    Py_DECREF( tmp_dict_value_11 );
    tmp_dict_value_12 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_12 == NULL ))
    {
        tmp_dict_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_12 == NULL )
    {
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_12 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_12, tmp_dict_value_12 );
    tmp_dict_value_13 = PyList_New( 3 );
    tmp_list_element_3 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_3 == NULL ))
    {
        tmp_list_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_3 == NULL )
    {
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_dict_value_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 212;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_3 );
    PyList_SET_ITEM( tmp_dict_value_13, 0, tmp_list_element_3 );
    tmp_list_element_3 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_3 == NULL ))
    {
        tmp_list_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_3 == NULL )
    {
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_dict_value_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 212;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_3 );
    PyList_SET_ITEM( tmp_dict_value_13, 1, tmp_list_element_3 );
    tmp_called_name_142 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_142 == NULL ))
    {
        tmp_called_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_142 == NULL )
    {
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_dict_value_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 212;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_dict_value_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 212;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 212;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_142, call_args );
    }

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_141 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_dict_value_13 );

        exception_lineno = 212;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_13, 2, tmp_list_element_3 );
    tmp_dict_key_13 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_13, tmp_dict_value_13 );
    Py_DECREF( tmp_dict_value_13 );
    tmp_dict_value_14 = const_str_digest_a122c98b12d4d495f3d53c8bd45a0608;
    tmp_dict_key_14 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_14, tmp_dict_value_14 );
    tmp_dict_value_15 = LIST_COPY( const_list_str_plain_None_str_plain_None_str_empty_list );
    tmp_dict_key_15 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_15, tmp_dict_value_15 );
    Py_DECREF( tmp_dict_value_15 );
    frame_module->f_lineno = 214;
    tmp_assign_source_145 = CALL_FUNCTION( tmp_called_name_141, tmp_args_name_3, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_141 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_assign_source_145 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 214;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXWaitVideoSyncSGI, tmp_assign_source_145 );
    tmp_source_name_144 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_144 == NULL ))
    {
        tmp_source_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_144 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 217;
        goto frame_exception_exit_1;
    }

    tmp_called_name_143 = LOOKUP_ATTRIBUTE( tmp_source_name_144, const_str_plain_createBaseFunction );
    if ( tmp_called_name_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 217;
        goto frame_exception_exit_1;
    }
    tmp_args_name_4 = const_tuple_str_plain_glXGetRefreshRateSGI_tuple;
    tmp_kw_name_4 = _PyDict_NewPresized( 5 );
    tmp_source_name_145 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_145 == NULL ))
    {
        tmp_source_name_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_145 == NULL )
    {
        Py_DECREF( tmp_called_name_143 );
        Py_DECREF( tmp_kw_name_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 218;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_16 = LOOKUP_ATTRIBUTE( tmp_source_name_145, const_str_plain_GL );
    if ( tmp_dict_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_143 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 218;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_16 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_16, tmp_dict_value_16 );
    Py_DECREF( tmp_dict_value_16 );
    tmp_dict_value_17 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_17 == NULL ))
    {
        tmp_dict_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_17 == NULL )
    {
        Py_DECREF( tmp_called_name_143 );
        Py_DECREF( tmp_kw_name_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 218;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_17 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_17, tmp_dict_value_17 );
    tmp_dict_value_18 = PyList_New( 1 );
    tmp_called_name_144 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_144 == NULL ))
    {
        tmp_called_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_144 == NULL )
    {
        Py_DECREF( tmp_called_name_143 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_dict_value_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 219;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_143 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_dict_value_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 219;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 219;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_144, call_args );
    }

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_143 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_dict_value_18 );

        exception_lineno = 219;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_18, 0, tmp_list_element_4 );
    tmp_dict_key_18 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_18, tmp_dict_value_18 );
    Py_DECREF( tmp_dict_value_18 );
    tmp_dict_value_19 = const_str_digest_812791e421daa76a35af3a1266ccf05f;
    tmp_dict_key_19 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_19, tmp_dict_value_19 );
    tmp_dict_value_20 = LIST_COPY( const_list_str_empty_list );
    tmp_dict_key_20 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_20, tmp_dict_value_20 );
    Py_DECREF( tmp_dict_value_20 );
    frame_module->f_lineno = 221;
    tmp_assign_source_146 = CALL_FUNCTION( tmp_called_name_143, tmp_args_name_4, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_143 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 221;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetRefreshRateSGI, tmp_assign_source_146 );
    tmp_source_name_146 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_146 == NULL ))
    {
        tmp_source_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_146 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 225;
        goto frame_exception_exit_1;
    }

    tmp_called_name_145 = LOOKUP_ATTRIBUTE( tmp_source_name_146, const_str_plain_Constant );
    if ( tmp_called_name_145 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 225;
    tmp_assign_source_147 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_145, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGI_make_current_read_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_145 );
    if ( tmp_assign_source_147 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGI_make_current_read, tmp_assign_source_147 );
    // Tried code:
    tmp_assign_source_148 = PyTuple_New( 1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_148 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 226;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_148, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_148;

    tmp_assign_source_149 = impl_OpenGL$raw$_GLX_NV$$$class_1_struct__XDisplay( NULL );
    assert( tmp_assign_source_149 != NULL );
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_149;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_150 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_150 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_bases_name_1 = tmp_class_creation_1__bases;

    tmp_assign_source_150 = SELECT_METACLASS( tmp_bases_name_1, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_150;

    tmp_called_name_146 = tmp_class_creation_1__metaclass;

    tmp_args_element_name_4 = const_str_plain_struct__XDisplay;
    tmp_args_element_name_5 = tmp_class_creation_1__bases;

    tmp_args_element_name_6 = tmp_class_creation_1__class_dict;

    frame_module->f_lineno = 226;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_151 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_146, call_args );
    }

    if ( tmp_assign_source_151 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_1;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_151;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_152 = tmp_class_creation_1__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XDisplay, tmp_assign_source_152 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    tmp_assattr_name_1 = PyList_New( 1 );
    tmp_list_element_5 = PyTuple_New( 2 );
    tmp_tuple_element_2 = const_str_plain__opaque_struct;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_list_element_5, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 230;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_list_element_5, 1, tmp_tuple_element_2 );
    PyList_SET_ITEM( tmp_assattr_name_1, 0, tmp_list_element_5 );
    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XDisplay );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XDisplay );
    }

    if ( tmp_assattr_target_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XDisplay" );
        exception_tb = NULL;

        exception_lineno = 229;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__fields_, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 229;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    // Tried code:
    tmp_assign_source_153 = PyTuple_New( 1 );
    tmp_tuple_element_3 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_3 == NULL ))
    {
        tmp_tuple_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 233;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_assign_source_153, 0, tmp_tuple_element_3 );
    assert( tmp_class_creation_2__bases == NULL );
    tmp_class_creation_2__bases = tmp_assign_source_153;

    tmp_assign_source_154 = impl_OpenGL$raw$_GLX_NV$$$class_2_struct__XDisplay( NULL );
    assert( tmp_assign_source_154 != NULL );
    assert( tmp_class_creation_2__class_dict == NULL );
    tmp_class_creation_2__class_dict = tmp_assign_source_154;

    tmp_compare_left_2 = const_str_plain___metaclass__;
    tmp_compare_right_2 = tmp_class_creation_2__class_dict;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dict_name_2 = tmp_class_creation_2__class_dict;

    tmp_key_name_2 = const_str_plain___metaclass__;
    tmp_assign_source_155 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
    if ( tmp_assign_source_155 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 233;
        goto try_except_handler_2;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_bases_name_2 = tmp_class_creation_2__bases;

    tmp_assign_source_155 = SELECT_METACLASS( tmp_bases_name_2, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass == NULL );
    tmp_class_creation_2__metaclass = tmp_assign_source_155;

    tmp_called_name_147 = tmp_class_creation_2__metaclass;

    tmp_args_element_name_7 = const_str_plain_struct__XDisplay;
    tmp_args_element_name_8 = tmp_class_creation_2__bases;

    tmp_args_element_name_9 = tmp_class_creation_2__class_dict;

    frame_module->f_lineno = 233;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_assign_source_156 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_147, call_args );
    }

    if ( tmp_assign_source_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 233;
        goto try_except_handler_2;
    }
    assert( tmp_class_creation_2__class == NULL );
    tmp_class_creation_2__class = tmp_assign_source_156;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    tmp_assign_source_157 = tmp_class_creation_2__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XDisplay, tmp_assign_source_157 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class );
    Py_DECREF( tmp_class_creation_2__class );
    tmp_class_creation_2__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    tmp_assattr_name_2 = PyList_New( 1 );
    tmp_list_element_6 = PyTuple_New( 2 );
    tmp_tuple_element_4 = const_str_plain__opaque_struct;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_list_element_6, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        Py_DECREF( tmp_list_element_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_list_element_6, 1, tmp_tuple_element_4 );
    PyList_SET_ITEM( tmp_assattr_name_2, 0, tmp_list_element_6 );
    tmp_assattr_target_2 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XDisplay );

    if (unlikely( tmp_assattr_target_2 == NULL ))
    {
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XDisplay );
    }

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XDisplay" );
        exception_tb = NULL;

        exception_lineno = 236;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__fields_, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_assign_source_158 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XDisplay );

    if (unlikely( tmp_assign_source_158 == NULL ))
    {
        tmp_assign_source_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XDisplay );
    }

    if ( tmp_assign_source_158 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XDisplay" );
        exception_tb = NULL;

        exception_lineno = 240;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display, tmp_assign_source_158 );
    tmp_assign_source_159 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_assign_source_159 == NULL ))
    {
        tmp_assign_source_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_assign_source_159 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 241;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID, tmp_assign_source_159 );
    tmp_assign_source_160 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_160 == NULL ))
    {
        tmp_assign_source_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_160 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable, tmp_assign_source_160 );
    // Tried code:
    tmp_assign_source_161 = PyTuple_New( 1 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_161 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 243;
        goto try_except_handler_3;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_161, 0, tmp_tuple_element_5 );
    assert( tmp_class_creation_3__bases == NULL );
    tmp_class_creation_3__bases = tmp_assign_source_161;

    tmp_assign_source_162 = impl_OpenGL$raw$_GLX_NV$$$class_3_struct___GLXcontextRec( NULL );
    assert( tmp_assign_source_162 != NULL );
    assert( tmp_class_creation_3__class_dict == NULL );
    tmp_class_creation_3__class_dict = tmp_assign_source_162;

    tmp_compare_left_3 = const_str_plain___metaclass__;
    tmp_compare_right_3 = tmp_class_creation_3__class_dict;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dict_name_3 = tmp_class_creation_3__class_dict;

    tmp_key_name_3 = const_str_plain___metaclass__;
    tmp_assign_source_163 = DICT_GET_ITEM( tmp_dict_name_3, tmp_key_name_3 );
    if ( tmp_assign_source_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;
        goto try_except_handler_3;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_bases_name_3 = tmp_class_creation_3__bases;

    tmp_assign_source_163 = SELECT_METACLASS( tmp_bases_name_3, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_3:;
    assert( tmp_class_creation_3__metaclass == NULL );
    tmp_class_creation_3__metaclass = tmp_assign_source_163;

    tmp_called_name_148 = tmp_class_creation_3__metaclass;

    tmp_args_element_name_10 = const_str_plain_struct___GLXcontextRec;
    tmp_args_element_name_11 = tmp_class_creation_3__bases;

    tmp_args_element_name_12 = tmp_class_creation_3__class_dict;

    frame_module->f_lineno = 243;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_assign_source_164 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_148, call_args );
    }

    if ( tmp_assign_source_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;
        goto try_except_handler_3;
    }
    assert( tmp_class_creation_3__class == NULL );
    tmp_class_creation_3__class = tmp_assign_source_164;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    tmp_assign_source_165 = tmp_class_creation_3__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec, tmp_assign_source_165 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class );
    Py_DECREF( tmp_class_creation_3__class );
    tmp_class_creation_3__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_dict );
    Py_DECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    tmp_assattr_name_3 = PyList_New( 1 );
    tmp_list_element_7 = PyTuple_New( 2 );
    tmp_tuple_element_6 = const_str_plain__opaque_struct;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_list_element_7, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_assattr_name_3 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_list_element_7, 1, tmp_tuple_element_6 );
    PyList_SET_ITEM( tmp_assattr_name_3, 0, tmp_list_element_7 );
    tmp_assattr_target_3 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec );

    if (unlikely( tmp_assattr_target_3 == NULL ))
    {
        tmp_assattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec );
    }

    if ( tmp_assattr_target_3 == NULL )
    {
        Py_DECREF( tmp_assattr_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct___GLXcontextRec" );
        exception_tb = NULL;

        exception_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__fields_, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        exception_lineno = 246;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );
    // Tried code:
    tmp_assign_source_166 = PyTuple_New( 1 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_166 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 250;
        goto try_except_handler_4;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_166, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_4__bases == NULL );
    tmp_class_creation_4__bases = tmp_assign_source_166;

    tmp_assign_source_167 = impl_OpenGL$raw$_GLX_NV$$$class_4_struct___GLXcontextRec( NULL );
    assert( tmp_assign_source_167 != NULL );
    assert( tmp_class_creation_4__class_dict == NULL );
    tmp_class_creation_4__class_dict = tmp_assign_source_167;

    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_4__class_dict;

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dict_name_4 = tmp_class_creation_4__class_dict;

    tmp_key_name_4 = const_str_plain___metaclass__;
    tmp_assign_source_168 = DICT_GET_ITEM( tmp_dict_name_4, tmp_key_name_4 );
    if ( tmp_assign_source_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_4;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_bases_name_4 = tmp_class_creation_4__bases;

    tmp_assign_source_168 = SELECT_METACLASS( tmp_bases_name_4, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_4:;
    assert( tmp_class_creation_4__metaclass == NULL );
    tmp_class_creation_4__metaclass = tmp_assign_source_168;

    tmp_called_name_149 = tmp_class_creation_4__metaclass;

    tmp_args_element_name_13 = const_str_plain_struct___GLXcontextRec;
    tmp_args_element_name_14 = tmp_class_creation_4__bases;

    tmp_args_element_name_15 = tmp_class_creation_4__class_dict;

    frame_module->f_lineno = 250;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_169 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_149, call_args );
    }

    if ( tmp_assign_source_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_4;
    }
    assert( tmp_class_creation_4__class == NULL );
    tmp_class_creation_4__class = tmp_assign_source_169;

    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    tmp_assign_source_170 = tmp_class_creation_4__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec, tmp_assign_source_170 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class );
    Py_DECREF( tmp_class_creation_4__class );
    tmp_class_creation_4__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_dict );
    Py_DECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    tmp_assattr_name_4 = PyList_New( 1 );
    tmp_list_element_8 = PyTuple_New( 2 );
    tmp_tuple_element_8 = const_str_plain__opaque_struct;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_list_element_8, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_8 == NULL ))
    {
        tmp_tuple_element_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_assattr_name_4 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 254;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_list_element_8, 1, tmp_tuple_element_8 );
    PyList_SET_ITEM( tmp_assattr_name_4, 0, tmp_list_element_8 );
    tmp_assattr_target_4 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec );

    if (unlikely( tmp_assattr_target_4 == NULL ))
    {
        tmp_assattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec );
    }

    if ( tmp_assattr_target_4 == NULL )
    {
        Py_DECREF( tmp_assattr_name_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct___GLXcontextRec" );
        exception_tb = NULL;

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__fields_, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_4 );

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_4 );
    tmp_called_name_150 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_150 == NULL ))
    {
        tmp_called_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_150 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_16 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec );

    if (unlikely( tmp_args_element_name_16 == NULL ))
    {
        tmp_args_element_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct___GLXcontextRec );
    }

    if ( tmp_args_element_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct___GLXcontextRec" );
        exception_tb = NULL;

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 257;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_assign_source_171 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_150, call_args );
    }

    if ( tmp_assign_source_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 257;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext, tmp_assign_source_171 );
    tmp_source_name_147 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_147 == NULL ))
    {
        tmp_source_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_147 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }

    tmp_called_name_151 = LOOKUP_ATTRIBUTE( tmp_source_name_147, const_str_plain_createBaseFunction );
    if ( tmp_called_name_151 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_args_name_5 = const_tuple_str_plain_glXMakeCurrentReadSGI_tuple;
    tmp_kw_name_5 = _PyDict_NewPresized( 5 );
    tmp_source_name_148 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_148 == NULL ))
    {
        tmp_source_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_148 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 259;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_21 = LOOKUP_ATTRIBUTE( tmp_source_name_148, const_str_plain_GL );
    if ( tmp_dict_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 259;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_21 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_21, tmp_dict_value_21 );
    Py_DECREF( tmp_dict_value_21 );
    tmp_dict_value_22 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_22 == NULL ))
    {
        tmp_dict_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_22 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 259;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_22 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_22, tmp_dict_value_22 );
    tmp_dict_value_23 = PyList_New( 4 );
    tmp_called_name_152 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_152 == NULL ))
    {
        tmp_called_name_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_152 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_dict_value_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_17 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_17 == NULL ))
    {
        tmp_args_element_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_17 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_dict_value_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 260;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_list_element_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_152, call_args );
    }

    if ( tmp_list_element_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_dict_value_23 );

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_23, 0, tmp_list_element_9 );
    tmp_list_element_9 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_9 == NULL ))
    {
        tmp_list_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_9 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_dict_value_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_9 );
    PyList_SET_ITEM( tmp_dict_value_23, 1, tmp_list_element_9 );
    tmp_list_element_9 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_9 == NULL ))
    {
        tmp_list_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_9 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_dict_value_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_9 );
    PyList_SET_ITEM( tmp_dict_value_23, 2, tmp_list_element_9 );
    tmp_list_element_9 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_list_element_9 == NULL ))
    {
        tmp_list_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_list_element_9 == NULL )
    {
        Py_DECREF( tmp_called_name_151 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_dict_value_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_9 );
    PyList_SET_ITEM( tmp_dict_value_23, 3, tmp_list_element_9 );
    tmp_dict_key_23 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_23, tmp_dict_value_23 );
    Py_DECREF( tmp_dict_value_23 );
    tmp_dict_value_24 = const_str_digest_63f1baf3746dab1b9e295210da708714;
    tmp_dict_key_24 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_24, tmp_dict_value_24 );
    tmp_dict_value_25 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_plain_None_list );
    tmp_dict_key_25 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_25, tmp_dict_value_25 );
    Py_DECREF( tmp_dict_value_25 );
    frame_module->f_lineno = 262;
    tmp_assign_source_172 = CALL_FUNCTION( tmp_called_name_151, tmp_args_name_5, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_151 );
    Py_DECREF( tmp_kw_name_5 );
    if ( tmp_assign_source_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXMakeCurrentReadSGI, tmp_assign_source_172 );
    tmp_source_name_149 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_149 == NULL ))
    {
        tmp_source_name_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_149 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 265;
        goto frame_exception_exit_1;
    }

    tmp_called_name_153 = LOOKUP_ATTRIBUTE( tmp_source_name_149, const_str_plain_createBaseFunction );
    if ( tmp_called_name_153 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 265;
        goto frame_exception_exit_1;
    }
    tmp_args_name_6 = const_tuple_str_plain_glXGetCurrentReadDrawableSGI_tuple;
    tmp_kw_name_6 = _PyDict_NewPresized( 5 );
    tmp_source_name_150 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_150 == NULL ))
    {
        tmp_source_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_150 == NULL )
    {
        Py_DECREF( tmp_called_name_153 );
        Py_DECREF( tmp_kw_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_26 = LOOKUP_ATTRIBUTE( tmp_source_name_150, const_str_plain_GL );
    if ( tmp_dict_value_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_153 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_26 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_26, tmp_dict_value_26 );
    Py_DECREF( tmp_dict_value_26 );
    tmp_dict_value_27 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_dict_value_27 == NULL ))
    {
        tmp_dict_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_dict_value_27 == NULL )
    {
        Py_DECREF( tmp_called_name_153 );
        Py_DECREF( tmp_kw_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_27 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_27, tmp_dict_value_27 );
    tmp_dict_value_28 = PyList_New( 0 );
    tmp_dict_key_28 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_28, tmp_dict_value_28 );
    Py_DECREF( tmp_dict_value_28 );
    tmp_dict_value_29 = const_str_digest_09c9901db243cc7e21b0c05419203dff;
    tmp_dict_key_29 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_29, tmp_dict_value_29 );
    tmp_dict_value_30 = PyList_New( 0 );
    tmp_dict_key_30 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_30, tmp_dict_value_30 );
    Py_DECREF( tmp_dict_value_30 );
    frame_module->f_lineno = 269;
    tmp_assign_source_173 = CALL_FUNCTION( tmp_called_name_153, tmp_args_name_6, tmp_kw_name_6 );
    Py_DECREF( tmp_called_name_153 );
    Py_DECREF( tmp_kw_name_6 );
    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetCurrentReadDrawableSGI, tmp_assign_source_173 );
    tmp_source_name_151 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_151 == NULL ))
    {
        tmp_source_name_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_151 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }

    tmp_called_name_154 = LOOKUP_ATTRIBUTE( tmp_source_name_151, const_str_plain_Constant );
    if ( tmp_called_name_154 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 273;
    tmp_assign_source_174 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_154, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_video_source_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_154 );
    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_video_source, tmp_assign_source_174 );
    tmp_source_name_152 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_152 == NULL ))
    {
        tmp_source_name_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_152 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 275;
        goto frame_exception_exit_1;
    }

    tmp_called_name_155 = LOOKUP_ATTRIBUTE( tmp_source_name_152, const_str_plain_Constant );
    if ( tmp_called_name_155 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 275;
    tmp_assign_source_175 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_155, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_EXT_visual_rating_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_155 );
    if ( tmp_assign_source_175 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_EXT_visual_rating, tmp_assign_source_175 );
    tmp_source_name_153 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_153 == NULL ))
    {
        tmp_source_name_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_153 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 277;
        goto frame_exception_exit_1;
    }

    tmp_called_name_156 = LOOKUP_ATTRIBUTE( tmp_source_name_153, const_str_plain_Constant );
    if ( tmp_called_name_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 277;
    tmp_assign_source_176 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_156, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_EXT_import_context_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_156 );
    if ( tmp_assign_source_176 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_EXT_import_context, tmp_assign_source_176 );
    tmp_source_name_154 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_154 == NULL ))
    {
        tmp_source_name_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_154 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }

    tmp_called_name_157 = LOOKUP_ATTRIBUTE( tmp_source_name_154, const_str_plain_createBaseFunction );
    if ( tmp_called_name_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    tmp_args_name_7 = const_tuple_str_plain_glXGetCurrentDisplayEXT_tuple;
    tmp_kw_name_7 = _PyDict_NewPresized( 5 );
    tmp_source_name_155 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_155 == NULL ))
    {
        tmp_source_name_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_155 == NULL )
    {
        Py_DECREF( tmp_called_name_157 );
        Py_DECREF( tmp_kw_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_31 = LOOKUP_ATTRIBUTE( tmp_source_name_155, const_str_plain_GL );
    if ( tmp_dict_value_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_157 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_31 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_31, tmp_dict_value_31 );
    Py_DECREF( tmp_dict_value_31 );
    tmp_called_name_158 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_158 == NULL ))
    {
        tmp_called_name_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_158 == NULL )
    {
        Py_DECREF( tmp_called_name_157 );
        Py_DECREF( tmp_kw_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_18 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_18 == NULL ))
    {
        tmp_args_element_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_18 == NULL )
    {
        Py_DECREF( tmp_called_name_157 );
        Py_DECREF( tmp_kw_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 279;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_dict_value_32 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_158, call_args );
    }

    if ( tmp_dict_value_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_157 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_32 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_32, tmp_dict_value_32 );
    Py_DECREF( tmp_dict_value_32 );
    tmp_dict_value_33 = PyList_New( 0 );
    tmp_dict_key_33 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_33, tmp_dict_value_33 );
    Py_DECREF( tmp_dict_value_33 );
    tmp_dict_value_34 = const_str_digest_2538588c7de134c9f0b7f14356fd6805;
    tmp_dict_key_34 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_34, tmp_dict_value_34 );
    tmp_dict_value_35 = PyList_New( 0 );
    tmp_dict_key_35 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_35, tmp_dict_value_35 );
    Py_DECREF( tmp_dict_value_35 );
    frame_module->f_lineno = 282;
    tmp_assign_source_177 = CALL_FUNCTION( tmp_called_name_157, tmp_args_name_7, tmp_kw_name_7 );
    Py_DECREF( tmp_called_name_157 );
    Py_DECREF( tmp_kw_name_7 );
    if ( tmp_assign_source_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetCurrentDisplayEXT, tmp_assign_source_177 );
    tmp_source_name_156 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_156 == NULL ))
    {
        tmp_source_name_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_156 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 285;
        goto frame_exception_exit_1;
    }

    tmp_called_name_159 = LOOKUP_ATTRIBUTE( tmp_source_name_156, const_str_plain_createBaseFunction );
    if ( tmp_called_name_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;
        goto frame_exception_exit_1;
    }
    tmp_args_name_8 = const_tuple_str_plain_glXQueryContextInfoEXT_tuple;
    tmp_kw_name_8 = _PyDict_NewPresized( 5 );
    tmp_source_name_157 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_157 == NULL ))
    {
        tmp_source_name_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_157 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_36 = LOOKUP_ATTRIBUTE( tmp_source_name_157, const_str_plain_GL );
    if ( tmp_dict_value_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_36 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_36, tmp_dict_value_36 );
    Py_DECREF( tmp_dict_value_36 );
    tmp_dict_value_37 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_37 == NULL ))
    {
        tmp_dict_value_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_37 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_37 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_37, tmp_dict_value_37 );
    tmp_dict_value_38 = PyList_New( 4 );
    tmp_called_name_160 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_160 == NULL ))
    {
        tmp_called_name_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_160 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_19 == NULL ))
    {
        tmp_args_element_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_19 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 287;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_list_element_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_160, call_args );
    }

    if ( tmp_list_element_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_38, 0, tmp_list_element_10 );
    tmp_list_element_10 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_list_element_10 == NULL ))
    {
        tmp_list_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_list_element_10 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_10 );
    PyList_SET_ITEM( tmp_dict_value_38, 1, tmp_list_element_10 );
    tmp_list_element_10 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_10 == NULL ))
    {
        tmp_list_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_10 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_10 );
    PyList_SET_ITEM( tmp_dict_value_38, 2, tmp_list_element_10 );
    tmp_called_name_161 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_161 == NULL ))
    {
        tmp_called_name_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_161 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_20 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_20 == NULL ))
    {
        tmp_args_element_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_20 == NULL )
    {
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 287;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_list_element_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_161, call_args );
    }

    if ( tmp_list_element_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_159 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_dict_value_38 );

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_38, 3, tmp_list_element_10 );
    tmp_dict_key_38 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_38, tmp_dict_value_38 );
    Py_DECREF( tmp_dict_value_38 );
    tmp_dict_value_39 = const_str_digest_f3a17fdff7fbb470678b66d6c019d148;
    tmp_dict_key_39 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_39, tmp_dict_value_39 );
    tmp_dict_value_40 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_empty_list );
    tmp_dict_key_40 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_40, tmp_dict_value_40 );
    Py_DECREF( tmp_dict_value_40 );
    frame_module->f_lineno = 289;
    tmp_assign_source_178 = CALL_FUNCTION( tmp_called_name_159, tmp_args_name_8, tmp_kw_name_8 );
    Py_DECREF( tmp_called_name_159 );
    Py_DECREF( tmp_kw_name_8 );
    if ( tmp_assign_source_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 289;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryContextInfoEXT, tmp_assign_source_178 );
    tmp_assign_source_179 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_179 == NULL ))
    {
        tmp_assign_source_179 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_179 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContextID, tmp_assign_source_179 );
    tmp_source_name_158 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_158 == NULL ))
    {
        tmp_source_name_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_158 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 293;
        goto frame_exception_exit_1;
    }

    tmp_called_name_162 = LOOKUP_ATTRIBUTE( tmp_source_name_158, const_str_plain_createBaseFunction );
    if ( tmp_called_name_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 293;
        goto frame_exception_exit_1;
    }
    tmp_args_name_9 = const_tuple_str_plain_glXGetContextIDEXT_tuple;
    tmp_kw_name_9 = _PyDict_NewPresized( 5 );
    tmp_source_name_159 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_159 == NULL ))
    {
        tmp_source_name_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_159 == NULL )
    {
        Py_DECREF( tmp_called_name_162 );
        Py_DECREF( tmp_kw_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 294;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_41 = LOOKUP_ATTRIBUTE( tmp_source_name_159, const_str_plain_GL );
    if ( tmp_dict_value_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_162 );
        Py_DECREF( tmp_kw_name_9 );

        exception_lineno = 294;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_41 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_41, tmp_dict_value_41 );
    Py_DECREF( tmp_dict_value_41 );
    tmp_dict_value_42 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContextID );

    if (unlikely( tmp_dict_value_42 == NULL ))
    {
        tmp_dict_value_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContextID );
    }

    if ( tmp_dict_value_42 == NULL )
    {
        Py_DECREF( tmp_called_name_162 );
        Py_DECREF( tmp_kw_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContextID" );
        exception_tb = NULL;

        exception_lineno = 294;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_42 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_42, tmp_dict_value_42 );
    tmp_dict_value_43 = PyList_New( 1 );
    tmp_list_element_11 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_list_element_11 == NULL ))
    {
        tmp_list_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_list_element_11 == NULL )
    {
        Py_DECREF( tmp_called_name_162 );
        Py_DECREF( tmp_kw_name_9 );
        Py_DECREF( tmp_dict_value_43 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 295;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_43, 0, tmp_list_element_11 );
    tmp_dict_key_43 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_43, tmp_dict_value_43 );
    Py_DECREF( tmp_dict_value_43 );
    tmp_dict_value_44 = const_str_digest_d876baa99689b6ffddd598dbe467bc04;
    tmp_dict_key_44 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_44, tmp_dict_value_44 );
    tmp_dict_value_45 = LIST_COPY( const_list_str_plain_None_list );
    tmp_dict_key_45 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_45, tmp_dict_value_45 );
    Py_DECREF( tmp_dict_value_45 );
    frame_module->f_lineno = 297;
    tmp_assign_source_180 = CALL_FUNCTION( tmp_called_name_162, tmp_args_name_9, tmp_kw_name_9 );
    Py_DECREF( tmp_called_name_162 );
    Py_DECREF( tmp_kw_name_9 );
    if ( tmp_assign_source_180 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetContextIDEXT, tmp_assign_source_180 );
    tmp_source_name_160 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_160 == NULL ))
    {
        tmp_source_name_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_160 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }

    tmp_called_name_163 = LOOKUP_ATTRIBUTE( tmp_source_name_160, const_str_plain_createBaseFunction );
    if ( tmp_called_name_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    tmp_args_name_10 = const_tuple_str_plain_glXImportContextEXT_tuple;
    tmp_kw_name_10 = _PyDict_NewPresized( 5 );
    tmp_source_name_161 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_161 == NULL ))
    {
        tmp_source_name_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_161 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 301;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_46 = LOOKUP_ATTRIBUTE( tmp_source_name_161, const_str_plain_GL );
    if ( tmp_dict_value_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );

        exception_lineno = 301;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_46 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_46, tmp_dict_value_46 );
    Py_DECREF( tmp_dict_value_46 );
    tmp_dict_value_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_dict_value_47 == NULL ))
    {
        tmp_dict_value_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_dict_value_47 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 301;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_47 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_47, tmp_dict_value_47 );
    tmp_dict_value_48 = PyList_New( 2 );
    tmp_called_name_164 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_164 == NULL ))
    {
        tmp_called_name_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_164 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_dict_value_48 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_21 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_21 == NULL ))
    {
        tmp_args_element_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_21 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_dict_value_48 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 302;
    {
        PyObject *call_args[] = { tmp_args_element_name_21 };
        tmp_list_element_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_164, call_args );
    }

    if ( tmp_list_element_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_dict_value_48 );

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_48, 0, tmp_list_element_12 );
    tmp_list_element_12 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContextID );

    if (unlikely( tmp_list_element_12 == NULL ))
    {
        tmp_list_element_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContextID );
    }

    if ( tmp_list_element_12 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_dict_value_48 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContextID" );
        exception_tb = NULL;

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_12 );
    PyList_SET_ITEM( tmp_dict_value_48, 1, tmp_list_element_12 );
    tmp_dict_key_48 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_48, tmp_dict_value_48 );
    Py_DECREF( tmp_dict_value_48 );
    tmp_dict_value_49 = const_str_digest_103f33b2787c8523c7967ad59de053cf;
    tmp_dict_key_49 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_49, tmp_dict_value_49 );
    tmp_dict_value_50 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_50 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_50, tmp_dict_value_50 );
    Py_DECREF( tmp_dict_value_50 );
    frame_module->f_lineno = 304;
    tmp_assign_source_181 = CALL_FUNCTION( tmp_called_name_163, tmp_args_name_10, tmp_kw_name_10 );
    Py_DECREF( tmp_called_name_163 );
    Py_DECREF( tmp_kw_name_10 );
    if ( tmp_assign_source_181 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXImportContextEXT, tmp_assign_source_181 );
    tmp_source_name_162 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_162 == NULL ))
    {
        tmp_source_name_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_162 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 307;
        goto frame_exception_exit_1;
    }

    tmp_called_name_165 = LOOKUP_ATTRIBUTE( tmp_source_name_162, const_str_plain_createBaseFunction );
    if ( tmp_called_name_165 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 307;
        goto frame_exception_exit_1;
    }
    tmp_args_name_11 = const_tuple_str_plain_glXFreeContextEXT_tuple;
    tmp_kw_name_11 = _PyDict_NewPresized( 5 );
    tmp_source_name_163 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_163 == NULL ))
    {
        tmp_source_name_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_163 == NULL )
    {
        Py_DECREF( tmp_called_name_165 );
        Py_DECREF( tmp_kw_name_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_51 = LOOKUP_ATTRIBUTE( tmp_source_name_163, const_str_plain_GL );
    if ( tmp_dict_value_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_165 );
        Py_DECREF( tmp_kw_name_11 );

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_51 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_51, tmp_dict_value_51 );
    Py_DECREF( tmp_dict_value_51 );
    tmp_dict_value_52 = Py_None;
    tmp_dict_key_52 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_52, tmp_dict_value_52 );
    tmp_dict_value_53 = PyList_New( 2 );
    tmp_called_name_166 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_166 == NULL ))
    {
        tmp_called_name_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_166 == NULL )
    {
        Py_DECREF( tmp_called_name_165 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_dict_value_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 309;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_22 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_22 == NULL ))
    {
        tmp_args_element_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_22 == NULL )
    {
        Py_DECREF( tmp_called_name_165 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_dict_value_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 309;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 309;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_list_element_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_166, call_args );
    }

    if ( tmp_list_element_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_165 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_dict_value_53 );

        exception_lineno = 309;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_53, 0, tmp_list_element_13 );
    tmp_list_element_13 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_list_element_13 == NULL ))
    {
        tmp_list_element_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_list_element_13 == NULL )
    {
        Py_DECREF( tmp_called_name_165 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_dict_value_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 309;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_13 );
    PyList_SET_ITEM( tmp_dict_value_53, 1, tmp_list_element_13 );
    tmp_dict_key_53 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_53, tmp_dict_value_53 );
    Py_DECREF( tmp_dict_value_53 );
    tmp_dict_value_54 = const_str_digest_0732571536e55f73111e5ebbb420b64e;
    tmp_dict_key_54 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_54, tmp_dict_value_54 );
    tmp_dict_value_55 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_55 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_55, tmp_dict_value_55 );
    Py_DECREF( tmp_dict_value_55 );
    frame_module->f_lineno = 311;
    tmp_assign_source_182 = CALL_FUNCTION( tmp_called_name_165, tmp_args_name_11, tmp_kw_name_11 );
    Py_DECREF( tmp_called_name_165 );
    Py_DECREF( tmp_kw_name_11 );
    if ( tmp_assign_source_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 311;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXFreeContextEXT, tmp_assign_source_182 );
    tmp_source_name_164 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_164 == NULL ))
    {
        tmp_source_name_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_164 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 315;
        goto frame_exception_exit_1;
    }

    tmp_called_name_167 = LOOKUP_ATTRIBUTE( tmp_source_name_164, const_str_plain_Constant );
    if ( tmp_called_name_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 315;
    tmp_assign_source_183 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_167, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_fbconfig_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_167 );
    if ( tmp_assign_source_183 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_fbconfig, tmp_assign_source_183 );
    // Tried code:
    tmp_assign_source_184 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_184 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 316;
        goto try_except_handler_5;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_184, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_5__bases == NULL );
    tmp_class_creation_5__bases = tmp_assign_source_184;

    tmp_assign_source_185 = impl_OpenGL$raw$_GLX_NV$$$class_5_struct___GLXFBConfigRec( NULL );
    assert( tmp_assign_source_185 != NULL );
    assert( tmp_class_creation_5__class_dict == NULL );
    tmp_class_creation_5__class_dict = tmp_assign_source_185;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_5__class_dict;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_dict_name_5 = tmp_class_creation_5__class_dict;

    tmp_key_name_5 = const_str_plain___metaclass__;
    tmp_assign_source_186 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
    if ( tmp_assign_source_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 316;
        goto try_except_handler_5;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_bases_name_5 = tmp_class_creation_5__bases;

    tmp_assign_source_186 = SELECT_METACLASS( tmp_bases_name_5, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_5:;
    assert( tmp_class_creation_5__metaclass == NULL );
    tmp_class_creation_5__metaclass = tmp_assign_source_186;

    tmp_called_name_168 = tmp_class_creation_5__metaclass;

    tmp_args_element_name_23 = const_str_plain_struct___GLXFBConfigRec;
    tmp_args_element_name_24 = tmp_class_creation_5__bases;

    tmp_args_element_name_25 = tmp_class_creation_5__class_dict;

    frame_module->f_lineno = 316;
    {
        PyObject *call_args[] = { tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 };
        tmp_assign_source_187 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_168, call_args );
    }

    if ( tmp_assign_source_187 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 316;
        goto try_except_handler_5;
    }
    assert( tmp_class_creation_5__class == NULL );
    tmp_class_creation_5__class = tmp_assign_source_187;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    tmp_assign_source_188 = tmp_class_creation_5__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec, tmp_assign_source_188 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class );
    Py_DECREF( tmp_class_creation_5__class );
    tmp_class_creation_5__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_dict );
    Py_DECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    tmp_assattr_name_5 = PyList_New( 1 );
    tmp_list_element_14 = PyTuple_New( 2 );
    tmp_tuple_element_10 = const_str_plain__opaque_struct;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_list_element_14, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_10 == NULL ))
    {
        tmp_tuple_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_assattr_name_5 );
        Py_DECREF( tmp_list_element_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 320;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_list_element_14, 1, tmp_tuple_element_10 );
    PyList_SET_ITEM( tmp_assattr_name_5, 0, tmp_list_element_14 );
    tmp_assattr_target_5 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec );

    if (unlikely( tmp_assattr_target_5 == NULL ))
    {
        tmp_assattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec );
    }

    if ( tmp_assattr_target_5 == NULL )
    {
        Py_DECREF( tmp_assattr_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct___GLXFBConfigRec" );
        exception_tb = NULL;

        exception_lineno = 319;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__fields_, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_5 );

        exception_lineno = 319;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_5 );
    // Tried code:
    tmp_assign_source_189 = PyTuple_New( 1 );
    tmp_tuple_element_11 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_11 == NULL ))
    {
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_189 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 323;
        goto try_except_handler_6;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_assign_source_189, 0, tmp_tuple_element_11 );
    assert( tmp_class_creation_6__bases == NULL );
    tmp_class_creation_6__bases = tmp_assign_source_189;

    tmp_assign_source_190 = impl_OpenGL$raw$_GLX_NV$$$class_6_struct___GLXFBConfigRec( NULL );
    assert( tmp_assign_source_190 != NULL );
    assert( tmp_class_creation_6__class_dict == NULL );
    tmp_class_creation_6__class_dict = tmp_assign_source_190;

    tmp_compare_left_6 = const_str_plain___metaclass__;
    tmp_compare_right_6 = tmp_class_creation_6__class_dict;

    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_dict_name_6 = tmp_class_creation_6__class_dict;

    tmp_key_name_6 = const_str_plain___metaclass__;
    tmp_assign_source_191 = DICT_GET_ITEM( tmp_dict_name_6, tmp_key_name_6 );
    if ( tmp_assign_source_191 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 323;
        goto try_except_handler_6;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_bases_name_6 = tmp_class_creation_6__bases;

    tmp_assign_source_191 = SELECT_METACLASS( tmp_bases_name_6, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_6:;
    assert( tmp_class_creation_6__metaclass == NULL );
    tmp_class_creation_6__metaclass = tmp_assign_source_191;

    tmp_called_name_169 = tmp_class_creation_6__metaclass;

    tmp_args_element_name_26 = const_str_plain_struct___GLXFBConfigRec;
    tmp_args_element_name_27 = tmp_class_creation_6__bases;

    tmp_args_element_name_28 = tmp_class_creation_6__class_dict;

    frame_module->f_lineno = 323;
    {
        PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27, tmp_args_element_name_28 };
        tmp_assign_source_192 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_169, call_args );
    }

    if ( tmp_assign_source_192 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 323;
        goto try_except_handler_6;
    }
    assert( tmp_class_creation_6__class == NULL );
    tmp_class_creation_6__class = tmp_assign_source_192;

    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    tmp_assign_source_193 = tmp_class_creation_6__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec, tmp_assign_source_193 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class );
    Py_DECREF( tmp_class_creation_6__class );
    tmp_class_creation_6__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    tmp_assattr_name_6 = PyList_New( 1 );
    tmp_list_element_15 = PyTuple_New( 2 );
    tmp_tuple_element_12 = const_str_plain__opaque_struct;
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_list_element_15, 0, tmp_tuple_element_12 );
    tmp_tuple_element_12 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_12 == NULL ))
    {
        tmp_tuple_element_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_assattr_name_6 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 327;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_list_element_15, 1, tmp_tuple_element_12 );
    PyList_SET_ITEM( tmp_assattr_name_6, 0, tmp_list_element_15 );
    tmp_assattr_target_6 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec );

    if (unlikely( tmp_assattr_target_6 == NULL ))
    {
        tmp_assattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec );
    }

    if ( tmp_assattr_target_6 == NULL )
    {
        Py_DECREF( tmp_assattr_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct___GLXFBConfigRec" );
        exception_tb = NULL;

        exception_lineno = 326;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__fields_, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_6 );

        exception_lineno = 326;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_6 );
    tmp_called_name_170 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_170 == NULL ))
    {
        tmp_called_name_170 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_170 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 330;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_29 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec );

    if (unlikely( tmp_args_element_name_29 == NULL ))
    {
        tmp_args_element_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct___GLXFBConfigRec );
    }

    if ( tmp_args_element_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct___GLXFBConfigRec" );
        exception_tb = NULL;

        exception_lineno = 330;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 330;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_assign_source_194 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_170, call_args );
    }

    if ( tmp_assign_source_194 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 330;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX, tmp_assign_source_194 );
    tmp_source_name_165 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_165 == NULL ))
    {
        tmp_source_name_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_165 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 331;
        goto frame_exception_exit_1;
    }

    tmp_called_name_171 = LOOKUP_ATTRIBUTE( tmp_source_name_165, const_str_plain_createBaseFunction );
    if ( tmp_called_name_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 331;
        goto frame_exception_exit_1;
    }
    tmp_args_name_12 = const_tuple_str_plain_glXGetFBConfigAttribSGIX_tuple;
    tmp_kw_name_12 = _PyDict_NewPresized( 5 );
    tmp_source_name_166 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_166 == NULL ))
    {
        tmp_source_name_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_166 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 332;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_56 = LOOKUP_ATTRIBUTE( tmp_source_name_166, const_str_plain_GL );
    if ( tmp_dict_value_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );

        exception_lineno = 332;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_56 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_56, tmp_dict_value_56 );
    Py_DECREF( tmp_dict_value_56 );
    tmp_dict_value_57 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_57 == NULL ))
    {
        tmp_dict_value_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_57 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 332;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_57 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_57, tmp_dict_value_57 );
    tmp_dict_value_58 = PyList_New( 4 );
    tmp_called_name_172 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_172 == NULL ))
    {
        tmp_called_name_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_172 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_30 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_30 == NULL ))
    {
        tmp_args_element_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_30 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 333;
    {
        PyObject *call_args[] = { tmp_args_element_name_30 };
        tmp_list_element_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_172, call_args );
    }

    if ( tmp_list_element_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_58, 0, tmp_list_element_16 );
    tmp_list_element_16 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_list_element_16 == NULL ))
    {
        tmp_list_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_list_element_16 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_16 );
    PyList_SET_ITEM( tmp_dict_value_58, 1, tmp_list_element_16 );
    tmp_list_element_16 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_16 == NULL ))
    {
        tmp_list_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_16 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_16 );
    PyList_SET_ITEM( tmp_dict_value_58, 2, tmp_list_element_16 );
    tmp_called_name_173 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_173 == NULL ))
    {
        tmp_called_name_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_173 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_31 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_31 == NULL ))
    {
        tmp_args_element_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_31 == NULL )
    {
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 333;
    {
        PyObject *call_args[] = { tmp_args_element_name_31 };
        tmp_list_element_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_173, call_args );
    }

    if ( tmp_list_element_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_171 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_dict_value_58 );

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_58, 3, tmp_list_element_16 );
    tmp_dict_key_58 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_58, tmp_dict_value_58 );
    Py_DECREF( tmp_dict_value_58 );
    tmp_dict_value_59 = const_str_digest_9639ba8a35f8481bb526bdc55ef64d73;
    tmp_dict_key_59 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_59, tmp_dict_value_59 );
    tmp_dict_value_60 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_empty_list );
    tmp_dict_key_60 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_60, tmp_dict_value_60 );
    Py_DECREF( tmp_dict_value_60 );
    frame_module->f_lineno = 335;
    tmp_assign_source_195 = CALL_FUNCTION( tmp_called_name_171, tmp_args_name_12, tmp_kw_name_12 );
    Py_DECREF( tmp_called_name_171 );
    Py_DECREF( tmp_kw_name_12 );
    if ( tmp_assign_source_195 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetFBConfigAttribSGIX, tmp_assign_source_195 );
    tmp_source_name_167 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_167 == NULL ))
    {
        tmp_source_name_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_167 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 338;
        goto frame_exception_exit_1;
    }

    tmp_called_name_174 = LOOKUP_ATTRIBUTE( tmp_source_name_167, const_str_plain_createBaseFunction );
    if ( tmp_called_name_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 338;
        goto frame_exception_exit_1;
    }
    tmp_args_name_13 = const_tuple_str_plain_glXChooseFBConfigSGIX_tuple;
    tmp_kw_name_13 = _PyDict_NewPresized( 5 );
    tmp_source_name_168 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_168 == NULL ))
    {
        tmp_source_name_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_168 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_61 = LOOKUP_ATTRIBUTE( tmp_source_name_168, const_str_plain_GL );
    if ( tmp_dict_value_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_61 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_13, tmp_dict_key_61, tmp_dict_value_61 );
    Py_DECREF( tmp_dict_value_61 );
    tmp_called_name_175 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_175 == NULL ))
    {
        tmp_called_name_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_175 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_args_element_name_32 == NULL ))
    {
        tmp_args_element_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_args_element_name_32 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 339;
    {
        PyObject *call_args[] = { tmp_args_element_name_32 };
        tmp_dict_value_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_175, call_args );
    }

    if ( tmp_dict_value_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_62 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_13, tmp_dict_key_62, tmp_dict_value_62 );
    Py_DECREF( tmp_dict_value_62 );
    tmp_dict_value_63 = PyList_New( 4 );
    tmp_called_name_176 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_176 == NULL ))
    {
        tmp_called_name_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_176 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_33 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_33 == NULL ))
    {
        tmp_args_element_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_33 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 340;
    {
        PyObject *call_args[] = { tmp_args_element_name_33 };
        tmp_list_element_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_176, call_args );
    }

    if ( tmp_list_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_63, 0, tmp_list_element_17 );
    tmp_list_element_17 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_17 == NULL ))
    {
        tmp_list_element_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_17 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_17 );
    PyList_SET_ITEM( tmp_dict_value_63, 1, tmp_list_element_17 );
    tmp_called_name_177 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_177 == NULL ))
    {
        tmp_called_name_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_177 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_34 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_34 == NULL ))
    {
        tmp_args_element_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_34 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 340;
    {
        PyObject *call_args[] = { tmp_args_element_name_34 };
        tmp_list_element_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_177, call_args );
    }

    if ( tmp_list_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_63, 2, tmp_list_element_17 );
    tmp_called_name_178 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_178 == NULL ))
    {
        tmp_called_name_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_178 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_35 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_35 == NULL ))
    {
        tmp_args_element_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_35 == NULL )
    {
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 340;
    {
        PyObject *call_args[] = { tmp_args_element_name_35 };
        tmp_list_element_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_178, call_args );
    }

    if ( tmp_list_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_174 );
        Py_DECREF( tmp_kw_name_13 );
        Py_DECREF( tmp_dict_value_63 );

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_63, 3, tmp_list_element_17 );
    tmp_dict_key_63 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_13, tmp_dict_key_63, tmp_dict_value_63 );
    Py_DECREF( tmp_dict_value_63 );
    tmp_dict_value_64 = const_str_digest_0862a32dedc63e1ec910ec10aa5ab661;
    tmp_dict_key_64 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_13, tmp_dict_key_64, tmp_dict_value_64 );
    tmp_dict_value_65 = LIST_COPY( const_list_str_empty_str_plain_None_str_empty_str_empty_list );
    tmp_dict_key_65 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_13, tmp_dict_key_65, tmp_dict_value_65 );
    Py_DECREF( tmp_dict_value_65 );
    frame_module->f_lineno = 342;
    tmp_assign_source_196 = CALL_FUNCTION( tmp_called_name_174, tmp_args_name_13, tmp_kw_name_13 );
    Py_DECREF( tmp_called_name_174 );
    Py_DECREF( tmp_kw_name_13 );
    if ( tmp_assign_source_196 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 342;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXChooseFBConfigSGIX, tmp_assign_source_196 );
    tmp_assign_source_197 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_197 == NULL ))
    {
        tmp_assign_source_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_197 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 345;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPixmap, tmp_assign_source_197 );
    tmp_assign_source_198 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_198 == NULL ))
    {
        tmp_assign_source_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_198 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 346;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Pixmap, tmp_assign_source_198 );
    tmp_source_name_169 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_169 == NULL ))
    {
        tmp_source_name_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_169 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 347;
        goto frame_exception_exit_1;
    }

    tmp_called_name_179 = LOOKUP_ATTRIBUTE( tmp_source_name_169, const_str_plain_createBaseFunction );
    if ( tmp_called_name_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 347;
        goto frame_exception_exit_1;
    }
    tmp_args_name_14 = const_tuple_str_plain_glXCreateGLXPixmapWithConfigSGIX_tuple;
    tmp_kw_name_14 = _PyDict_NewPresized( 5 );
    tmp_source_name_170 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_170 == NULL ))
    {
        tmp_source_name_170 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_170 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 348;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_66 = LOOKUP_ATTRIBUTE( tmp_source_name_170, const_str_plain_GL );
    if ( tmp_dict_value_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );

        exception_lineno = 348;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_66 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_14, tmp_dict_key_66, tmp_dict_value_66 );
    Py_DECREF( tmp_dict_value_66 );
    tmp_dict_value_67 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPixmap );

    if (unlikely( tmp_dict_value_67 == NULL ))
    {
        tmp_dict_value_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPixmap );
    }

    if ( tmp_dict_value_67 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPixmap" );
        exception_tb = NULL;

        exception_lineno = 348;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_67 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_14, tmp_dict_key_67, tmp_dict_value_67 );
    tmp_dict_value_68 = PyList_New( 3 );
    tmp_called_name_180 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_180 == NULL ))
    {
        tmp_called_name_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_180 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        Py_DECREF( tmp_dict_value_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 349;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_36 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_36 == NULL ))
    {
        tmp_args_element_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_36 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        Py_DECREF( tmp_dict_value_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 349;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 349;
    {
        PyObject *call_args[] = { tmp_args_element_name_36 };
        tmp_list_element_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_180, call_args );
    }

    if ( tmp_list_element_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        Py_DECREF( tmp_dict_value_68 );

        exception_lineno = 349;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_68, 0, tmp_list_element_18 );
    tmp_list_element_18 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_list_element_18 == NULL ))
    {
        tmp_list_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_list_element_18 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        Py_DECREF( tmp_dict_value_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 349;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_18 );
    PyList_SET_ITEM( tmp_dict_value_68, 1, tmp_list_element_18 );
    tmp_list_element_18 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Pixmap );

    if (unlikely( tmp_list_element_18 == NULL ))
    {
        tmp_list_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Pixmap );
    }

    if ( tmp_list_element_18 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        Py_DECREF( tmp_kw_name_14 );
        Py_DECREF( tmp_dict_value_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Pixmap" );
        exception_tb = NULL;

        exception_lineno = 349;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_18 );
    PyList_SET_ITEM( tmp_dict_value_68, 2, tmp_list_element_18 );
    tmp_dict_key_68 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_14, tmp_dict_key_68, tmp_dict_value_68 );
    Py_DECREF( tmp_dict_value_68 );
    tmp_dict_value_69 = const_str_digest_4c92db23bfdcbc1b6157286eaafd8a42;
    tmp_dict_key_69 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_14, tmp_dict_key_69, tmp_dict_value_69 );
    tmp_dict_value_70 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_list );
    tmp_dict_key_70 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_14, tmp_dict_key_70, tmp_dict_value_70 );
    Py_DECREF( tmp_dict_value_70 );
    frame_module->f_lineno = 351;
    tmp_assign_source_199 = CALL_FUNCTION( tmp_called_name_179, tmp_args_name_14, tmp_kw_name_14 );
    Py_DECREF( tmp_called_name_179 );
    Py_DECREF( tmp_kw_name_14 );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 351;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXCreateGLXPixmapWithConfigSGIX, tmp_assign_source_199 );
    tmp_source_name_171 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_171 == NULL ))
    {
        tmp_source_name_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_171 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 354;
        goto frame_exception_exit_1;
    }

    tmp_called_name_181 = LOOKUP_ATTRIBUTE( tmp_source_name_171, const_str_plain_createBaseFunction );
    if ( tmp_called_name_181 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;
        goto frame_exception_exit_1;
    }
    tmp_args_name_15 = const_tuple_str_plain_glXCreateContextWithConfigSGIX_tuple;
    tmp_kw_name_15 = _PyDict_NewPresized( 5 );
    tmp_source_name_172 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_172 == NULL ))
    {
        tmp_source_name_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_172 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 355;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_71 = LOOKUP_ATTRIBUTE( tmp_source_name_172, const_str_plain_GL );
    if ( tmp_dict_value_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );

        exception_lineno = 355;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_71 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_15, tmp_dict_key_71, tmp_dict_value_71 );
    Py_DECREF( tmp_dict_value_71 );
    tmp_dict_value_72 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_dict_value_72 == NULL ))
    {
        tmp_dict_value_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_dict_value_72 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 355;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_72 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_15, tmp_dict_key_72, tmp_dict_value_72 );
    tmp_dict_value_73 = PyList_New( 5 );
    tmp_called_name_182 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_182 == NULL ))
    {
        tmp_called_name_182 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_182 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_37 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_37 == NULL ))
    {
        tmp_args_element_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_37 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 356;
    {
        PyObject *call_args[] = { tmp_args_element_name_37 };
        tmp_list_element_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_182, call_args );
    }

    if ( tmp_list_element_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_73, 0, tmp_list_element_19 );
    tmp_list_element_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_list_element_19 == NULL ))
    {
        tmp_list_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_list_element_19 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_19 );
    PyList_SET_ITEM( tmp_dict_value_73, 1, tmp_list_element_19 );
    tmp_list_element_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_19 == NULL ))
    {
        tmp_list_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_19 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_19 );
    PyList_SET_ITEM( tmp_dict_value_73, 2, tmp_list_element_19 );
    tmp_list_element_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXContext );

    if (unlikely( tmp_list_element_19 == NULL ))
    {
        tmp_list_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXContext );
    }

    if ( tmp_list_element_19 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXContext" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_19 );
    PyList_SET_ITEM( tmp_dict_value_73, 3, tmp_list_element_19 );
    tmp_list_element_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_19 == NULL ))
    {
        tmp_list_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_19 == NULL )
    {
        Py_DECREF( tmp_called_name_181 );
        Py_DECREF( tmp_kw_name_15 );
        Py_DECREF( tmp_dict_value_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_19 );
    PyList_SET_ITEM( tmp_dict_value_73, 4, tmp_list_element_19 );
    tmp_dict_key_73 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_15, tmp_dict_key_73, tmp_dict_value_73 );
    Py_DECREF( tmp_dict_value_73 );
    tmp_dict_value_74 = const_str_digest_144d15b945e47bf269d060282dd81f87;
    tmp_dict_key_74 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_15, tmp_dict_key_74, tmp_dict_value_74 );
    tmp_dict_value_75 = LIST_COPY( const_list_29c8c37838f12b34e1d058b558f46607_list );
    tmp_dict_key_75 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_15, tmp_dict_key_75, tmp_dict_value_75 );
    Py_DECREF( tmp_dict_value_75 );
    frame_module->f_lineno = 358;
    tmp_assign_source_200 = CALL_FUNCTION( tmp_called_name_181, tmp_args_name_15, tmp_kw_name_15 );
    Py_DECREF( tmp_called_name_181 );
    Py_DECREF( tmp_kw_name_15 );
    if ( tmp_assign_source_200 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 358;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXCreateContextWithConfigSGIX, tmp_assign_source_200 );
    // Tried code:
    tmp_assign_source_201 = PyTuple_New( 1 );
    tmp_tuple_element_13 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_13 == NULL ))
    {
        tmp_tuple_element_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_201 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 361;
        goto try_except_handler_7;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_assign_source_201, 0, tmp_tuple_element_13 );
    assert( tmp_class_creation_7__bases == NULL );
    tmp_class_creation_7__bases = tmp_assign_source_201;

    tmp_assign_source_202 = impl_OpenGL$raw$_GLX_NV$$$class_7_struct_anon_103( NULL );
    assert( tmp_assign_source_202 != NULL );
    assert( tmp_class_creation_7__class_dict == NULL );
    tmp_class_creation_7__class_dict = tmp_assign_source_202;

    tmp_compare_left_7 = const_str_plain___metaclass__;
    tmp_compare_right_7 = tmp_class_creation_7__class_dict;

    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dict_name_7 = tmp_class_creation_7__class_dict;

    tmp_key_name_7 = const_str_plain___metaclass__;
    tmp_assign_source_203 = DICT_GET_ITEM( tmp_dict_name_7, tmp_key_name_7 );
    if ( tmp_assign_source_203 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 361;
        goto try_except_handler_7;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_bases_name_7 = tmp_class_creation_7__bases;

    tmp_assign_source_203 = SELECT_METACLASS( tmp_bases_name_7, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_7:;
    assert( tmp_class_creation_7__metaclass == NULL );
    tmp_class_creation_7__metaclass = tmp_assign_source_203;

    tmp_called_name_183 = tmp_class_creation_7__metaclass;

    tmp_args_element_name_38 = const_str_plain_struct_anon_103;
    tmp_args_element_name_39 = tmp_class_creation_7__bases;

    tmp_args_element_name_40 = tmp_class_creation_7__class_dict;

    frame_module->f_lineno = 361;
    {
        PyObject *call_args[] = { tmp_args_element_name_38, tmp_args_element_name_39, tmp_args_element_name_40 };
        tmp_assign_source_204 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_183, call_args );
    }

    if ( tmp_assign_source_204 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 361;
        goto try_except_handler_7;
    }
    assert( tmp_class_creation_7__class == NULL );
    tmp_class_creation_7__class = tmp_assign_source_204;

    goto try_end_7;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    tmp_assign_source_205 = tmp_class_creation_7__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_103, tmp_assign_source_205 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class );
    Py_DECREF( tmp_class_creation_7__class );
    tmp_class_creation_7__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_dict );
    Py_DECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Tried code:
    tmp_assign_source_206 = PyTuple_New( 1 );
    tmp_tuple_element_14 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_14 == NULL ))
    {
        tmp_tuple_element_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_206 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 374;
        goto try_except_handler_8;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_assign_source_206, 0, tmp_tuple_element_14 );
    assert( tmp_class_creation_8__bases == NULL );
    tmp_class_creation_8__bases = tmp_assign_source_206;

    tmp_assign_source_207 = impl_OpenGL$raw$_GLX_NV$$$class_8_struct_anon_18( NULL );
    assert( tmp_assign_source_207 != NULL );
    assert( tmp_class_creation_8__class_dict == NULL );
    tmp_class_creation_8__class_dict = tmp_assign_source_207;

    tmp_compare_left_8 = const_str_plain___metaclass__;
    tmp_compare_right_8 = tmp_class_creation_8__class_dict;

    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_dict_name_8 = tmp_class_creation_8__class_dict;

    tmp_key_name_8 = const_str_plain___metaclass__;
    tmp_assign_source_208 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
    if ( tmp_assign_source_208 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 374;
        goto try_except_handler_8;
    }
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_bases_name_8 = tmp_class_creation_8__bases;

    tmp_assign_source_208 = SELECT_METACLASS( tmp_bases_name_8, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_8:;
    assert( tmp_class_creation_8__metaclass == NULL );
    tmp_class_creation_8__metaclass = tmp_assign_source_208;

    tmp_called_name_184 = tmp_class_creation_8__metaclass;

    tmp_args_element_name_41 = const_str_plain_struct_anon_18;
    tmp_args_element_name_42 = tmp_class_creation_8__bases;

    tmp_args_element_name_43 = tmp_class_creation_8__class_dict;

    frame_module->f_lineno = 374;
    {
        PyObject *call_args[] = { tmp_args_element_name_41, tmp_args_element_name_42, tmp_args_element_name_43 };
        tmp_assign_source_209 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_184, call_args );
    }

    if ( tmp_assign_source_209 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 374;
        goto try_except_handler_8;
    }
    assert( tmp_class_creation_8__class == NULL );
    tmp_class_creation_8__class = tmp_assign_source_209;

    goto try_end_8;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    tmp_assign_source_210 = tmp_class_creation_8__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_18, tmp_assign_source_210 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class );
    Py_DECREF( tmp_class_creation_8__class );
    tmp_class_creation_8__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases );
    Py_DECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class_dict );
    Py_DECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__metaclass );
    Py_DECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Tried code:
    tmp_assign_source_211 = PyTuple_New( 1 );
    tmp_tuple_element_15 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_15 == NULL ))
    {
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_211 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 385;
        goto try_except_handler_9;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_assign_source_211, 0, tmp_tuple_element_15 );
    assert( tmp_class_creation_9__bases == NULL );
    tmp_class_creation_9__bases = tmp_assign_source_211;

    tmp_assign_source_212 = impl_OpenGL$raw$_GLX_NV$$$class_9_struct__XExtData( NULL );
    assert( tmp_assign_source_212 != NULL );
    assert( tmp_class_creation_9__class_dict == NULL );
    tmp_class_creation_9__class_dict = tmp_assign_source_212;

    tmp_compare_left_9 = const_str_plain___metaclass__;
    tmp_compare_right_9 = tmp_class_creation_9__class_dict;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_dict_name_9 = tmp_class_creation_9__class_dict;

    tmp_key_name_9 = const_str_plain___metaclass__;
    tmp_assign_source_213 = DICT_GET_ITEM( tmp_dict_name_9, tmp_key_name_9 );
    if ( tmp_assign_source_213 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 385;
        goto try_except_handler_9;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_bases_name_9 = tmp_class_creation_9__bases;

    tmp_assign_source_213 = SELECT_METACLASS( tmp_bases_name_9, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_9:;
    assert( tmp_class_creation_9__metaclass == NULL );
    tmp_class_creation_9__metaclass = tmp_assign_source_213;

    tmp_called_name_185 = tmp_class_creation_9__metaclass;

    tmp_args_element_name_44 = const_str_plain_struct__XExtData;
    tmp_args_element_name_45 = tmp_class_creation_9__bases;

    tmp_args_element_name_46 = tmp_class_creation_9__class_dict;

    frame_module->f_lineno = 385;
    {
        PyObject *call_args[] = { tmp_args_element_name_44, tmp_args_element_name_45, tmp_args_element_name_46 };
        tmp_assign_source_214 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_185, call_args );
    }

    if ( tmp_assign_source_214 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 385;
        goto try_except_handler_9;
    }
    assert( tmp_class_creation_9__class == NULL );
    tmp_class_creation_9__class = tmp_assign_source_214;

    goto try_end_9;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    tmp_assign_source_215 = tmp_class_creation_9__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XExtData, tmp_assign_source_215 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class );
    Py_DECREF( tmp_class_creation_9__class );
    tmp_class_creation_9__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases );
    Py_DECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class_dict );
    Py_DECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__metaclass );
    Py_DECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    tmp_assign_source_216 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_char_p );

    if (unlikely( tmp_assign_source_216 == NULL ))
    {
        tmp_assign_source_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_char_p );
    }

    if ( tmp_assign_source_216 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_char_p" );
        exception_tb = NULL;

        exception_lineno = 392;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XPointer, tmp_assign_source_216 );
    tmp_assattr_name_7 = PyList_New( 4 );
    tmp_list_element_20 = PyTuple_New( 2 );
    tmp_tuple_element_16 = const_str_plain_number;
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_list_element_20, 0, tmp_tuple_element_16 );
    tmp_tuple_element_16 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_16 == NULL ))
    {
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_16 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 394;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_list_element_20, 1, tmp_tuple_element_16 );
    PyList_SET_ITEM( tmp_assattr_name_7, 0, tmp_list_element_20 );
    tmp_list_element_20 = PyTuple_New( 2 );
    tmp_tuple_element_17 = const_str_plain_next;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_list_element_20, 0, tmp_tuple_element_17 );
    tmp_called_name_186 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_186 == NULL ))
    {
        tmp_called_name_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_186 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XExtData );

    if (unlikely( tmp_args_element_name_47 == NULL ))
    {
        tmp_args_element_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XExtData );
    }

    if ( tmp_args_element_name_47 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XExtData" );
        exception_tb = NULL;

        exception_lineno = 395;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 395;
    {
        PyObject *call_args[] = { tmp_args_element_name_47 };
        tmp_tuple_element_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_186, call_args );
    }

    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );

        exception_lineno = 395;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_20, 1, tmp_tuple_element_17 );
    PyList_SET_ITEM( tmp_assattr_name_7, 1, tmp_list_element_20 );
    tmp_list_element_20 = PyTuple_New( 2 );
    tmp_tuple_element_18 = const_str_plain_free_private;
    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_list_element_20, 0, tmp_tuple_element_18 );
    tmp_called_name_187 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_187 == NULL ))
    {
        tmp_called_name_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_187 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }

    tmp_called_name_188 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_CFUNCTYPE );

    if (unlikely( tmp_called_name_188 == NULL ))
    {
        tmp_called_name_188 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CFUNCTYPE );
    }

    if ( tmp_called_name_188 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "CFUNCTYPE" );
        exception_tb = NULL;

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_49 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_49 == NULL ))
    {
        tmp_args_element_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_49 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }

    tmp_called_name_189 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_189 == NULL ))
    {
        tmp_called_name_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_189 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_51 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XExtData );

    if (unlikely( tmp_args_element_name_51 == NULL ))
    {
        tmp_args_element_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XExtData );
    }

    if ( tmp_args_element_name_51 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XExtData" );
        exception_tb = NULL;

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 396;
    {
        PyObject *call_args[] = { tmp_args_element_name_51 };
        tmp_args_element_name_50 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_189, call_args );
    }

    if ( tmp_args_element_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 396;
    {
        PyObject *call_args[] = { tmp_args_element_name_49, tmp_args_element_name_50 };
        tmp_args_element_name_48 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_188, call_args );
    }

    Py_DECREF( tmp_args_element_name_50 );
    if ( tmp_args_element_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 396;
    {
        PyObject *call_args[] = { tmp_args_element_name_48 };
        tmp_tuple_element_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_187, call_args );
    }

    Py_DECREF( tmp_args_element_name_48 );
    if ( tmp_tuple_element_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_20, 1, tmp_tuple_element_18 );
    PyList_SET_ITEM( tmp_assattr_name_7, 2, tmp_list_element_20 );
    tmp_list_element_20 = PyTuple_New( 2 );
    tmp_tuple_element_19 = const_str_plain_private_data;
    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_list_element_20, 0, tmp_tuple_element_19 );
    tmp_tuple_element_19 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XPointer );

    if (unlikely( tmp_tuple_element_19 == NULL ))
    {
        tmp_tuple_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XPointer );
    }

    if ( tmp_tuple_element_19 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XPointer" );
        exception_tb = NULL;

        exception_lineno = 397;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_list_element_20, 1, tmp_tuple_element_19 );
    PyList_SET_ITEM( tmp_assattr_name_7, 3, tmp_list_element_20 );
    tmp_assattr_target_7 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XExtData );

    if (unlikely( tmp_assattr_target_7 == NULL ))
    {
        tmp_assattr_target_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XExtData );
    }

    if ( tmp_assattr_target_7 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XExtData" );
        exception_tb = NULL;

        exception_lineno = 393;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain__fields_, tmp_assattr_name_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );

        exception_lineno = 393;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_7 );
    tmp_assign_source_217 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct__XExtData );

    if (unlikely( tmp_assign_source_217 == NULL ))
    {
        tmp_assign_source_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct__XExtData );
    }

    if ( tmp_assign_source_217 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct__XExtData" );
        exception_tb = NULL;

        exception_lineno = 400;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XExtData, tmp_assign_source_217 );
    tmp_assign_source_218 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_assign_source_218 == NULL ))
    {
        tmp_assign_source_218 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_assign_source_218 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 401;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_VisualID, tmp_assign_source_218 );
    tmp_assattr_name_8 = PyList_New( 8 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_20 = const_str_plain_ext_data;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_20 );
    tmp_called_name_190 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_190 == NULL ))
    {
        tmp_called_name_190 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_190 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_52 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XExtData );

    if (unlikely( tmp_args_element_name_52 == NULL ))
    {
        tmp_args_element_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XExtData );
    }

    if ( tmp_args_element_name_52 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XExtData" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 403;
    {
        PyObject *call_args[] = { tmp_args_element_name_52 };
        tmp_tuple_element_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_190, call_args );
    }

    if ( tmp_tuple_element_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_20 );
    PyList_SET_ITEM( tmp_assattr_name_8, 0, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_21 = const_str_plain_visualid;
    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_21 );
    tmp_tuple_element_21 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_VisualID );

    if (unlikely( tmp_tuple_element_21 == NULL ))
    {
        tmp_tuple_element_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_VisualID );
    }

    if ( tmp_tuple_element_21 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "VisualID" );
        exception_tb = NULL;

        exception_lineno = 404;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_21 );
    PyList_SET_ITEM( tmp_assattr_name_8, 1, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_22 = const_str_plain_class;
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_22 );
    tmp_tuple_element_22 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_22 == NULL ))
    {
        tmp_tuple_element_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_22 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 405;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_22 );
    PyList_SET_ITEM( tmp_assattr_name_8, 2, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_23 = const_str_plain_red_mask;
    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_23 );
    tmp_tuple_element_23 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_tuple_element_23 == NULL ))
    {
        tmp_tuple_element_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_tuple_element_23 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 406;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_23 );
    PyList_SET_ITEM( tmp_assattr_name_8, 3, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_24 = const_str_plain_green_mask;
    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_24 );
    tmp_tuple_element_24 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_tuple_element_24 == NULL ))
    {
        tmp_tuple_element_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_tuple_element_24 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_24 );
    PyList_SET_ITEM( tmp_assattr_name_8, 4, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_25 = const_str_plain_blue_mask;
    Py_INCREF( tmp_tuple_element_25 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_25 );
    tmp_tuple_element_25 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_tuple_element_25 == NULL ))
    {
        tmp_tuple_element_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_tuple_element_25 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_25 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_25 );
    PyList_SET_ITEM( tmp_assattr_name_8, 5, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_26 = const_str_plain_bits_per_rgb;
    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_26 );
    tmp_tuple_element_26 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_26 == NULL ))
    {
        tmp_tuple_element_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_26 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_26 );
    PyList_SET_ITEM( tmp_assattr_name_8, 6, tmp_list_element_21 );
    tmp_list_element_21 = PyTuple_New( 2 );
    tmp_tuple_element_27 = const_str_plain_map_entries;
    Py_INCREF( tmp_tuple_element_27 );
    PyTuple_SET_ITEM( tmp_list_element_21, 0, tmp_tuple_element_27 );
    tmp_tuple_element_27 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_27 == NULL ))
    {
        tmp_tuple_element_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_27 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 410;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_27 );
    PyTuple_SET_ITEM( tmp_list_element_21, 1, tmp_tuple_element_27 );
    PyList_SET_ITEM( tmp_assattr_name_8, 7, tmp_list_element_21 );
    tmp_assattr_target_8 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_18 );

    if (unlikely( tmp_assattr_target_8 == NULL ))
    {
        tmp_assattr_target_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_18 );
    }

    if ( tmp_assattr_target_8 == NULL )
    {
        Py_DECREF( tmp_assattr_name_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_18" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain__fields_, tmp_assattr_name_8 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_8 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_8 );
    tmp_assign_source_219 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_18 );

    if (unlikely( tmp_assign_source_219 == NULL ))
    {
        tmp_assign_source_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_18 );
    }

    if ( tmp_assign_source_219 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_18" );
        exception_tb = NULL;

        exception_lineno = 413;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Visual, tmp_assign_source_219 );
    tmp_assattr_name_9 = PyList_New( 10 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_28 = const_str_plain_visual;
    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_28 );
    tmp_called_name_191 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_191 == NULL ))
    {
        tmp_called_name_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_191 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_53 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Visual );

    if (unlikely( tmp_args_element_name_53 == NULL ))
    {
        tmp_args_element_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Visual );
    }

    if ( tmp_args_element_name_53 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Visual" );
        exception_tb = NULL;

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 415;
    {
        PyObject *call_args[] = { tmp_args_element_name_53 };
        tmp_tuple_element_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_191, call_args );
    }

    if ( tmp_tuple_element_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_28 );
    PyList_SET_ITEM( tmp_assattr_name_9, 0, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_29 = const_str_plain_visualid;
    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_29 );
    tmp_tuple_element_29 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_VisualID );

    if (unlikely( tmp_tuple_element_29 == NULL ))
    {
        tmp_tuple_element_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_VisualID );
    }

    if ( tmp_tuple_element_29 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "VisualID" );
        exception_tb = NULL;

        exception_lineno = 416;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_29 );
    PyList_SET_ITEM( tmp_assattr_name_9, 1, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_30 = const_str_plain_screen;
    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_30 );
    tmp_tuple_element_30 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_30 == NULL ))
    {
        tmp_tuple_element_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_30 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 417;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_30 );
    PyList_SET_ITEM( tmp_assattr_name_9, 2, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_31 = const_str_plain_depth;
    Py_INCREF( tmp_tuple_element_31 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_31 );
    tmp_tuple_element_31 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_31 == NULL ))
    {
        tmp_tuple_element_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_31 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 418;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_31 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_31 );
    PyList_SET_ITEM( tmp_assattr_name_9, 3, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_32 = const_str_plain_class;
    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_32 );
    tmp_tuple_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_32 == NULL ))
    {
        tmp_tuple_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_32 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 419;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_32 );
    PyList_SET_ITEM( tmp_assattr_name_9, 4, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_33 = const_str_plain_red_mask;
    Py_INCREF( tmp_tuple_element_33 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_33 );
    tmp_tuple_element_33 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_tuple_element_33 == NULL ))
    {
        tmp_tuple_element_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_tuple_element_33 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 420;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_33 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_33 );
    PyList_SET_ITEM( tmp_assattr_name_9, 5, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_34 = const_str_plain_green_mask;
    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_34 );
    tmp_tuple_element_34 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_tuple_element_34 == NULL ))
    {
        tmp_tuple_element_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_tuple_element_34 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 421;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_34 );
    PyList_SET_ITEM( tmp_assattr_name_9, 6, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_35 = const_str_plain_blue_mask;
    Py_INCREF( tmp_tuple_element_35 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_35 );
    tmp_tuple_element_35 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_tuple_element_35 == NULL ))
    {
        tmp_tuple_element_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_tuple_element_35 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_35 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_35 );
    PyList_SET_ITEM( tmp_assattr_name_9, 7, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_36 = const_str_plain_colormap_size;
    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_36 );
    tmp_tuple_element_36 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_36 == NULL ))
    {
        tmp_tuple_element_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_36 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 423;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_36 );
    PyList_SET_ITEM( tmp_assattr_name_9, 8, tmp_list_element_22 );
    tmp_list_element_22 = PyTuple_New( 2 );
    tmp_tuple_element_37 = const_str_plain_bits_per_rgb;
    Py_INCREF( tmp_tuple_element_37 );
    PyTuple_SET_ITEM( tmp_list_element_22, 0, tmp_tuple_element_37 );
    tmp_tuple_element_37 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_37 == NULL ))
    {
        tmp_tuple_element_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_37 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 424;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_37 );
    PyTuple_SET_ITEM( tmp_list_element_22, 1, tmp_tuple_element_37 );
    PyList_SET_ITEM( tmp_assattr_name_9, 9, tmp_list_element_22 );
    tmp_assattr_target_9 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_103 );

    if (unlikely( tmp_assattr_target_9 == NULL ))
    {
        tmp_assattr_target_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_103 );
    }

    if ( tmp_assattr_target_9 == NULL )
    {
        Py_DECREF( tmp_assattr_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_103" );
        exception_tb = NULL;

        exception_lineno = 414;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain__fields_, tmp_assattr_name_9 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_9 );

        exception_lineno = 414;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_9 );
    tmp_assign_source_220 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_103 );

    if (unlikely( tmp_assign_source_220 == NULL ))
    {
        tmp_assign_source_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_103 );
    }

    if ( tmp_assign_source_220 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_103" );
        exception_tb = NULL;

        exception_lineno = 427;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XVisualInfo, tmp_assign_source_220 );
    tmp_source_name_173 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_173 == NULL ))
    {
        tmp_source_name_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_173 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 428;
        goto frame_exception_exit_1;
    }

    tmp_called_name_192 = LOOKUP_ATTRIBUTE( tmp_source_name_173, const_str_plain_createBaseFunction );
    if ( tmp_called_name_192 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 428;
        goto frame_exception_exit_1;
    }
    tmp_args_name_16 = const_tuple_str_plain_glXGetVisualFromFBConfigSGIX_tuple;
    tmp_kw_name_16 = _PyDict_NewPresized( 5 );
    tmp_source_name_174 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_174 == NULL ))
    {
        tmp_source_name_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_174 == NULL )
    {
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 429;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_76 = LOOKUP_ATTRIBUTE( tmp_source_name_174, const_str_plain_GL );
    if ( tmp_dict_value_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );

        exception_lineno = 429;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_76 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_16, tmp_dict_key_76, tmp_dict_value_76 );
    Py_DECREF( tmp_dict_value_76 );
    tmp_called_name_193 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_193 == NULL ))
    {
        tmp_called_name_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_193 == NULL )
    {
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 429;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_54 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XVisualInfo );

    if (unlikely( tmp_args_element_name_54 == NULL ))
    {
        tmp_args_element_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XVisualInfo );
    }

    if ( tmp_args_element_name_54 == NULL )
    {
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XVisualInfo" );
        exception_tb = NULL;

        exception_lineno = 429;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 429;
    {
        PyObject *call_args[] = { tmp_args_element_name_54 };
        tmp_dict_value_77 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_193, call_args );
    }

    if ( tmp_dict_value_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );

        exception_lineno = 429;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_77 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_16, tmp_dict_key_77, tmp_dict_value_77 );
    Py_DECREF( tmp_dict_value_77 );
    tmp_dict_value_78 = PyList_New( 2 );
    tmp_called_name_194 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_194 == NULL ))
    {
        tmp_called_name_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_194 == NULL )
    {
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        Py_DECREF( tmp_dict_value_78 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_55 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_55 == NULL ))
    {
        tmp_args_element_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_55 == NULL )
    {
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        Py_DECREF( tmp_dict_value_78 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 430;
    {
        PyObject *call_args[] = { tmp_args_element_name_55 };
        tmp_list_element_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_194, call_args );
    }

    if ( tmp_list_element_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        Py_DECREF( tmp_dict_value_78 );

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_78, 0, tmp_list_element_23 );
    tmp_list_element_23 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_list_element_23 == NULL ))
    {
        tmp_list_element_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_list_element_23 == NULL )
    {
        Py_DECREF( tmp_called_name_192 );
        Py_DECREF( tmp_kw_name_16 );
        Py_DECREF( tmp_dict_value_78 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_23 );
    PyList_SET_ITEM( tmp_dict_value_78, 1, tmp_list_element_23 );
    tmp_dict_key_78 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_16, tmp_dict_key_78, tmp_dict_value_78 );
    Py_DECREF( tmp_dict_value_78 );
    tmp_dict_value_79 = const_str_digest_6c3cb2714b62b663489e76369724a48d;
    tmp_dict_key_79 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_16, tmp_dict_key_79, tmp_dict_value_79 );
    tmp_dict_value_80 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_80 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_16, tmp_dict_key_80, tmp_dict_value_80 );
    Py_DECREF( tmp_dict_value_80 );
    frame_module->f_lineno = 432;
    tmp_assign_source_221 = CALL_FUNCTION( tmp_called_name_192, tmp_args_name_16, tmp_kw_name_16 );
    Py_DECREF( tmp_called_name_192 );
    Py_DECREF( tmp_kw_name_16 );
    if ( tmp_assign_source_221 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 432;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetVisualFromFBConfigSGIX, tmp_assign_source_221 );
    tmp_source_name_175 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_175 == NULL ))
    {
        tmp_source_name_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_175 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 435;
        goto frame_exception_exit_1;
    }

    tmp_called_name_195 = LOOKUP_ATTRIBUTE( tmp_source_name_175, const_str_plain_createBaseFunction );
    if ( tmp_called_name_195 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 435;
        goto frame_exception_exit_1;
    }
    tmp_args_name_17 = const_tuple_str_plain_glXGetFBConfigFromVisualSGIX_tuple;
    tmp_kw_name_17 = _PyDict_NewPresized( 5 );
    tmp_source_name_176 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_176 == NULL ))
    {
        tmp_source_name_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_176 == NULL )
    {
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 436;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_81 = LOOKUP_ATTRIBUTE( tmp_source_name_176, const_str_plain_GL );
    if ( tmp_dict_value_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );

        exception_lineno = 436;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_81 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_17, tmp_dict_key_81, tmp_dict_value_81 );
    Py_DECREF( tmp_dict_value_81 );
    tmp_dict_value_82 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_dict_value_82 == NULL ))
    {
        tmp_dict_value_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_dict_value_82 == NULL )
    {
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 436;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_82 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_17, tmp_dict_key_82, tmp_dict_value_82 );
    tmp_dict_value_83 = PyList_New( 2 );
    tmp_called_name_196 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_196 == NULL ))
    {
        tmp_called_name_196 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_196 == NULL )
    {
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        Py_DECREF( tmp_dict_value_83 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_56 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_56 == NULL ))
    {
        tmp_args_element_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_56 == NULL )
    {
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        Py_DECREF( tmp_dict_value_83 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 437;
    {
        PyObject *call_args[] = { tmp_args_element_name_56 };
        tmp_list_element_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_196, call_args );
    }

    if ( tmp_list_element_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        Py_DECREF( tmp_dict_value_83 );

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_83, 0, tmp_list_element_24 );
    tmp_called_name_197 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_197 == NULL ))
    {
        tmp_called_name_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_197 == NULL )
    {
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        Py_DECREF( tmp_dict_value_83 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_57 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XVisualInfo );

    if (unlikely( tmp_args_element_name_57 == NULL ))
    {
        tmp_args_element_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XVisualInfo );
    }

    if ( tmp_args_element_name_57 == NULL )
    {
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        Py_DECREF( tmp_dict_value_83 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XVisualInfo" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 437;
    {
        PyObject *call_args[] = { tmp_args_element_name_57 };
        tmp_list_element_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_197, call_args );
    }

    if ( tmp_list_element_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_195 );
        Py_DECREF( tmp_kw_name_17 );
        Py_DECREF( tmp_dict_value_83 );

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_83, 1, tmp_list_element_24 );
    tmp_dict_key_83 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_17, tmp_dict_key_83, tmp_dict_value_83 );
    Py_DECREF( tmp_dict_value_83 );
    tmp_dict_value_84 = const_str_digest_2c996a1f978a40d29c69b5c8537ddc32;
    tmp_dict_key_84 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_17, tmp_dict_key_84, tmp_dict_value_84 );
    tmp_dict_value_85 = LIST_COPY( const_list_str_empty_str_empty_list );
    tmp_dict_key_85 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_17, tmp_dict_key_85, tmp_dict_value_85 );
    Py_DECREF( tmp_dict_value_85 );
    frame_module->f_lineno = 439;
    tmp_assign_source_222 = CALL_FUNCTION( tmp_called_name_195, tmp_args_name_17, tmp_kw_name_17 );
    Py_DECREF( tmp_called_name_195 );
    Py_DECREF( tmp_kw_name_17 );
    if ( tmp_assign_source_222 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 439;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetFBConfigFromVisualSGIX, tmp_assign_source_222 );
    tmp_source_name_177 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_177 == NULL ))
    {
        tmp_source_name_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_177 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 443;
        goto frame_exception_exit_1;
    }

    tmp_called_name_198 = LOOKUP_ATTRIBUTE( tmp_source_name_177, const_str_plain_Constant );
    if ( tmp_called_name_198 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 443;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 443;
    tmp_assign_source_223 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_198, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_pbuffer_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_198 );
    if ( tmp_assign_source_223 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 443;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_pbuffer, tmp_assign_source_223 );
    tmp_assign_source_224 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_224 == NULL ))
    {
        tmp_assign_source_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_224 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 444;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX, tmp_assign_source_224 );
    tmp_source_name_178 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_178 == NULL ))
    {
        tmp_source_name_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_178 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 445;
        goto frame_exception_exit_1;
    }

    tmp_called_name_199 = LOOKUP_ATTRIBUTE( tmp_source_name_178, const_str_plain_createBaseFunction );
    if ( tmp_called_name_199 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 445;
        goto frame_exception_exit_1;
    }
    tmp_args_name_18 = const_tuple_str_plain_glXCreateGLXPbufferSGIX_tuple;
    tmp_kw_name_18 = _PyDict_NewPresized( 5 );
    tmp_source_name_179 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_179 == NULL ))
    {
        tmp_source_name_179 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_179 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 446;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_86 = LOOKUP_ATTRIBUTE( tmp_source_name_179, const_str_plain_GL );
    if ( tmp_dict_value_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );

        exception_lineno = 446;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_86 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_86, tmp_dict_value_86 );
    Py_DECREF( tmp_dict_value_86 );
    tmp_dict_value_87 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX );

    if (unlikely( tmp_dict_value_87 == NULL ))
    {
        tmp_dict_value_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX );
    }

    if ( tmp_dict_value_87 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPbufferSGIX" );
        exception_tb = NULL;

        exception_lineno = 446;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_87 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_87, tmp_dict_value_87 );
    tmp_dict_value_88 = PyList_New( 5 );
    tmp_called_name_200 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_200 == NULL ))
    {
        tmp_called_name_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_200 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_58 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_58 == NULL ))
    {
        tmp_args_element_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_58 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 447;
    {
        PyObject *call_args[] = { tmp_args_element_name_58 };
        tmp_list_element_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_200, call_args );
    }

    if ( tmp_list_element_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_88, 0, tmp_list_element_25 );
    tmp_list_element_25 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );

    if (unlikely( tmp_list_element_25 == NULL ))
    {
        tmp_list_element_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXFBConfigSGIX );
    }

    if ( tmp_list_element_25 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXFBConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_25 );
    PyList_SET_ITEM( tmp_dict_value_88, 1, tmp_list_element_25 );
    tmp_list_element_25 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_list_element_25 == NULL ))
    {
        tmp_list_element_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_list_element_25 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_25 );
    PyList_SET_ITEM( tmp_dict_value_88, 2, tmp_list_element_25 );
    tmp_list_element_25 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_list_element_25 == NULL ))
    {
        tmp_list_element_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_list_element_25 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_25 );
    PyList_SET_ITEM( tmp_dict_value_88, 3, tmp_list_element_25 );
    tmp_called_name_201 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_201 == NULL ))
    {
        tmp_called_name_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_201 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_59 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_59 == NULL ))
    {
        tmp_args_element_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_59 == NULL )
    {
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 447;
    {
        PyObject *call_args[] = { tmp_args_element_name_59 };
        tmp_list_element_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_201, call_args );
    }

    if ( tmp_list_element_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_199 );
        Py_DECREF( tmp_kw_name_18 );
        Py_DECREF( tmp_dict_value_88 );

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_88, 4, tmp_list_element_25 );
    tmp_dict_key_88 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_88, tmp_dict_value_88 );
    Py_DECREF( tmp_dict_value_88 );
    tmp_dict_value_89 = const_str_digest_4df1276e35a30d1d395df221559845c2;
    tmp_dict_key_89 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_89, tmp_dict_value_89 );
    tmp_dict_value_90 = LIST_COPY( const_list_314788751150d7acc81145c4eab8ab45_list );
    tmp_dict_key_90 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_90, tmp_dict_value_90 );
    Py_DECREF( tmp_dict_value_90 );
    frame_module->f_lineno = 449;
    tmp_assign_source_225 = CALL_FUNCTION( tmp_called_name_199, tmp_args_name_18, tmp_kw_name_18 );
    Py_DECREF( tmp_called_name_199 );
    Py_DECREF( tmp_kw_name_18 );
    if ( tmp_assign_source_225 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 449;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXCreateGLXPbufferSGIX, tmp_assign_source_225 );
    tmp_source_name_180 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_180 == NULL ))
    {
        tmp_source_name_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_180 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 452;
        goto frame_exception_exit_1;
    }

    tmp_called_name_202 = LOOKUP_ATTRIBUTE( tmp_source_name_180, const_str_plain_createBaseFunction );
    if ( tmp_called_name_202 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 452;
        goto frame_exception_exit_1;
    }
    tmp_args_name_19 = const_tuple_str_plain_glXDestroyGLXPbufferSGIX_tuple;
    tmp_kw_name_19 = _PyDict_NewPresized( 5 );
    tmp_source_name_181 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_181 == NULL ))
    {
        tmp_source_name_181 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_181 == NULL )
    {
        Py_DECREF( tmp_called_name_202 );
        Py_DECREF( tmp_kw_name_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 453;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_91 = LOOKUP_ATTRIBUTE( tmp_source_name_181, const_str_plain_GL );
    if ( tmp_dict_value_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_202 );
        Py_DECREF( tmp_kw_name_19 );

        exception_lineno = 453;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_91 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_91, tmp_dict_value_91 );
    Py_DECREF( tmp_dict_value_91 );
    tmp_dict_value_92 = Py_None;
    tmp_dict_key_92 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_92, tmp_dict_value_92 );
    tmp_dict_value_93 = PyList_New( 2 );
    tmp_called_name_203 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_203 == NULL ))
    {
        tmp_called_name_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_203 == NULL )
    {
        Py_DECREF( tmp_called_name_202 );
        Py_DECREF( tmp_kw_name_19 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_60 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_60 == NULL ))
    {
        tmp_args_element_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_60 == NULL )
    {
        Py_DECREF( tmp_called_name_202 );
        Py_DECREF( tmp_kw_name_19 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 454;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 454;
    {
        PyObject *call_args[] = { tmp_args_element_name_60 };
        tmp_list_element_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_203, call_args );
    }

    if ( tmp_list_element_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_202 );
        Py_DECREF( tmp_kw_name_19 );
        Py_DECREF( tmp_dict_value_93 );

        exception_lineno = 454;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_93, 0, tmp_list_element_26 );
    tmp_list_element_26 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX );

    if (unlikely( tmp_list_element_26 == NULL ))
    {
        tmp_list_element_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX );
    }

    if ( tmp_list_element_26 == NULL )
    {
        Py_DECREF( tmp_called_name_202 );
        Py_DECREF( tmp_kw_name_19 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPbufferSGIX" );
        exception_tb = NULL;

        exception_lineno = 454;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_93, 1, tmp_list_element_26 );
    tmp_dict_key_93 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_93, tmp_dict_value_93 );
    Py_DECREF( tmp_dict_value_93 );
    tmp_dict_value_94 = const_str_digest_d28e94a8c0adec95295990a649bc1818;
    tmp_dict_key_94 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_94, tmp_dict_value_94 );
    tmp_dict_value_95 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_95 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_95, tmp_dict_value_95 );
    Py_DECREF( tmp_dict_value_95 );
    frame_module->f_lineno = 456;
    tmp_assign_source_226 = CALL_FUNCTION( tmp_called_name_202, tmp_args_name_19, tmp_kw_name_19 );
    Py_DECREF( tmp_called_name_202 );
    Py_DECREF( tmp_kw_name_19 );
    if ( tmp_assign_source_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 456;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXDestroyGLXPbufferSGIX, tmp_assign_source_226 );
    tmp_source_name_182 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_182 == NULL ))
    {
        tmp_source_name_182 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_182 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 459;
        goto frame_exception_exit_1;
    }

    tmp_called_name_204 = LOOKUP_ATTRIBUTE( tmp_source_name_182, const_str_plain_createBaseFunction );
    if ( tmp_called_name_204 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        goto frame_exception_exit_1;
    }
    tmp_args_name_20 = const_tuple_str_plain_glXQueryGLXPbufferSGIX_tuple;
    tmp_kw_name_20 = _PyDict_NewPresized( 5 );
    tmp_source_name_183 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_183 == NULL ))
    {
        tmp_source_name_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_183 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 460;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_96 = LOOKUP_ATTRIBUTE( tmp_source_name_183, const_str_plain_GL );
    if ( tmp_dict_value_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );

        exception_lineno = 460;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_96 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_96, tmp_dict_value_96 );
    Py_DECREF( tmp_dict_value_96 );
    tmp_dict_value_97 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_97 == NULL ))
    {
        tmp_dict_value_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_97 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 460;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_97 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_97, tmp_dict_value_97 );
    tmp_dict_value_98 = PyList_New( 4 );
    tmp_called_name_205 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_205 == NULL ))
    {
        tmp_called_name_205 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_205 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_61 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_61 == NULL ))
    {
        tmp_args_element_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_61 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 461;
    {
        PyObject *call_args[] = { tmp_args_element_name_61 };
        tmp_list_element_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_205, call_args );
    }

    if ( tmp_list_element_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_98, 0, tmp_list_element_27 );
    tmp_list_element_27 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX );

    if (unlikely( tmp_list_element_27 == NULL ))
    {
        tmp_list_element_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPbufferSGIX );
    }

    if ( tmp_list_element_27 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPbufferSGIX" );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_27 );
    PyList_SET_ITEM( tmp_dict_value_98, 1, tmp_list_element_27 );
    tmp_list_element_27 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_27 == NULL ))
    {
        tmp_list_element_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_27 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_27 );
    PyList_SET_ITEM( tmp_dict_value_98, 2, tmp_list_element_27 );
    tmp_called_name_206 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_206 == NULL ))
    {
        tmp_called_name_206 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_206 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_62 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_args_element_name_62 == NULL ))
    {
        tmp_args_element_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_args_element_name_62 == NULL )
    {
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 461;
    {
        PyObject *call_args[] = { tmp_args_element_name_62 };
        tmp_list_element_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_206, call_args );
    }

    if ( tmp_list_element_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_204 );
        Py_DECREF( tmp_kw_name_20 );
        Py_DECREF( tmp_dict_value_98 );

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_98, 3, tmp_list_element_27 );
    tmp_dict_key_98 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_98, tmp_dict_value_98 );
    Py_DECREF( tmp_dict_value_98 );
    tmp_dict_value_99 = const_str_digest_45053820cca1870f89ad294fed3b8c2a;
    tmp_dict_key_99 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_99, tmp_dict_value_99 );
    tmp_dict_value_100 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_empty_list );
    tmp_dict_key_100 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_100, tmp_dict_value_100 );
    Py_DECREF( tmp_dict_value_100 );
    frame_module->f_lineno = 463;
    tmp_assign_source_227 = CALL_FUNCTION( tmp_called_name_204, tmp_args_name_20, tmp_kw_name_20 );
    Py_DECREF( tmp_called_name_204 );
    Py_DECREF( tmp_kw_name_20 );
    if ( tmp_assign_source_227 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryGLXPbufferSGIX, tmp_assign_source_227 );
    tmp_source_name_184 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_184 == NULL ))
    {
        tmp_source_name_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_184 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 466;
        goto frame_exception_exit_1;
    }

    tmp_called_name_207 = LOOKUP_ATTRIBUTE( tmp_source_name_184, const_str_plain_createBaseFunction );
    if ( tmp_called_name_207 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto frame_exception_exit_1;
    }
    tmp_args_name_21 = const_tuple_str_plain_glXSelectEventSGIX_tuple;
    tmp_kw_name_21 = _PyDict_NewPresized( 5 );
    tmp_source_name_185 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_185 == NULL ))
    {
        tmp_source_name_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_185 == NULL )
    {
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 467;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_101 = LOOKUP_ATTRIBUTE( tmp_source_name_185, const_str_plain_GL );
    if ( tmp_dict_value_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );

        exception_lineno = 467;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_101 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_101, tmp_dict_value_101 );
    Py_DECREF( tmp_dict_value_101 );
    tmp_dict_value_102 = Py_None;
    tmp_dict_key_102 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_102, tmp_dict_value_102 );
    tmp_dict_value_103 = PyList_New( 3 );
    tmp_called_name_208 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_208 == NULL ))
    {
        tmp_called_name_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_208 == NULL )
    {
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );
        Py_DECREF( tmp_dict_value_103 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_63 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_63 == NULL ))
    {
        tmp_args_element_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_63 == NULL )
    {
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );
        Py_DECREF( tmp_dict_value_103 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 468;
    {
        PyObject *call_args[] = { tmp_args_element_name_63 };
        tmp_list_element_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_208, call_args );
    }

    if ( tmp_list_element_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );
        Py_DECREF( tmp_dict_value_103 );

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_103, 0, tmp_list_element_28 );
    tmp_list_element_28 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_28 == NULL ))
    {
        tmp_list_element_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_28 == NULL )
    {
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );
        Py_DECREF( tmp_dict_value_103 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_28 );
    PyList_SET_ITEM( tmp_dict_value_103, 1, tmp_list_element_28 );
    tmp_list_element_28 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_list_element_28 == NULL ))
    {
        tmp_list_element_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_list_element_28 == NULL )
    {
        Py_DECREF( tmp_called_name_207 );
        Py_DECREF( tmp_kw_name_21 );
        Py_DECREF( tmp_dict_value_103 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_28 );
    PyList_SET_ITEM( tmp_dict_value_103, 2, tmp_list_element_28 );
    tmp_dict_key_103 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_103, tmp_dict_value_103 );
    Py_DECREF( tmp_dict_value_103 );
    tmp_dict_value_104 = const_str_digest_e55c20c405950a41040601c12cedab4f;
    tmp_dict_key_104 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_104, tmp_dict_value_104 );
    tmp_dict_value_105 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_list );
    tmp_dict_key_105 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_105, tmp_dict_value_105 );
    Py_DECREF( tmp_dict_value_105 );
    frame_module->f_lineno = 470;
    tmp_assign_source_228 = CALL_FUNCTION( tmp_called_name_207, tmp_args_name_21, tmp_kw_name_21 );
    Py_DECREF( tmp_called_name_207 );
    Py_DECREF( tmp_kw_name_21 );
    if ( tmp_assign_source_228 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 470;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXSelectEventSGIX, tmp_assign_source_228 );
    tmp_source_name_186 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_186 == NULL ))
    {
        tmp_source_name_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_186 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 473;
        goto frame_exception_exit_1;
    }

    tmp_called_name_209 = LOOKUP_ATTRIBUTE( tmp_source_name_186, const_str_plain_createBaseFunction );
    if ( tmp_called_name_209 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        goto frame_exception_exit_1;
    }
    tmp_args_name_22 = const_tuple_str_plain_glXGetSelectedEventSGIX_tuple;
    tmp_kw_name_22 = _PyDict_NewPresized( 5 );
    tmp_source_name_187 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_187 == NULL ))
    {
        tmp_source_name_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_187 == NULL )
    {
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 474;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_106 = LOOKUP_ATTRIBUTE( tmp_source_name_187, const_str_plain_GL );
    if ( tmp_dict_value_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );

        exception_lineno = 474;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_106 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_106, tmp_dict_value_106 );
    Py_DECREF( tmp_dict_value_106 );
    tmp_dict_value_107 = Py_None;
    tmp_dict_key_107 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_107, tmp_dict_value_107 );
    tmp_dict_value_108 = PyList_New( 3 );
    tmp_called_name_210 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_210 == NULL ))
    {
        tmp_called_name_210 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_210 == NULL )
    {
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_64 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_64 == NULL ))
    {
        tmp_args_element_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_64 == NULL )
    {
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 475;
    {
        PyObject *call_args[] = { tmp_args_element_name_64 };
        tmp_list_element_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_210, call_args );
    }

    if ( tmp_list_element_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_108, 0, tmp_list_element_29 );
    tmp_list_element_29 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_29 == NULL ))
    {
        tmp_list_element_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_29 == NULL )
    {
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_29 );
    PyList_SET_ITEM( tmp_dict_value_108, 1, tmp_list_element_29 );
    tmp_called_name_211 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_211 == NULL ))
    {
        tmp_called_name_211 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_211 == NULL )
    {
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_65 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_args_element_name_65 == NULL ))
    {
        tmp_args_element_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_args_element_name_65 == NULL )
    {
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 475;
    {
        PyObject *call_args[] = { tmp_args_element_name_65 };
        tmp_list_element_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_211, call_args );
    }

    if ( tmp_list_element_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_209 );
        Py_DECREF( tmp_kw_name_22 );
        Py_DECREF( tmp_dict_value_108 );

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_108, 2, tmp_list_element_29 );
    tmp_dict_key_108 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_108, tmp_dict_value_108 );
    Py_DECREF( tmp_dict_value_108 );
    tmp_dict_value_109 = const_str_digest_62964fb35c8f7bdbb2787880fda45a5d;
    tmp_dict_key_109 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_109, tmp_dict_value_109 );
    tmp_dict_value_110 = LIST_COPY( const_list_str_empty_str_plain_None_str_empty_list );
    tmp_dict_key_110 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_110, tmp_dict_value_110 );
    Py_DECREF( tmp_dict_value_110 );
    frame_module->f_lineno = 477;
    tmp_assign_source_229 = CALL_FUNCTION( tmp_called_name_209, tmp_args_name_22, tmp_kw_name_22 );
    Py_DECREF( tmp_called_name_209 );
    Py_DECREF( tmp_kw_name_22 );
    if ( tmp_assign_source_229 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetSelectedEventSGIX, tmp_assign_source_229 );
    tmp_source_name_188 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_188 == NULL ))
    {
        tmp_source_name_188 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_188 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 481;
        goto frame_exception_exit_1;
    }

    tmp_called_name_212 = LOOKUP_ATTRIBUTE( tmp_source_name_188, const_str_plain_Constant );
    if ( tmp_called_name_212 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 481;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 481;
    tmp_assign_source_230 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_212, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGI_cushion_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_212 );
    if ( tmp_assign_source_230 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 481;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGI_cushion, tmp_assign_source_230 );
    tmp_assign_source_231 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_231 == NULL ))
    {
        tmp_assign_source_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_231 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 482;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Window, tmp_assign_source_231 );
    tmp_source_name_189 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_189 == NULL ))
    {
        tmp_source_name_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_189 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 483;
        goto frame_exception_exit_1;
    }

    tmp_called_name_213 = LOOKUP_ATTRIBUTE( tmp_source_name_189, const_str_plain_createBaseFunction );
    if ( tmp_called_name_213 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 483;
        goto frame_exception_exit_1;
    }
    tmp_args_name_23 = const_tuple_str_plain_glXCushionSGI_tuple;
    tmp_kw_name_23 = _PyDict_NewPresized( 5 );
    tmp_source_name_190 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_190 == NULL ))
    {
        tmp_source_name_190 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_190 == NULL )
    {
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 484;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_111 = LOOKUP_ATTRIBUTE( tmp_source_name_190, const_str_plain_GL );
    if ( tmp_dict_value_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );

        exception_lineno = 484;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_111 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_111, tmp_dict_value_111 );
    Py_DECREF( tmp_dict_value_111 );
    tmp_dict_value_112 = Py_None;
    tmp_dict_key_112 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_112, tmp_dict_value_112 );
    tmp_dict_value_113 = PyList_New( 3 );
    tmp_called_name_214 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_214 == NULL ))
    {
        tmp_called_name_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_214 == NULL )
    {
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );
        Py_DECREF( tmp_dict_value_113 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 485;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_66 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_66 == NULL ))
    {
        tmp_args_element_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_66 == NULL )
    {
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );
        Py_DECREF( tmp_dict_value_113 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 485;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 485;
    {
        PyObject *call_args[] = { tmp_args_element_name_66 };
        tmp_list_element_30 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_214, call_args );
    }

    if ( tmp_list_element_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );
        Py_DECREF( tmp_dict_value_113 );

        exception_lineno = 485;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_113, 0, tmp_list_element_30 );
    tmp_list_element_30 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Window );

    if (unlikely( tmp_list_element_30 == NULL ))
    {
        tmp_list_element_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Window );
    }

    if ( tmp_list_element_30 == NULL )
    {
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );
        Py_DECREF( tmp_dict_value_113 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Window" );
        exception_tb = NULL;

        exception_lineno = 485;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_30 );
    PyList_SET_ITEM( tmp_dict_value_113, 1, tmp_list_element_30 );
    tmp_list_element_30 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_float );

    if (unlikely( tmp_list_element_30 == NULL ))
    {
        tmp_list_element_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_float );
    }

    if ( tmp_list_element_30 == NULL )
    {
        Py_DECREF( tmp_called_name_213 );
        Py_DECREF( tmp_kw_name_23 );
        Py_DECREF( tmp_dict_value_113 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_float" );
        exception_tb = NULL;

        exception_lineno = 485;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_30 );
    PyList_SET_ITEM( tmp_dict_value_113, 2, tmp_list_element_30 );
    tmp_dict_key_113 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_113, tmp_dict_value_113 );
    Py_DECREF( tmp_dict_value_113 );
    tmp_dict_value_114 = const_str_digest_b9783c6a75e79fb1fddbf95ccc93f285;
    tmp_dict_key_114 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_114, tmp_dict_value_114 );
    tmp_dict_value_115 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_list );
    tmp_dict_key_115 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_115, tmp_dict_value_115 );
    Py_DECREF( tmp_dict_value_115 );
    frame_module->f_lineno = 487;
    tmp_assign_source_232 = CALL_FUNCTION( tmp_called_name_213, tmp_args_name_23, tmp_kw_name_23 );
    Py_DECREF( tmp_called_name_213 );
    Py_DECREF( tmp_kw_name_23 );
    if ( tmp_assign_source_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 487;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXCushionSGI, tmp_assign_source_232 );
    tmp_source_name_191 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_191 == NULL ))
    {
        tmp_source_name_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_191 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 491;
        goto frame_exception_exit_1;
    }

    tmp_called_name_215 = LOOKUP_ATTRIBUTE( tmp_source_name_191, const_str_plain_Constant );
    if ( tmp_called_name_215 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 491;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 491;
    tmp_assign_source_233 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_215, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_video_resize_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_215 );
    if ( tmp_assign_source_233 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 491;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_video_resize, tmp_assign_source_233 );
    tmp_source_name_192 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_192 == NULL ))
    {
        tmp_source_name_192 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_192 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 492;
        goto frame_exception_exit_1;
    }

    tmp_called_name_216 = LOOKUP_ATTRIBUTE( tmp_source_name_192, const_str_plain_createBaseFunction );
    if ( tmp_called_name_216 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 492;
        goto frame_exception_exit_1;
    }
    tmp_args_name_24 = const_tuple_str_plain_glXBindChannelToWindowSGIX_tuple;
    tmp_kw_name_24 = _PyDict_NewPresized( 5 );
    tmp_source_name_193 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_193 == NULL ))
    {
        tmp_source_name_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_193 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 493;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_116 = LOOKUP_ATTRIBUTE( tmp_source_name_193, const_str_plain_GL );
    if ( tmp_dict_value_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );

        exception_lineno = 493;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_116 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_24, tmp_dict_key_116, tmp_dict_value_116 );
    Py_DECREF( tmp_dict_value_116 );
    tmp_dict_value_117 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_117 == NULL ))
    {
        tmp_dict_value_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_117 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 493;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_117 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_24, tmp_dict_key_117, tmp_dict_value_117 );
    tmp_dict_value_118 = PyList_New( 4 );
    tmp_called_name_217 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_217 == NULL ))
    {
        tmp_called_name_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_217 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_67 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_67 == NULL ))
    {
        tmp_args_element_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_67 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 494;
    {
        PyObject *call_args[] = { tmp_args_element_name_67 };
        tmp_list_element_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_217, call_args );
    }

    if ( tmp_list_element_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        Py_DECREF( tmp_dict_value_118 );

        exception_lineno = 494;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_118, 0, tmp_list_element_31 );
    tmp_list_element_31 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_31 == NULL ))
    {
        tmp_list_element_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_31 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_31 );
    PyList_SET_ITEM( tmp_dict_value_118, 1, tmp_list_element_31 );
    tmp_list_element_31 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_31 == NULL ))
    {
        tmp_list_element_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_31 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_31 );
    PyList_SET_ITEM( tmp_dict_value_118, 2, tmp_list_element_31 );
    tmp_list_element_31 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Window );

    if (unlikely( tmp_list_element_31 == NULL ))
    {
        tmp_list_element_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Window );
    }

    if ( tmp_list_element_31 == NULL )
    {
        Py_DECREF( tmp_called_name_216 );
        Py_DECREF( tmp_kw_name_24 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Window" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_31 );
    PyList_SET_ITEM( tmp_dict_value_118, 3, tmp_list_element_31 );
    tmp_dict_key_118 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_24, tmp_dict_key_118, tmp_dict_value_118 );
    Py_DECREF( tmp_dict_value_118 );
    tmp_dict_value_119 = const_str_digest_9d33ac304b71fe73babdb34426f0623d;
    tmp_dict_key_119 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_24, tmp_dict_key_119, tmp_dict_value_119 );
    tmp_dict_value_120 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_plain_None_list );
    tmp_dict_key_120 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_24, tmp_dict_key_120, tmp_dict_value_120 );
    Py_DECREF( tmp_dict_value_120 );
    frame_module->f_lineno = 496;
    tmp_assign_source_234 = CALL_FUNCTION( tmp_called_name_216, tmp_args_name_24, tmp_kw_name_24 );
    Py_DECREF( tmp_called_name_216 );
    Py_DECREF( tmp_kw_name_24 );
    if ( tmp_assign_source_234 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXBindChannelToWindowSGIX, tmp_assign_source_234 );
    tmp_source_name_194 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_194 == NULL ))
    {
        tmp_source_name_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_194 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 499;
        goto frame_exception_exit_1;
    }

    tmp_called_name_218 = LOOKUP_ATTRIBUTE( tmp_source_name_194, const_str_plain_createBaseFunction );
    if ( tmp_called_name_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        goto frame_exception_exit_1;
    }
    tmp_args_name_25 = const_tuple_str_plain_glXChannelRectSGIX_tuple;
    tmp_kw_name_25 = _PyDict_NewPresized( 5 );
    tmp_source_name_195 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_195 == NULL ))
    {
        tmp_source_name_195 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_195 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 500;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_121 = LOOKUP_ATTRIBUTE( tmp_source_name_195, const_str_plain_GL );
    if ( tmp_dict_value_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );

        exception_lineno = 500;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_121 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_25, tmp_dict_key_121, tmp_dict_value_121 );
    Py_DECREF( tmp_dict_value_121 );
    tmp_dict_value_122 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_122 == NULL ))
    {
        tmp_dict_value_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_122 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 500;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_122 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_25, tmp_dict_key_122, tmp_dict_value_122 );
    tmp_dict_value_123 = PyList_New( 7 );
    tmp_called_name_219 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_219 == NULL ))
    {
        tmp_called_name_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_219 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_68 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_68 == NULL ))
    {
        tmp_args_element_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_68 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 501;
    {
        PyObject *call_args[] = { tmp_args_element_name_68 };
        tmp_list_element_32 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_219, call_args );
    }

    if ( tmp_list_element_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_123, 0, tmp_list_element_32 );
    tmp_list_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_32 == NULL ))
    {
        tmp_list_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_32 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_32 );
    PyList_SET_ITEM( tmp_dict_value_123, 1, tmp_list_element_32 );
    tmp_list_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_32 == NULL ))
    {
        tmp_list_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_32 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_32 );
    PyList_SET_ITEM( tmp_dict_value_123, 2, tmp_list_element_32 );
    tmp_list_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_32 == NULL ))
    {
        tmp_list_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_32 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_32 );
    PyList_SET_ITEM( tmp_dict_value_123, 3, tmp_list_element_32 );
    tmp_list_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_32 == NULL ))
    {
        tmp_list_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_32 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_32 );
    PyList_SET_ITEM( tmp_dict_value_123, 4, tmp_list_element_32 );
    tmp_list_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_32 == NULL ))
    {
        tmp_list_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_32 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_32 );
    PyList_SET_ITEM( tmp_dict_value_123, 5, tmp_list_element_32 );
    tmp_list_element_32 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_32 == NULL ))
    {
        tmp_list_element_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_32 == NULL )
    {
        Py_DECREF( tmp_called_name_218 );
        Py_DECREF( tmp_kw_name_25 );
        Py_DECREF( tmp_dict_value_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 501;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_32 );
    PyList_SET_ITEM( tmp_dict_value_123, 6, tmp_list_element_32 );
    tmp_dict_key_123 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_25, tmp_dict_key_123, tmp_dict_value_123 );
    Py_DECREF( tmp_dict_value_123 );
    tmp_dict_value_124 = const_str_digest_43d9a1a91e0de9d13fefa95a8949881e;
    tmp_dict_key_124 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_25, tmp_dict_key_124, tmp_dict_value_124 );
    tmp_dict_value_125 = LIST_COPY( const_list_d7ad90ba65c4e14a552791c651ccfa3b_list );
    tmp_dict_key_125 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_25, tmp_dict_key_125, tmp_dict_value_125 );
    Py_DECREF( tmp_dict_value_125 );
    frame_module->f_lineno = 503;
    tmp_assign_source_235 = CALL_FUNCTION( tmp_called_name_218, tmp_args_name_25, tmp_kw_name_25 );
    Py_DECREF( tmp_called_name_218 );
    Py_DECREF( tmp_kw_name_25 );
    if ( tmp_assign_source_235 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 503;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXChannelRectSGIX, tmp_assign_source_235 );
    tmp_source_name_196 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_196 == NULL ))
    {
        tmp_source_name_196 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_196 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_called_name_220 = LOOKUP_ATTRIBUTE( tmp_source_name_196, const_str_plain_createBaseFunction );
    if ( tmp_called_name_220 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 506;
        goto frame_exception_exit_1;
    }
    tmp_args_name_26 = const_tuple_str_plain_glXQueryChannelRectSGIX_tuple;
    tmp_kw_name_26 = _PyDict_NewPresized( 5 );
    tmp_source_name_197 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_197 == NULL ))
    {
        tmp_source_name_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_197 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 507;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_126 = LOOKUP_ATTRIBUTE( tmp_source_name_197, const_str_plain_GL );
    if ( tmp_dict_value_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );

        exception_lineno = 507;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_126 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_126, tmp_dict_value_126 );
    Py_DECREF( tmp_dict_value_126 );
    tmp_dict_value_127 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_127 == NULL ))
    {
        tmp_dict_value_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_127 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 507;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_127 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_127, tmp_dict_value_127 );
    tmp_dict_value_128 = PyList_New( 7 );
    tmp_called_name_221 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_221 == NULL ))
    {
        tmp_called_name_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_221 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_69 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_69 == NULL ))
    {
        tmp_args_element_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_69 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 508;
    {
        PyObject *call_args[] = { tmp_args_element_name_69 };
        tmp_list_element_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_221, call_args );
    }

    if ( tmp_list_element_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_128, 0, tmp_list_element_33 );
    tmp_list_element_33 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_33 == NULL ))
    {
        tmp_list_element_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_33 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_33 );
    PyList_SET_ITEM( tmp_dict_value_128, 1, tmp_list_element_33 );
    tmp_list_element_33 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_33 == NULL ))
    {
        tmp_list_element_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_33 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_33 );
    PyList_SET_ITEM( tmp_dict_value_128, 2, tmp_list_element_33 );
    tmp_called_name_222 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_222 == NULL ))
    {
        tmp_called_name_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_222 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_70 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_70 == NULL ))
    {
        tmp_args_element_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_70 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 508;
    {
        PyObject *call_args[] = { tmp_args_element_name_70 };
        tmp_list_element_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_222, call_args );
    }

    if ( tmp_list_element_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_128, 3, tmp_list_element_33 );
    tmp_called_name_223 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_223 == NULL ))
    {
        tmp_called_name_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_223 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_71 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_71 == NULL ))
    {
        tmp_args_element_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_71 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 508;
    {
        PyObject *call_args[] = { tmp_args_element_name_71 };
        tmp_list_element_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_223, call_args );
    }

    if ( tmp_list_element_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_128, 4, tmp_list_element_33 );
    tmp_called_name_224 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_224 == NULL ))
    {
        tmp_called_name_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_224 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_72 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_72 == NULL ))
    {
        tmp_args_element_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_72 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 508;
    {
        PyObject *call_args[] = { tmp_args_element_name_72 };
        tmp_list_element_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_224, call_args );
    }

    if ( tmp_list_element_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_128, 5, tmp_list_element_33 );
    tmp_called_name_225 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_225 == NULL ))
    {
        tmp_called_name_225 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_225 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_73 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_73 == NULL ))
    {
        tmp_args_element_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_73 == NULL )
    {
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 508;
    {
        PyObject *call_args[] = { tmp_args_element_name_73 };
        tmp_list_element_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_225, call_args );
    }

    if ( tmp_list_element_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_220 );
        Py_DECREF( tmp_kw_name_26 );
        Py_DECREF( tmp_dict_value_128 );

        exception_lineno = 508;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_128, 6, tmp_list_element_33 );
    tmp_dict_key_128 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_128, tmp_dict_value_128 );
    Py_DECREF( tmp_dict_value_128 );
    tmp_dict_value_129 = const_str_digest_c54a971321a6201cc2aff1bf406f20f3;
    tmp_dict_key_129 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_129, tmp_dict_value_129 );
    tmp_dict_value_130 = LIST_COPY( const_list_c9625226630d4d03b7a368b98c552a09_list );
    tmp_dict_key_130 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_130, tmp_dict_value_130 );
    Py_DECREF( tmp_dict_value_130 );
    frame_module->f_lineno = 510;
    tmp_assign_source_236 = CALL_FUNCTION( tmp_called_name_220, tmp_args_name_26, tmp_kw_name_26 );
    Py_DECREF( tmp_called_name_220 );
    Py_DECREF( tmp_kw_name_26 );
    if ( tmp_assign_source_236 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 510;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryChannelRectSGIX, tmp_assign_source_236 );
    tmp_source_name_198 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_198 == NULL ))
    {
        tmp_source_name_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_198 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 513;
        goto frame_exception_exit_1;
    }

    tmp_called_name_226 = LOOKUP_ATTRIBUTE( tmp_source_name_198, const_str_plain_createBaseFunction );
    if ( tmp_called_name_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    tmp_args_name_27 = const_tuple_str_plain_glXQueryChannelDeltasSGIX_tuple;
    tmp_kw_name_27 = _PyDict_NewPresized( 5 );
    tmp_source_name_199 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_199 == NULL ))
    {
        tmp_source_name_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_199 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 514;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_131 = LOOKUP_ATTRIBUTE( tmp_source_name_199, const_str_plain_GL );
    if ( tmp_dict_value_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );

        exception_lineno = 514;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_131 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_131, tmp_dict_value_131 );
    Py_DECREF( tmp_dict_value_131 );
    tmp_dict_value_132 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_132 == NULL ))
    {
        tmp_dict_value_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_132 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 514;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_132 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_132, tmp_dict_value_132 );
    tmp_dict_value_133 = PyList_New( 7 );
    tmp_called_name_227 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_227 == NULL ))
    {
        tmp_called_name_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_227 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_74 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_74 == NULL ))
    {
        tmp_args_element_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_74 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 515;
    {
        PyObject *call_args[] = { tmp_args_element_name_74 };
        tmp_list_element_34 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_227, call_args );
    }

    if ( tmp_list_element_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_133, 0, tmp_list_element_34 );
    tmp_list_element_34 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_34 == NULL ))
    {
        tmp_list_element_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_34 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_34 );
    PyList_SET_ITEM( tmp_dict_value_133, 1, tmp_list_element_34 );
    tmp_list_element_34 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_34 == NULL ))
    {
        tmp_list_element_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_34 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_34 );
    PyList_SET_ITEM( tmp_dict_value_133, 2, tmp_list_element_34 );
    tmp_called_name_228 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_228 == NULL ))
    {
        tmp_called_name_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_228 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_75 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_75 == NULL ))
    {
        tmp_args_element_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_75 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 515;
    {
        PyObject *call_args[] = { tmp_args_element_name_75 };
        tmp_list_element_34 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_228, call_args );
    }

    if ( tmp_list_element_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_133, 3, tmp_list_element_34 );
    tmp_called_name_229 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_229 == NULL ))
    {
        tmp_called_name_229 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_229 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_76 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_76 == NULL ))
    {
        tmp_args_element_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_76 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 515;
    {
        PyObject *call_args[] = { tmp_args_element_name_76 };
        tmp_list_element_34 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_229, call_args );
    }

    if ( tmp_list_element_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_133, 4, tmp_list_element_34 );
    tmp_called_name_230 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_230 == NULL ))
    {
        tmp_called_name_230 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_230 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_77 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_77 == NULL ))
    {
        tmp_args_element_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_77 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 515;
    {
        PyObject *call_args[] = { tmp_args_element_name_77 };
        tmp_list_element_34 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_230, call_args );
    }

    if ( tmp_list_element_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_133, 5, tmp_list_element_34 );
    tmp_called_name_231 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_231 == NULL ))
    {
        tmp_called_name_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_231 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_78 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_78 == NULL ))
    {
        tmp_args_element_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_78 == NULL )
    {
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 515;
    {
        PyObject *call_args[] = { tmp_args_element_name_78 };
        tmp_list_element_34 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_231, call_args );
    }

    if ( tmp_list_element_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_226 );
        Py_DECREF( tmp_kw_name_27 );
        Py_DECREF( tmp_dict_value_133 );

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_133, 6, tmp_list_element_34 );
    tmp_dict_key_133 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_133, tmp_dict_value_133 );
    Py_DECREF( tmp_dict_value_133 );
    tmp_dict_value_134 = const_str_digest_e148681b9ed3c2b82991e605edb55802;
    tmp_dict_key_134 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_134, tmp_dict_value_134 );
    tmp_dict_value_135 = LIST_COPY( const_list_c9625226630d4d03b7a368b98c552a09_list );
    tmp_dict_key_135 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_135, tmp_dict_value_135 );
    Py_DECREF( tmp_dict_value_135 );
    frame_module->f_lineno = 517;
    tmp_assign_source_237 = CALL_FUNCTION( tmp_called_name_226, tmp_args_name_27, tmp_kw_name_27 );
    Py_DECREF( tmp_called_name_226 );
    Py_DECREF( tmp_kw_name_27 );
    if ( tmp_assign_source_237 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 517;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryChannelDeltasSGIX, tmp_assign_source_237 );
    tmp_assign_source_238 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_assign_source_238 == NULL ))
    {
        tmp_assign_source_238 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_assign_source_238 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 520;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLenum, tmp_assign_source_238 );
    tmp_source_name_200 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_200 == NULL ))
    {
        tmp_source_name_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_200 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 521;
        goto frame_exception_exit_1;
    }

    tmp_called_name_232 = LOOKUP_ATTRIBUTE( tmp_source_name_200, const_str_plain_createBaseFunction );
    if ( tmp_called_name_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 521;
        goto frame_exception_exit_1;
    }
    tmp_args_name_28 = const_tuple_str_plain_glXChannelRectSyncSGIX_tuple;
    tmp_kw_name_28 = _PyDict_NewPresized( 5 );
    tmp_source_name_201 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_201 == NULL ))
    {
        tmp_source_name_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_201 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 522;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_136 = LOOKUP_ATTRIBUTE( tmp_source_name_201, const_str_plain_GL );
    if ( tmp_dict_value_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );

        exception_lineno = 522;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_136 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_136, tmp_dict_value_136 );
    Py_DECREF( tmp_dict_value_136 );
    tmp_dict_value_137 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_137 == NULL ))
    {
        tmp_dict_value_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_137 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 522;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_137 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_137, tmp_dict_value_137 );
    tmp_dict_value_138 = PyList_New( 4 );
    tmp_called_name_233 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_233 == NULL ))
    {
        tmp_called_name_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_233 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_79 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_79 == NULL ))
    {
        tmp_args_element_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_79 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 523;
    {
        PyObject *call_args[] = { tmp_args_element_name_79 };
        tmp_list_element_35 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_233, call_args );
    }

    if ( tmp_list_element_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        Py_DECREF( tmp_dict_value_138 );

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_138, 0, tmp_list_element_35 );
    tmp_list_element_35 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_35 == NULL ))
    {
        tmp_list_element_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_35 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_35 );
    PyList_SET_ITEM( tmp_dict_value_138, 1, tmp_list_element_35 );
    tmp_list_element_35 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_35 == NULL ))
    {
        tmp_list_element_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_35 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_35 );
    PyList_SET_ITEM( tmp_dict_value_138, 2, tmp_list_element_35 );
    tmp_list_element_35 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLenum );

    if (unlikely( tmp_list_element_35 == NULL ))
    {
        tmp_list_element_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLenum );
    }

    if ( tmp_list_element_35 == NULL )
    {
        Py_DECREF( tmp_called_name_232 );
        Py_DECREF( tmp_kw_name_28 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLenum" );
        exception_tb = NULL;

        exception_lineno = 523;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_35 );
    PyList_SET_ITEM( tmp_dict_value_138, 3, tmp_list_element_35 );
    tmp_dict_key_138 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_138, tmp_dict_value_138 );
    Py_DECREF( tmp_dict_value_138 );
    tmp_dict_value_139 = const_str_digest_5df681dbaa0a811eca97387924c622a5;
    tmp_dict_key_139 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_139, tmp_dict_value_139 );
    tmp_dict_value_140 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_plain_None_list );
    tmp_dict_key_140 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_140, tmp_dict_value_140 );
    Py_DECREF( tmp_dict_value_140 );
    frame_module->f_lineno = 525;
    tmp_assign_source_239 = CALL_FUNCTION( tmp_called_name_232, tmp_args_name_28, tmp_kw_name_28 );
    Py_DECREF( tmp_called_name_232 );
    Py_DECREF( tmp_kw_name_28 );
    if ( tmp_assign_source_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXChannelRectSyncSGIX, tmp_assign_source_239 );
    tmp_source_name_202 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_202 == NULL ))
    {
        tmp_source_name_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_202 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 529;
        goto frame_exception_exit_1;
    }

    tmp_called_name_234 = LOOKUP_ATTRIBUTE( tmp_source_name_202, const_str_plain_Constant );
    if ( tmp_called_name_234 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 529;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 529;
    tmp_assign_source_240 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_234, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_dmbuffer_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_234 );
    if ( tmp_assign_source_240 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 529;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_dmbuffer, tmp_assign_source_240 );
    tmp_source_name_203 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_203 == NULL ))
    {
        tmp_source_name_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_203 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 531;
        goto frame_exception_exit_1;
    }

    tmp_called_name_235 = LOOKUP_ATTRIBUTE( tmp_source_name_203, const_str_plain_Constant );
    if ( tmp_called_name_235 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 531;
    tmp_assign_source_241 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_235, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_swap_group_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_235 );
    if ( tmp_assign_source_241 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_swap_group, tmp_assign_source_241 );
    tmp_source_name_204 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_204 == NULL ))
    {
        tmp_source_name_204 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_204 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 532;
        goto frame_exception_exit_1;
    }

    tmp_called_name_236 = LOOKUP_ATTRIBUTE( tmp_source_name_204, const_str_plain_createBaseFunction );
    if ( tmp_called_name_236 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto frame_exception_exit_1;
    }
    tmp_args_name_29 = const_tuple_str_plain_glXJoinSwapGroupSGIX_tuple;
    tmp_kw_name_29 = _PyDict_NewPresized( 5 );
    tmp_source_name_205 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_205 == NULL ))
    {
        tmp_source_name_205 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_205 == NULL )
    {
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_141 = LOOKUP_ATTRIBUTE( tmp_source_name_205, const_str_plain_GL );
    if ( tmp_dict_value_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );

        exception_lineno = 533;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_141 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_29, tmp_dict_key_141, tmp_dict_value_141 );
    Py_DECREF( tmp_dict_value_141 );
    tmp_dict_value_142 = Py_None;
    tmp_dict_key_142 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_29, tmp_dict_key_142, tmp_dict_value_142 );
    tmp_dict_value_143 = PyList_New( 3 );
    tmp_called_name_237 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_237 == NULL ))
    {
        tmp_called_name_237 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_237 == NULL )
    {
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );
        Py_DECREF( tmp_dict_value_143 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 534;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_80 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_80 == NULL ))
    {
        tmp_args_element_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_80 == NULL )
    {
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );
        Py_DECREF( tmp_dict_value_143 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 534;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 534;
    {
        PyObject *call_args[] = { tmp_args_element_name_80 };
        tmp_list_element_36 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_237, call_args );
    }

    if ( tmp_list_element_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );
        Py_DECREF( tmp_dict_value_143 );

        exception_lineno = 534;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_143, 0, tmp_list_element_36 );
    tmp_list_element_36 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_36 == NULL ))
    {
        tmp_list_element_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_36 == NULL )
    {
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );
        Py_DECREF( tmp_dict_value_143 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 534;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_36 );
    PyList_SET_ITEM( tmp_dict_value_143, 1, tmp_list_element_36 );
    tmp_list_element_36 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_36 == NULL ))
    {
        tmp_list_element_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_36 == NULL )
    {
        Py_DECREF( tmp_called_name_236 );
        Py_DECREF( tmp_kw_name_29 );
        Py_DECREF( tmp_dict_value_143 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 534;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_36 );
    PyList_SET_ITEM( tmp_dict_value_143, 2, tmp_list_element_36 );
    tmp_dict_key_143 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_29, tmp_dict_key_143, tmp_dict_value_143 );
    Py_DECREF( tmp_dict_value_143 );
    tmp_dict_value_144 = const_str_digest_ec359b30d45bd3570a9b0297422e0d7a;
    tmp_dict_key_144 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_29, tmp_dict_key_144, tmp_dict_value_144 );
    tmp_dict_value_145 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_list );
    tmp_dict_key_145 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_29, tmp_dict_key_145, tmp_dict_value_145 );
    Py_DECREF( tmp_dict_value_145 );
    frame_module->f_lineno = 536;
    tmp_assign_source_242 = CALL_FUNCTION( tmp_called_name_236, tmp_args_name_29, tmp_kw_name_29 );
    Py_DECREF( tmp_called_name_236 );
    Py_DECREF( tmp_kw_name_29 );
    if ( tmp_assign_source_242 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 536;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXJoinSwapGroupSGIX, tmp_assign_source_242 );
    tmp_source_name_206 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_206 == NULL ))
    {
        tmp_source_name_206 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_206 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 540;
        goto frame_exception_exit_1;
    }

    tmp_called_name_238 = LOOKUP_ATTRIBUTE( tmp_source_name_206, const_str_plain_Constant );
    if ( tmp_called_name_238 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 540;
    tmp_assign_source_243 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_238, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_swap_barrier_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_238 );
    if ( tmp_assign_source_243 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_swap_barrier, tmp_assign_source_243 );
    tmp_source_name_207 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_207 == NULL ))
    {
        tmp_source_name_207 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_207 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 541;
        goto frame_exception_exit_1;
    }

    tmp_called_name_239 = LOOKUP_ATTRIBUTE( tmp_source_name_207, const_str_plain_createBaseFunction );
    if ( tmp_called_name_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 541;
        goto frame_exception_exit_1;
    }
    tmp_args_name_30 = const_tuple_str_plain_glXBindSwapBarrierSGIX_tuple;
    tmp_kw_name_30 = _PyDict_NewPresized( 5 );
    tmp_source_name_208 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_208 == NULL ))
    {
        tmp_source_name_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_208 == NULL )
    {
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 542;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_146 = LOOKUP_ATTRIBUTE( tmp_source_name_208, const_str_plain_GL );
    if ( tmp_dict_value_146 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );

        exception_lineno = 542;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_146 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_146, tmp_dict_value_146 );
    Py_DECREF( tmp_dict_value_146 );
    tmp_dict_value_147 = Py_None;
    tmp_dict_key_147 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_147, tmp_dict_value_147 );
    tmp_dict_value_148 = PyList_New( 3 );
    tmp_called_name_240 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_240 == NULL ))
    {
        tmp_called_name_240 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_240 == NULL )
    {
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );
        Py_DECREF( tmp_dict_value_148 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 543;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_81 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_81 == NULL ))
    {
        tmp_args_element_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_81 == NULL )
    {
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );
        Py_DECREF( tmp_dict_value_148 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 543;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 543;
    {
        PyObject *call_args[] = { tmp_args_element_name_81 };
        tmp_list_element_37 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_240, call_args );
    }

    if ( tmp_list_element_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );
        Py_DECREF( tmp_dict_value_148 );

        exception_lineno = 543;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_148, 0, tmp_list_element_37 );
    tmp_list_element_37 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_37 == NULL ))
    {
        tmp_list_element_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_37 == NULL )
    {
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );
        Py_DECREF( tmp_dict_value_148 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 543;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_37 );
    PyList_SET_ITEM( tmp_dict_value_148, 1, tmp_list_element_37 );
    tmp_list_element_37 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_37 == NULL ))
    {
        tmp_list_element_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_37 == NULL )
    {
        Py_DECREF( tmp_called_name_239 );
        Py_DECREF( tmp_kw_name_30 );
        Py_DECREF( tmp_dict_value_148 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 543;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_37 );
    PyList_SET_ITEM( tmp_dict_value_148, 2, tmp_list_element_37 );
    tmp_dict_key_148 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_148, tmp_dict_value_148 );
    Py_DECREF( tmp_dict_value_148 );
    tmp_dict_value_149 = const_str_digest_1a014c2a37a66bbac6d4e07b7425fa7c;
    tmp_dict_key_149 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_149, tmp_dict_value_149 );
    tmp_dict_value_150 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_list );
    tmp_dict_key_150 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_150, tmp_dict_value_150 );
    Py_DECREF( tmp_dict_value_150 );
    frame_module->f_lineno = 545;
    tmp_assign_source_244 = CALL_FUNCTION( tmp_called_name_239, tmp_args_name_30, tmp_kw_name_30 );
    Py_DECREF( tmp_called_name_239 );
    Py_DECREF( tmp_kw_name_30 );
    if ( tmp_assign_source_244 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 545;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXBindSwapBarrierSGIX, tmp_assign_source_244 );
    tmp_source_name_209 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_209 == NULL ))
    {
        tmp_source_name_209 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_209 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 548;
        goto frame_exception_exit_1;
    }

    tmp_called_name_241 = LOOKUP_ATTRIBUTE( tmp_source_name_209, const_str_plain_createBaseFunction );
    if ( tmp_called_name_241 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 548;
        goto frame_exception_exit_1;
    }
    tmp_args_name_31 = const_tuple_str_plain_glXQueryMaxSwapBarriersSGIX_tuple;
    tmp_kw_name_31 = _PyDict_NewPresized( 5 );
    tmp_source_name_210 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_210 == NULL ))
    {
        tmp_source_name_210 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_210 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_151 = LOOKUP_ATTRIBUTE( tmp_source_name_210, const_str_plain_GL );
    if ( tmp_dict_value_151 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_151 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_151, tmp_dict_value_151 );
    Py_DECREF( tmp_dict_value_151 );
    tmp_dict_value_152 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_152 == NULL ))
    {
        tmp_dict_value_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_152 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 549;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_152 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_152, tmp_dict_value_152 );
    tmp_dict_value_153 = PyList_New( 3 );
    tmp_called_name_242 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_242 == NULL ))
    {
        tmp_called_name_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_242 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_82 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_82 == NULL ))
    {
        tmp_args_element_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_82 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 550;
    {
        PyObject *call_args[] = { tmp_args_element_name_82 };
        tmp_list_element_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_242, call_args );
    }

    if ( tmp_list_element_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_153, 0, tmp_list_element_38 );
    tmp_list_element_38 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_38 == NULL ))
    {
        tmp_list_element_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_38 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_38 );
    PyList_SET_ITEM( tmp_dict_value_153, 1, tmp_list_element_38 );
    tmp_called_name_243 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_243 == NULL ))
    {
        tmp_called_name_243 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_243 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_83 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_83 == NULL ))
    {
        tmp_args_element_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_83 == NULL )
    {
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 550;
    {
        PyObject *call_args[] = { tmp_args_element_name_83 };
        tmp_list_element_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_243, call_args );
    }

    if ( tmp_list_element_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_241 );
        Py_DECREF( tmp_kw_name_31 );
        Py_DECREF( tmp_dict_value_153 );

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_153, 2, tmp_list_element_38 );
    tmp_dict_key_153 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_153, tmp_dict_value_153 );
    Py_DECREF( tmp_dict_value_153 );
    tmp_dict_value_154 = const_str_digest_be26d3652dd8aba2bd54126e3d3a38cc;
    tmp_dict_key_154 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_154, tmp_dict_value_154 );
    tmp_dict_value_155 = LIST_COPY( const_list_str_empty_str_plain_None_str_empty_list );
    tmp_dict_key_155 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_155, tmp_dict_value_155 );
    Py_DECREF( tmp_dict_value_155 );
    frame_module->f_lineno = 552;
    tmp_assign_source_245 = CALL_FUNCTION( tmp_called_name_241, tmp_args_name_31, tmp_kw_name_31 );
    Py_DECREF( tmp_called_name_241 );
    Py_DECREF( tmp_kw_name_31 );
    if ( tmp_assign_source_245 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryMaxSwapBarriersSGIX, tmp_assign_source_245 );
    tmp_source_name_211 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_211 == NULL ))
    {
        tmp_source_name_211 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_211 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 556;
        goto frame_exception_exit_1;
    }

    tmp_called_name_244 = LOOKUP_ATTRIBUTE( tmp_source_name_211, const_str_plain_Constant );
    if ( tmp_called_name_244 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 556;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 556;
    tmp_assign_source_246 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_244, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SUN_get_transparent_index_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_244 );
    if ( tmp_assign_source_246 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 556;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SUN_get_transparent_index, tmp_assign_source_246 );
    tmp_source_name_212 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_212 == NULL ))
    {
        tmp_source_name_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_212 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 557;
        goto frame_exception_exit_1;
    }

    tmp_called_name_245 = LOOKUP_ATTRIBUTE( tmp_source_name_212, const_str_plain_createBaseFunction );
    if ( tmp_called_name_245 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 557;
        goto frame_exception_exit_1;
    }
    tmp_args_name_32 = const_tuple_str_plain_glXGetTransparentIndexSUN_tuple;
    tmp_kw_name_32 = _PyDict_NewPresized( 5 );
    tmp_source_name_213 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_213 == NULL ))
    {
        tmp_source_name_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_213 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_156 = LOOKUP_ATTRIBUTE( tmp_source_name_213, const_str_plain_GL );
    if ( tmp_dict_value_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );

        exception_lineno = 558;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_156 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_156, tmp_dict_value_156 );
    Py_DECREF( tmp_dict_value_156 );
    tmp_dict_value_157 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_157 == NULL ))
    {
        tmp_dict_value_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_157 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_157 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_157, tmp_dict_value_157 );
    tmp_dict_value_158 = PyList_New( 4 );
    tmp_called_name_246 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_246 == NULL ))
    {
        tmp_called_name_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_246 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_84 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_84 == NULL ))
    {
        tmp_args_element_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_84 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 559;
    {
        PyObject *call_args[] = { tmp_args_element_name_84 };
        tmp_list_element_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_246, call_args );
    }

    if ( tmp_list_element_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_158, 0, tmp_list_element_39 );
    tmp_list_element_39 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Window );

    if (unlikely( tmp_list_element_39 == NULL ))
    {
        tmp_list_element_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Window );
    }

    if ( tmp_list_element_39 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Window" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_39 );
    PyList_SET_ITEM( tmp_dict_value_158, 1, tmp_list_element_39 );
    tmp_list_element_39 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Window );

    if (unlikely( tmp_list_element_39 == NULL ))
    {
        tmp_list_element_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Window );
    }

    if ( tmp_list_element_39 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Window" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_39 );
    PyList_SET_ITEM( tmp_dict_value_158, 2, tmp_list_element_39 );
    tmp_called_name_247 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_247 == NULL ))
    {
        tmp_called_name_247 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_247 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_85 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_long );

    if (unlikely( tmp_args_element_name_85 == NULL ))
    {
        tmp_args_element_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_long );
    }

    if ( tmp_args_element_name_85 == NULL )
    {
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_long" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 559;
    {
        PyObject *call_args[] = { tmp_args_element_name_85 };
        tmp_list_element_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_247, call_args );
    }

    if ( tmp_list_element_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_245 );
        Py_DECREF( tmp_kw_name_32 );
        Py_DECREF( tmp_dict_value_158 );

        exception_lineno = 559;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_158, 3, tmp_list_element_39 );
    tmp_dict_key_158 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_158, tmp_dict_value_158 );
    Py_DECREF( tmp_dict_value_158 );
    tmp_dict_value_159 = const_str_digest_3dda1d29b25a10161c5f9a4e5dc7c5b9;
    tmp_dict_key_159 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_159, tmp_dict_value_159 );
    tmp_dict_value_160 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_empty_list );
    tmp_dict_key_160 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_160, tmp_dict_value_160 );
    Py_DECREF( tmp_dict_value_160 );
    frame_module->f_lineno = 561;
    tmp_assign_source_247 = CALL_FUNCTION( tmp_called_name_245, tmp_args_name_32, tmp_kw_name_32 );
    Py_DECREF( tmp_called_name_245 );
    Py_DECREF( tmp_kw_name_32 );
    if ( tmp_assign_source_247 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 561;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetTransparentIndexSUN, tmp_assign_source_247 );
    tmp_source_name_214 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_214 == NULL ))
    {
        tmp_source_name_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_214 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_called_name_248 = LOOKUP_ATTRIBUTE( tmp_source_name_214, const_str_plain_Constant );
    if ( tmp_called_name_248 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 565;
    tmp_assign_source_248 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_248, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MESA_copy_sub_buffer_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_248 );
    if ( tmp_assign_source_248 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MESA_copy_sub_buffer, tmp_assign_source_248 );
    tmp_source_name_215 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_215 == NULL ))
    {
        tmp_source_name_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_215 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 566;
        goto frame_exception_exit_1;
    }

    tmp_called_name_249 = LOOKUP_ATTRIBUTE( tmp_source_name_215, const_str_plain_createBaseFunction );
    if ( tmp_called_name_249 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;
        goto frame_exception_exit_1;
    }
    tmp_args_name_33 = const_tuple_str_plain_glXCopySubBufferMESA_tuple;
    tmp_kw_name_33 = _PyDict_NewPresized( 5 );
    tmp_source_name_216 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_216 == NULL ))
    {
        tmp_source_name_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_216 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 567;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_161 = LOOKUP_ATTRIBUTE( tmp_source_name_216, const_str_plain_GL );
    if ( tmp_dict_value_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );

        exception_lineno = 567;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_161 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_161, tmp_dict_value_161 );
    Py_DECREF( tmp_dict_value_161 );
    tmp_dict_value_162 = Py_None;
    tmp_dict_key_162 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_162, tmp_dict_value_162 );
    tmp_dict_value_163 = PyList_New( 6 );
    tmp_called_name_250 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_250 == NULL ))
    {
        tmp_called_name_250 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_250 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_86 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_86 == NULL ))
    {
        tmp_args_element_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_86 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 568;
    {
        PyObject *call_args[] = { tmp_args_element_name_86 };
        tmp_list_element_40 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_250, call_args );
    }

    if ( tmp_list_element_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_163, 0, tmp_list_element_40 );
    tmp_list_element_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_40 == NULL ))
    {
        tmp_list_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_40 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_40 );
    PyList_SET_ITEM( tmp_dict_value_163, 1, tmp_list_element_40 );
    tmp_list_element_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_40 == NULL ))
    {
        tmp_list_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_40 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_40 );
    PyList_SET_ITEM( tmp_dict_value_163, 2, tmp_list_element_40 );
    tmp_list_element_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_40 == NULL ))
    {
        tmp_list_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_40 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_40 );
    PyList_SET_ITEM( tmp_dict_value_163, 3, tmp_list_element_40 );
    tmp_list_element_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_40 == NULL ))
    {
        tmp_list_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_40 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_40 );
    PyList_SET_ITEM( tmp_dict_value_163, 4, tmp_list_element_40 );
    tmp_list_element_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_40 == NULL ))
    {
        tmp_list_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_40 == NULL )
    {
        Py_DECREF( tmp_called_name_249 );
        Py_DECREF( tmp_kw_name_33 );
        Py_DECREF( tmp_dict_value_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_40 );
    PyList_SET_ITEM( tmp_dict_value_163, 5, tmp_list_element_40 );
    tmp_dict_key_163 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_163, tmp_dict_value_163 );
    Py_DECREF( tmp_dict_value_163 );
    tmp_dict_value_164 = const_str_digest_c877cef31141df17a00e6beb7c56cd78;
    tmp_dict_key_164 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_164, tmp_dict_value_164 );
    tmp_dict_value_165 = LIST_COPY( const_list_d59d2abe556344752577c1505c03cf5f_list );
    tmp_dict_key_165 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_165, tmp_dict_value_165 );
    Py_DECREF( tmp_dict_value_165 );
    frame_module->f_lineno = 570;
    tmp_assign_source_249 = CALL_FUNCTION( tmp_called_name_249, tmp_args_name_33, tmp_kw_name_33 );
    Py_DECREF( tmp_called_name_249 );
    Py_DECREF( tmp_kw_name_33 );
    if ( tmp_assign_source_249 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXCopySubBufferMESA, tmp_assign_source_249 );
    tmp_source_name_217 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_217 == NULL ))
    {
        tmp_source_name_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_217 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 574;
        goto frame_exception_exit_1;
    }

    tmp_called_name_251 = LOOKUP_ATTRIBUTE( tmp_source_name_217, const_str_plain_Constant );
    if ( tmp_called_name_251 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 574;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 574;
    tmp_assign_source_250 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_251, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MESA_pixmap_colormap_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_251 );
    if ( tmp_assign_source_250 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 574;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MESA_pixmap_colormap, tmp_assign_source_250 );
    tmp_assign_source_251 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_251 == NULL ))
    {
        tmp_assign_source_251 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_251 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 575;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Colormap, tmp_assign_source_251 );
    tmp_source_name_218 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_218 == NULL ))
    {
        tmp_source_name_218 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_218 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 576;
        goto frame_exception_exit_1;
    }

    tmp_called_name_252 = LOOKUP_ATTRIBUTE( tmp_source_name_218, const_str_plain_createBaseFunction );
    if ( tmp_called_name_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 576;
        goto frame_exception_exit_1;
    }
    tmp_args_name_34 = const_tuple_str_plain_glXCreateGLXPixmapMESA_tuple;
    tmp_kw_name_34 = _PyDict_NewPresized( 5 );
    tmp_source_name_219 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_219 == NULL ))
    {
        tmp_source_name_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_219 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 577;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_166 = LOOKUP_ATTRIBUTE( tmp_source_name_219, const_str_plain_GL );
    if ( tmp_dict_value_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );

        exception_lineno = 577;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_166 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_34, tmp_dict_key_166, tmp_dict_value_166 );
    Py_DECREF( tmp_dict_value_166 );
    tmp_dict_value_167 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPixmap );

    if (unlikely( tmp_dict_value_167 == NULL ))
    {
        tmp_dict_value_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPixmap );
    }

    if ( tmp_dict_value_167 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPixmap" );
        exception_tb = NULL;

        exception_lineno = 577;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_167 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_34, tmp_dict_key_167, tmp_dict_value_167 );
    tmp_dict_value_168 = PyList_New( 4 );
    tmp_called_name_253 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_253 == NULL ))
    {
        tmp_called_name_253 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_253 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_87 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_87 == NULL ))
    {
        tmp_args_element_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_87 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 578;
    {
        PyObject *call_args[] = { tmp_args_element_name_87 };
        tmp_list_element_41 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_253, call_args );
    }

    if ( tmp_list_element_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_168, 0, tmp_list_element_41 );
    tmp_called_name_254 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_254 == NULL ))
    {
        tmp_called_name_254 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_254 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_88 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XVisualInfo );

    if (unlikely( tmp_args_element_name_88 == NULL ))
    {
        tmp_args_element_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XVisualInfo );
    }

    if ( tmp_args_element_name_88 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XVisualInfo" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 578;
    {
        PyObject *call_args[] = { tmp_args_element_name_88 };
        tmp_list_element_41 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_254, call_args );
    }

    if ( tmp_list_element_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_168, 1, tmp_list_element_41 );
    tmp_list_element_41 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Pixmap );

    if (unlikely( tmp_list_element_41 == NULL ))
    {
        tmp_list_element_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Pixmap );
    }

    if ( tmp_list_element_41 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Pixmap" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_41 );
    PyList_SET_ITEM( tmp_dict_value_168, 2, tmp_list_element_41 );
    tmp_list_element_41 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Colormap );

    if (unlikely( tmp_list_element_41 == NULL ))
    {
        tmp_list_element_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Colormap );
    }

    if ( tmp_list_element_41 == NULL )
    {
        Py_DECREF( tmp_called_name_252 );
        Py_DECREF( tmp_kw_name_34 );
        Py_DECREF( tmp_dict_value_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Colormap" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_41 );
    PyList_SET_ITEM( tmp_dict_value_168, 3, tmp_list_element_41 );
    tmp_dict_key_168 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_34, tmp_dict_key_168, tmp_dict_value_168 );
    Py_DECREF( tmp_dict_value_168 );
    tmp_dict_value_169 = const_str_digest_d20c72bb25b687acfb9fdbf49bdaedf3;
    tmp_dict_key_169 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_34, tmp_dict_key_169, tmp_dict_value_169 );
    tmp_dict_value_170 = LIST_COPY( const_list_str_empty_str_empty_str_plain_None_str_plain_None_list );
    tmp_dict_key_170 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_34, tmp_dict_key_170, tmp_dict_value_170 );
    Py_DECREF( tmp_dict_value_170 );
    frame_module->f_lineno = 580;
    tmp_assign_source_252 = CALL_FUNCTION( tmp_called_name_252, tmp_args_name_34, tmp_kw_name_34 );
    Py_DECREF( tmp_called_name_252 );
    Py_DECREF( tmp_kw_name_34 );
    if ( tmp_assign_source_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 580;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXCreateGLXPixmapMESA, tmp_assign_source_252 );
    tmp_source_name_220 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_220 == NULL ))
    {
        tmp_source_name_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_220 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 584;
        goto frame_exception_exit_1;
    }

    tmp_called_name_255 = LOOKUP_ATTRIBUTE( tmp_source_name_220, const_str_plain_Constant );
    if ( tmp_called_name_255 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 584;
    tmp_assign_source_253 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_255, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MESA_release_buffers_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_255 );
    if ( tmp_assign_source_253 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MESA_release_buffers, tmp_assign_source_253 );
    tmp_source_name_221 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_221 == NULL ))
    {
        tmp_source_name_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_221 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 585;
        goto frame_exception_exit_1;
    }

    tmp_called_name_256 = LOOKUP_ATTRIBUTE( tmp_source_name_221, const_str_plain_createBaseFunction );
    if ( tmp_called_name_256 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 585;
        goto frame_exception_exit_1;
    }
    tmp_args_name_35 = const_tuple_str_plain_glXReleaseBuffersMESA_tuple;
    tmp_kw_name_35 = _PyDict_NewPresized( 5 );
    tmp_source_name_222 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_222 == NULL ))
    {
        tmp_source_name_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_222 == NULL )
    {
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 586;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_171 = LOOKUP_ATTRIBUTE( tmp_source_name_222, const_str_plain_GL );
    if ( tmp_dict_value_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );

        exception_lineno = 586;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_171 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_35, tmp_dict_key_171, tmp_dict_value_171 );
    Py_DECREF( tmp_dict_value_171 );
    tmp_dict_value_172 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_172 == NULL ))
    {
        tmp_dict_value_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_172 == NULL )
    {
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 586;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_172 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_35, tmp_dict_key_172, tmp_dict_value_172 );
    tmp_dict_value_173 = PyList_New( 2 );
    tmp_called_name_257 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_257 == NULL ))
    {
        tmp_called_name_257 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_257 == NULL )
    {
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );
        Py_DECREF( tmp_dict_value_173 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 587;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_89 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_89 == NULL ))
    {
        tmp_args_element_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_89 == NULL )
    {
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );
        Py_DECREF( tmp_dict_value_173 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 587;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 587;
    {
        PyObject *call_args[] = { tmp_args_element_name_89 };
        tmp_list_element_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_257, call_args );
    }

    if ( tmp_list_element_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );
        Py_DECREF( tmp_dict_value_173 );

        exception_lineno = 587;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_173, 0, tmp_list_element_42 );
    tmp_list_element_42 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_42 == NULL ))
    {
        tmp_list_element_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_42 == NULL )
    {
        Py_DECREF( tmp_called_name_256 );
        Py_DECREF( tmp_kw_name_35 );
        Py_DECREF( tmp_dict_value_173 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 587;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_42 );
    PyList_SET_ITEM( tmp_dict_value_173, 1, tmp_list_element_42 );
    tmp_dict_key_173 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_35, tmp_dict_key_173, tmp_dict_value_173 );
    Py_DECREF( tmp_dict_value_173 );
    tmp_dict_value_174 = const_str_digest_59f7bef38b9ff905398a19f57d30e4e2;
    tmp_dict_key_174 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_35, tmp_dict_key_174, tmp_dict_value_174 );
    tmp_dict_value_175 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_175 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_35, tmp_dict_key_175, tmp_dict_value_175 );
    Py_DECREF( tmp_dict_value_175 );
    frame_module->f_lineno = 589;
    tmp_assign_source_254 = CALL_FUNCTION( tmp_called_name_256, tmp_args_name_35, tmp_kw_name_35 );
    Py_DECREF( tmp_called_name_256 );
    Py_DECREF( tmp_kw_name_35 );
    if ( tmp_assign_source_254 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 589;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXReleaseBuffersMESA, tmp_assign_source_254 );
    tmp_source_name_223 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_223 == NULL ))
    {
        tmp_source_name_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_223 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 593;
        goto frame_exception_exit_1;
    }

    tmp_called_name_258 = LOOKUP_ATTRIBUTE( tmp_source_name_223, const_str_plain_Constant );
    if ( tmp_called_name_258 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 593;
    tmp_assign_source_255 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_258, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MESA_set_3dfx_mode_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_258 );
    if ( tmp_assign_source_255 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MESA_set_3dfx_mode, tmp_assign_source_255 );
    tmp_source_name_224 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_224 == NULL ))
    {
        tmp_source_name_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_224 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 594;
        goto frame_exception_exit_1;
    }

    tmp_called_name_259 = LOOKUP_ATTRIBUTE( tmp_source_name_224, const_str_plain_createBaseFunction );
    if ( tmp_called_name_259 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 594;
        goto frame_exception_exit_1;
    }
    tmp_args_name_36 = const_tuple_str_plain_glXSet3DfxModeMESA_tuple;
    tmp_kw_name_36 = _PyDict_NewPresized( 5 );
    tmp_source_name_225 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_225 == NULL ))
    {
        tmp_source_name_225 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_225 == NULL )
    {
        Py_DECREF( tmp_called_name_259 );
        Py_DECREF( tmp_kw_name_36 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 595;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_176 = LOOKUP_ATTRIBUTE( tmp_source_name_225, const_str_plain_GL );
    if ( tmp_dict_value_176 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_259 );
        Py_DECREF( tmp_kw_name_36 );

        exception_lineno = 595;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_176 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_36, tmp_dict_key_176, tmp_dict_value_176 );
    Py_DECREF( tmp_dict_value_176 );
    tmp_dict_value_177 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_177 == NULL ))
    {
        tmp_dict_value_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_177 == NULL )
    {
        Py_DECREF( tmp_called_name_259 );
        Py_DECREF( tmp_kw_name_36 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 595;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_177 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_36, tmp_dict_key_177, tmp_dict_value_177 );
    tmp_dict_value_178 = PyList_New( 1 );
    tmp_list_element_43 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_43 == NULL ))
    {
        tmp_list_element_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_43 == NULL )
    {
        Py_DECREF( tmp_called_name_259 );
        Py_DECREF( tmp_kw_name_36 );
        Py_DECREF( tmp_dict_value_178 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 596;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_43 );
    PyList_SET_ITEM( tmp_dict_value_178, 0, tmp_list_element_43 );
    tmp_dict_key_178 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_36, tmp_dict_key_178, tmp_dict_value_178 );
    Py_DECREF( tmp_dict_value_178 );
    tmp_dict_value_179 = const_str_digest_6e11ba28b53fbd45e6aff59887b45101;
    tmp_dict_key_179 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_36, tmp_dict_key_179, tmp_dict_value_179 );
    tmp_dict_value_180 = LIST_COPY( const_list_str_plain_None_list );
    tmp_dict_key_180 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_36, tmp_dict_key_180, tmp_dict_value_180 );
    Py_DECREF( tmp_dict_value_180 );
    frame_module->f_lineno = 598;
    tmp_assign_source_256 = CALL_FUNCTION( tmp_called_name_259, tmp_args_name_36, tmp_kw_name_36 );
    Py_DECREF( tmp_called_name_259 );
    Py_DECREF( tmp_kw_name_36 );
    if ( tmp_assign_source_256 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 598;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXSet3DfxModeMESA, tmp_assign_source_256 );
    tmp_source_name_226 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_226 == NULL ))
    {
        tmp_source_name_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_226 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 602;
        goto frame_exception_exit_1;
    }

    tmp_called_name_260 = LOOKUP_ATTRIBUTE( tmp_source_name_226, const_str_plain_Constant );
    if ( tmp_called_name_260 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 602;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 602;
    tmp_assign_source_257 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_260, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_visual_select_group_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_260 );
    if ( tmp_assign_source_257 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 602;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_visual_select_group, tmp_assign_source_257 );
    tmp_source_name_227 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_227 == NULL ))
    {
        tmp_source_name_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_227 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 604;
        goto frame_exception_exit_1;
    }

    tmp_called_name_261 = LOOKUP_ATTRIBUTE( tmp_source_name_227, const_str_plain_Constant );
    if ( tmp_called_name_261 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 604;
    tmp_assign_source_258 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_261, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_OML_swap_method_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_261 );
    if ( tmp_assign_source_258 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_OML_swap_method, tmp_assign_source_258 );
    tmp_source_name_228 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_228 == NULL ))
    {
        tmp_source_name_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_228 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 606;
        goto frame_exception_exit_1;
    }

    tmp_called_name_262 = LOOKUP_ATTRIBUTE( tmp_source_name_228, const_str_plain_Constant );
    if ( tmp_called_name_262 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 606;
    tmp_assign_source_259 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_262, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_OML_sync_control_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_262 );
    if ( tmp_assign_source_259 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_OML_sync_control, tmp_assign_source_259 );
    tmp_source_name_229 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_229 == NULL ))
    {
        tmp_source_name_229 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_229 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 607;
        goto frame_exception_exit_1;
    }

    tmp_called_name_263 = LOOKUP_ATTRIBUTE( tmp_source_name_229, const_str_plain_createBaseFunction );
    if ( tmp_called_name_263 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 607;
        goto frame_exception_exit_1;
    }
    tmp_args_name_37 = const_tuple_str_plain_glXGetSyncValuesOML_tuple;
    tmp_kw_name_37 = _PyDict_NewPresized( 5 );
    tmp_source_name_230 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_230 == NULL ))
    {
        tmp_source_name_230 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_230 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 608;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_181 = LOOKUP_ATTRIBUTE( tmp_source_name_230, const_str_plain_GL );
    if ( tmp_dict_value_181 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );

        exception_lineno = 608;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_181 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_181, tmp_dict_value_181 );
    Py_DECREF( tmp_dict_value_181 );
    tmp_dict_value_182 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_182 == NULL ))
    {
        tmp_dict_value_182 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_182 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 608;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_182 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_182, tmp_dict_value_182 );
    tmp_dict_value_183 = PyList_New( 5 );
    tmp_called_name_264 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_264 == NULL ))
    {
        tmp_called_name_264 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_264 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_90 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_90 == NULL ))
    {
        tmp_args_element_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_90 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 609;
    {
        PyObject *call_args[] = { tmp_args_element_name_90 };
        tmp_list_element_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_264, call_args );
    }

    if ( tmp_list_element_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_183, 0, tmp_list_element_44 );
    tmp_list_element_44 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_44 == NULL ))
    {
        tmp_list_element_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_44 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_44 );
    PyList_SET_ITEM( tmp_dict_value_183, 1, tmp_list_element_44 );
    tmp_called_name_265 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_265 == NULL ))
    {
        tmp_called_name_265 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_265 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_91 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_91 == NULL ))
    {
        tmp_args_element_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_91 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 609;
    {
        PyObject *call_args[] = { tmp_args_element_name_91 };
        tmp_list_element_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_265, call_args );
    }

    if ( tmp_list_element_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_183, 2, tmp_list_element_44 );
    tmp_called_name_266 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_266 == NULL ))
    {
        tmp_called_name_266 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_266 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_92 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_92 == NULL ))
    {
        tmp_args_element_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_92 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 609;
    {
        PyObject *call_args[] = { tmp_args_element_name_92 };
        tmp_list_element_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_266, call_args );
    }

    if ( tmp_list_element_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_183, 3, tmp_list_element_44 );
    tmp_called_name_267 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_267 == NULL ))
    {
        tmp_called_name_267 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_267 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_93 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_93 == NULL ))
    {
        tmp_args_element_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_93 == NULL )
    {
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 609;
    {
        PyObject *call_args[] = { tmp_args_element_name_93 };
        tmp_list_element_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_267, call_args );
    }

    if ( tmp_list_element_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_263 );
        Py_DECREF( tmp_kw_name_37 );
        Py_DECREF( tmp_dict_value_183 );

        exception_lineno = 609;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_183, 4, tmp_list_element_44 );
    tmp_dict_key_183 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_183, tmp_dict_value_183 );
    Py_DECREF( tmp_dict_value_183 );
    tmp_dict_value_184 = const_str_digest_ca9ae164781f69747152eee8e449d7e7;
    tmp_dict_key_184 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_184, tmp_dict_value_184 );
    tmp_dict_value_185 = LIST_COPY( const_list_str_empty_str_plain_None_str_empty_str_empty_str_empty_list );
    tmp_dict_key_185 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_185, tmp_dict_value_185 );
    Py_DECREF( tmp_dict_value_185 );
    frame_module->f_lineno = 611;
    tmp_assign_source_260 = CALL_FUNCTION( tmp_called_name_263, tmp_args_name_37, tmp_kw_name_37 );
    Py_DECREF( tmp_called_name_263 );
    Py_DECREF( tmp_kw_name_37 );
    if ( tmp_assign_source_260 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 611;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetSyncValuesOML, tmp_assign_source_260 );
    tmp_source_name_231 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_231 == NULL ))
    {
        tmp_source_name_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_231 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 614;
        goto frame_exception_exit_1;
    }

    tmp_called_name_268 = LOOKUP_ATTRIBUTE( tmp_source_name_231, const_str_plain_createBaseFunction );
    if ( tmp_called_name_268 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;
        goto frame_exception_exit_1;
    }
    tmp_args_name_38 = const_tuple_str_plain_glXGetMscRateOML_tuple;
    tmp_kw_name_38 = _PyDict_NewPresized( 5 );
    tmp_source_name_232 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_232 == NULL ))
    {
        tmp_source_name_232 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_232 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 615;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_186 = LOOKUP_ATTRIBUTE( tmp_source_name_232, const_str_plain_GL );
    if ( tmp_dict_value_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );

        exception_lineno = 615;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_186 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_38, tmp_dict_key_186, tmp_dict_value_186 );
    Py_DECREF( tmp_dict_value_186 );
    tmp_dict_value_187 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_187 == NULL ))
    {
        tmp_dict_value_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_187 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 615;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_187 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_38, tmp_dict_key_187, tmp_dict_value_187 );
    tmp_dict_value_188 = PyList_New( 4 );
    tmp_called_name_269 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_269 == NULL ))
    {
        tmp_called_name_269 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_269 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_94 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_94 == NULL ))
    {
        tmp_args_element_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_94 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 616;
    {
        PyObject *call_args[] = { tmp_args_element_name_94 };
        tmp_list_element_45 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_269, call_args );
    }

    if ( tmp_list_element_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_188, 0, tmp_list_element_45 );
    tmp_list_element_45 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_45 == NULL ))
    {
        tmp_list_element_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_45 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_45 );
    PyList_SET_ITEM( tmp_dict_value_188, 1, tmp_list_element_45 );
    tmp_called_name_270 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_270 == NULL ))
    {
        tmp_called_name_270 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_270 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_95 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int32 );

    if (unlikely( tmp_args_element_name_95 == NULL ))
    {
        tmp_args_element_name_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int32 );
    }

    if ( tmp_args_element_name_95 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int32" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 616;
    {
        PyObject *call_args[] = { tmp_args_element_name_95 };
        tmp_list_element_45 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_270, call_args );
    }

    if ( tmp_list_element_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_188, 2, tmp_list_element_45 );
    tmp_called_name_271 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_271 == NULL ))
    {
        tmp_called_name_271 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_271 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_96 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int32 );

    if (unlikely( tmp_args_element_name_96 == NULL ))
    {
        tmp_args_element_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int32 );
    }

    if ( tmp_args_element_name_96 == NULL )
    {
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int32" );
        exception_tb = NULL;

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 616;
    {
        PyObject *call_args[] = { tmp_args_element_name_96 };
        tmp_list_element_45 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_271, call_args );
    }

    if ( tmp_list_element_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_268 );
        Py_DECREF( tmp_kw_name_38 );
        Py_DECREF( tmp_dict_value_188 );

        exception_lineno = 616;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_188, 3, tmp_list_element_45 );
    tmp_dict_key_188 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_38, tmp_dict_key_188, tmp_dict_value_188 );
    Py_DECREF( tmp_dict_value_188 );
    tmp_dict_value_189 = const_str_digest_b67da9e81fb1c6045c097ad53cfab8ef;
    tmp_dict_key_189 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_38, tmp_dict_key_189, tmp_dict_value_189 );
    tmp_dict_value_190 = LIST_COPY( const_list_str_empty_str_plain_None_str_empty_str_empty_list );
    tmp_dict_key_190 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_38, tmp_dict_key_190, tmp_dict_value_190 );
    Py_DECREF( tmp_dict_value_190 );
    frame_module->f_lineno = 618;
    tmp_assign_source_261 = CALL_FUNCTION( tmp_called_name_268, tmp_args_name_38, tmp_kw_name_38 );
    Py_DECREF( tmp_called_name_268 );
    Py_DECREF( tmp_kw_name_38 );
    if ( tmp_assign_source_261 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 618;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetMscRateOML, tmp_assign_source_261 );
    tmp_source_name_233 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_233 == NULL ))
    {
        tmp_source_name_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_233 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 621;
        goto frame_exception_exit_1;
    }

    tmp_called_name_272 = LOOKUP_ATTRIBUTE( tmp_source_name_233, const_str_plain_createBaseFunction );
    if ( tmp_called_name_272 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;
        goto frame_exception_exit_1;
    }
    tmp_args_name_39 = const_tuple_str_plain_glXSwapBuffersMscOML_tuple;
    tmp_kw_name_39 = _PyDict_NewPresized( 5 );
    tmp_source_name_234 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_234 == NULL ))
    {
        tmp_source_name_234 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_234 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 622;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_191 = LOOKUP_ATTRIBUTE( tmp_source_name_234, const_str_plain_GL );
    if ( tmp_dict_value_191 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );

        exception_lineno = 622;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_191 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_191, tmp_dict_value_191 );
    Py_DECREF( tmp_dict_value_191 );
    tmp_dict_value_192 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_dict_value_192 == NULL ))
    {
        tmp_dict_value_192 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_dict_value_192 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 622;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_192 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_192, tmp_dict_value_192 );
    tmp_dict_value_193 = PyList_New( 5 );
    tmp_called_name_273 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_273 == NULL ))
    {
        tmp_called_name_273 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_273 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_97 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_97 == NULL ))
    {
        tmp_args_element_name_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_97 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 623;
    {
        PyObject *call_args[] = { tmp_args_element_name_97 };
        tmp_list_element_46 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_273, call_args );
    }

    if ( tmp_list_element_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_193, 0, tmp_list_element_46 );
    tmp_list_element_46 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_46 == NULL ))
    {
        tmp_list_element_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_46 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_46 );
    PyList_SET_ITEM( tmp_dict_value_193, 1, tmp_list_element_46 );
    tmp_list_element_46 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_46 == NULL ))
    {
        tmp_list_element_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_46 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_46 );
    PyList_SET_ITEM( tmp_dict_value_193, 2, tmp_list_element_46 );
    tmp_list_element_46 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_46 == NULL ))
    {
        tmp_list_element_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_46 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_46 );
    PyList_SET_ITEM( tmp_dict_value_193, 3, tmp_list_element_46 );
    tmp_list_element_46 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_46 == NULL ))
    {
        tmp_list_element_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_46 == NULL )
    {
        Py_DECREF( tmp_called_name_272 );
        Py_DECREF( tmp_kw_name_39 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 623;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_46 );
    PyList_SET_ITEM( tmp_dict_value_193, 4, tmp_list_element_46 );
    tmp_dict_key_193 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_193, tmp_dict_value_193 );
    Py_DECREF( tmp_dict_value_193 );
    tmp_dict_value_194 = const_str_digest_cd8ac315b16312396595f657b5904f0b;
    tmp_dict_key_194 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_194, tmp_dict_value_194 );
    tmp_dict_value_195 = LIST_COPY( const_list_29c8c37838f12b34e1d058b558f46607_list );
    tmp_dict_key_195 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_195, tmp_dict_value_195 );
    Py_DECREF( tmp_dict_value_195 );
    frame_module->f_lineno = 625;
    tmp_assign_source_262 = CALL_FUNCTION( tmp_called_name_272, tmp_args_name_39, tmp_kw_name_39 );
    Py_DECREF( tmp_called_name_272 );
    Py_DECREF( tmp_kw_name_39 );
    if ( tmp_assign_source_262 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 625;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXSwapBuffersMscOML, tmp_assign_source_262 );
    tmp_source_name_235 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_235 == NULL ))
    {
        tmp_source_name_235 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_235 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 628;
        goto frame_exception_exit_1;
    }

    tmp_called_name_274 = LOOKUP_ATTRIBUTE( tmp_source_name_235, const_str_plain_createBaseFunction );
    if ( tmp_called_name_274 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 628;
        goto frame_exception_exit_1;
    }
    tmp_args_name_40 = const_tuple_str_plain_glXWaitForMscOML_tuple;
    tmp_kw_name_40 = _PyDict_NewPresized( 5 );
    tmp_source_name_236 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_236 == NULL ))
    {
        tmp_source_name_236 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_236 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 629;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_196 = LOOKUP_ATTRIBUTE( tmp_source_name_236, const_str_plain_GL );
    if ( tmp_dict_value_196 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );

        exception_lineno = 629;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_196 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_196, tmp_dict_value_196 );
    Py_DECREF( tmp_dict_value_196 );
    tmp_dict_value_197 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_197 == NULL ))
    {
        tmp_dict_value_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_197 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 629;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_197 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_197, tmp_dict_value_197 );
    tmp_dict_value_198 = PyList_New( 8 );
    tmp_called_name_275 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_275 == NULL ))
    {
        tmp_called_name_275 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_275 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_98 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_98 == NULL ))
    {
        tmp_args_element_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_98 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 630;
    {
        PyObject *call_args[] = { tmp_args_element_name_98 };
        tmp_list_element_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_275, call_args );
    }

    if ( tmp_list_element_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 0, tmp_list_element_47 );
    tmp_list_element_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_47 == NULL ))
    {
        tmp_list_element_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_47 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_47 );
    PyList_SET_ITEM( tmp_dict_value_198, 1, tmp_list_element_47 );
    tmp_list_element_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_47 == NULL ))
    {
        tmp_list_element_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_47 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_47 );
    PyList_SET_ITEM( tmp_dict_value_198, 2, tmp_list_element_47 );
    tmp_list_element_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_47 == NULL ))
    {
        tmp_list_element_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_47 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_47 );
    PyList_SET_ITEM( tmp_dict_value_198, 3, tmp_list_element_47 );
    tmp_list_element_47 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_47 == NULL ))
    {
        tmp_list_element_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_47 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_47 );
    PyList_SET_ITEM( tmp_dict_value_198, 4, tmp_list_element_47 );
    tmp_called_name_276 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_276 == NULL ))
    {
        tmp_called_name_276 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_276 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_99 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_99 == NULL ))
    {
        tmp_args_element_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_99 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 630;
    {
        PyObject *call_args[] = { tmp_args_element_name_99 };
        tmp_list_element_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_276, call_args );
    }

    if ( tmp_list_element_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 5, tmp_list_element_47 );
    tmp_called_name_277 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_277 == NULL ))
    {
        tmp_called_name_277 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_277 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_100 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_100 == NULL ))
    {
        tmp_args_element_name_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_100 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 630;
    {
        PyObject *call_args[] = { tmp_args_element_name_100 };
        tmp_list_element_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_277, call_args );
    }

    if ( tmp_list_element_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 6, tmp_list_element_47 );
    tmp_called_name_278 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_278 == NULL ))
    {
        tmp_called_name_278 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_278 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_101 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_101 == NULL ))
    {
        tmp_args_element_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_101 == NULL )
    {
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 630;
    {
        PyObject *call_args[] = { tmp_args_element_name_101 };
        tmp_list_element_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_278, call_args );
    }

    if ( tmp_list_element_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_274 );
        Py_DECREF( tmp_kw_name_40 );
        Py_DECREF( tmp_dict_value_198 );

        exception_lineno = 630;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_198, 7, tmp_list_element_47 );
    tmp_dict_key_198 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_198, tmp_dict_value_198 );
    Py_DECREF( tmp_dict_value_198 );
    tmp_dict_value_199 = const_str_digest_53bcd321db2929cbe97b7b71d5358d00;
    tmp_dict_key_199 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_199, tmp_dict_value_199 );
    tmp_dict_value_200 = LIST_COPY( const_list_c8d9348d653912db50e0af383c251eac_list );
    tmp_dict_key_200 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_200, tmp_dict_value_200 );
    Py_DECREF( tmp_dict_value_200 );
    frame_module->f_lineno = 632;
    tmp_assign_source_263 = CALL_FUNCTION( tmp_called_name_274, tmp_args_name_40, tmp_kw_name_40 );
    Py_DECREF( tmp_called_name_274 );
    Py_DECREF( tmp_kw_name_40 );
    if ( tmp_assign_source_263 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 632;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXWaitForMscOML, tmp_assign_source_263 );
    tmp_source_name_237 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_237 == NULL ))
    {
        tmp_source_name_237 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_237 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 635;
        goto frame_exception_exit_1;
    }

    tmp_called_name_279 = LOOKUP_ATTRIBUTE( tmp_source_name_237, const_str_plain_createBaseFunction );
    if ( tmp_called_name_279 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;
        goto frame_exception_exit_1;
    }
    tmp_args_name_41 = const_tuple_str_plain_glXWaitForSbcOML_tuple;
    tmp_kw_name_41 = _PyDict_NewPresized( 5 );
    tmp_source_name_238 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_238 == NULL ))
    {
        tmp_source_name_238 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_238 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 636;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_201 = LOOKUP_ATTRIBUTE( tmp_source_name_238, const_str_plain_GL );
    if ( tmp_dict_value_201 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );

        exception_lineno = 636;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_201 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_201, tmp_dict_value_201 );
    Py_DECREF( tmp_dict_value_201 );
    tmp_dict_value_202 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_202 == NULL ))
    {
        tmp_dict_value_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_202 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 636;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_202 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_202, tmp_dict_value_202 );
    tmp_dict_value_203 = PyList_New( 6 );
    tmp_called_name_280 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_280 == NULL ))
    {
        tmp_called_name_280 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_280 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_102 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_102 == NULL ))
    {
        tmp_args_element_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_102 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 637;
    {
        PyObject *call_args[] = { tmp_args_element_name_102 };
        tmp_list_element_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_280, call_args );
    }

    if ( tmp_list_element_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_203, 0, tmp_list_element_48 );
    tmp_list_element_48 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_48 == NULL ))
    {
        tmp_list_element_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_48 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_48 );
    PyList_SET_ITEM( tmp_dict_value_203, 1, tmp_list_element_48 );
    tmp_list_element_48 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_list_element_48 == NULL ))
    {
        tmp_list_element_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_list_element_48 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_48 );
    PyList_SET_ITEM( tmp_dict_value_203, 2, tmp_list_element_48 );
    tmp_called_name_281 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_281 == NULL ))
    {
        tmp_called_name_281 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_281 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_103 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_103 == NULL ))
    {
        tmp_args_element_name_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_103 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 637;
    {
        PyObject *call_args[] = { tmp_args_element_name_103 };
        tmp_list_element_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_281, call_args );
    }

    if ( tmp_list_element_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_203, 3, tmp_list_element_48 );
    tmp_called_name_282 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_282 == NULL ))
    {
        tmp_called_name_282 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_282 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_104 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_104 == NULL ))
    {
        tmp_args_element_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_104 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 637;
    {
        PyObject *call_args[] = { tmp_args_element_name_104 };
        tmp_list_element_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_282, call_args );
    }

    if ( tmp_list_element_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_203, 4, tmp_list_element_48 );
    tmp_called_name_283 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_283 == NULL ))
    {
        tmp_called_name_283 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_283 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_105 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int64 );

    if (unlikely( tmp_args_element_name_105 == NULL ))
    {
        tmp_args_element_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int64 );
    }

    if ( tmp_args_element_name_105 == NULL )
    {
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int64" );
        exception_tb = NULL;

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 637;
    {
        PyObject *call_args[] = { tmp_args_element_name_105 };
        tmp_list_element_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_283, call_args );
    }

    if ( tmp_list_element_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_279 );
        Py_DECREF( tmp_kw_name_41 );
        Py_DECREF( tmp_dict_value_203 );

        exception_lineno = 637;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_203, 5, tmp_list_element_48 );
    tmp_dict_key_203 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_203, tmp_dict_value_203 );
    Py_DECREF( tmp_dict_value_203 );
    tmp_dict_value_204 = const_str_digest_5ccc01c5a4080327d693c971f8f44722;
    tmp_dict_key_204 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_204, tmp_dict_value_204 );
    tmp_dict_value_205 = LIST_COPY( const_list_c0e5a91fffcb5b0a2212cb7aa2b75804_list );
    tmp_dict_key_205 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_205, tmp_dict_value_205 );
    Py_DECREF( tmp_dict_value_205 );
    frame_module->f_lineno = 639;
    tmp_assign_source_264 = CALL_FUNCTION( tmp_called_name_279, tmp_args_name_41, tmp_kw_name_41 );
    Py_DECREF( tmp_called_name_279 );
    Py_DECREF( tmp_kw_name_41 );
    if ( tmp_assign_source_264 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 639;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXWaitForSbcOML, tmp_assign_source_264 );
    tmp_source_name_239 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_239 == NULL ))
    {
        tmp_source_name_239 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_239 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 643;
        goto frame_exception_exit_1;
    }

    tmp_called_name_284 = LOOKUP_ATTRIBUTE( tmp_source_name_239, const_str_plain_Constant );
    if ( tmp_called_name_284 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 643;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 643;
    tmp_assign_source_265 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_284, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_NV_float_buffer_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_284 );
    if ( tmp_assign_source_265 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 643;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_NV_float_buffer, tmp_assign_source_265 );
    tmp_source_name_240 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_240 == NULL ))
    {
        tmp_source_name_240 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_240 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 645;
        goto frame_exception_exit_1;
    }

    tmp_called_name_285 = LOOKUP_ATTRIBUTE( tmp_source_name_240, const_str_plain_Constant );
    if ( tmp_called_name_285 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 645;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 645;
    tmp_assign_source_266 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_285, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_SGIX_hyperpipe_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_285 );
    if ( tmp_assign_source_266 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 645;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_SGIX_hyperpipe, tmp_assign_source_266 );
    // Tried code:
    tmp_assign_source_267 = PyTuple_New( 1 );
    tmp_tuple_element_38 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_38 == NULL ))
    {
        tmp_tuple_element_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_267 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 646;
        goto try_except_handler_10;
    }

    Py_INCREF( tmp_tuple_element_38 );
    PyTuple_SET_ITEM( tmp_assign_source_267, 0, tmp_tuple_element_38 );
    assert( tmp_class_creation_10__bases == NULL );
    tmp_class_creation_10__bases = tmp_assign_source_267;

    tmp_assign_source_268 = impl_OpenGL$raw$_GLX_NV$$$class_10_struct_anon_107( NULL );
    assert( tmp_assign_source_268 != NULL );
    assert( tmp_class_creation_10__class_dict == NULL );
    tmp_class_creation_10__class_dict = tmp_assign_source_268;

    tmp_compare_left_10 = const_str_plain___metaclass__;
    tmp_compare_right_10 = tmp_class_creation_10__class_dict;

    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dict_name_10 = tmp_class_creation_10__class_dict;

    tmp_key_name_10 = const_str_plain___metaclass__;
    tmp_assign_source_269 = DICT_GET_ITEM( tmp_dict_name_10, tmp_key_name_10 );
    if ( tmp_assign_source_269 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 646;
        goto try_except_handler_10;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_bases_name_10 = tmp_class_creation_10__bases;

    tmp_assign_source_269 = SELECT_METACLASS( tmp_bases_name_10, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_10:;
    assert( tmp_class_creation_10__metaclass == NULL );
    tmp_class_creation_10__metaclass = tmp_assign_source_269;

    tmp_called_name_286 = tmp_class_creation_10__metaclass;

    tmp_args_element_name_106 = const_str_plain_struct_anon_107;
    tmp_args_element_name_107 = tmp_class_creation_10__bases;

    tmp_args_element_name_108 = tmp_class_creation_10__class_dict;

    frame_module->f_lineno = 646;
    {
        PyObject *call_args[] = { tmp_args_element_name_106, tmp_args_element_name_107, tmp_args_element_name_108 };
        tmp_assign_source_270 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_286, call_args );
    }

    if ( tmp_assign_source_270 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 646;
        goto try_except_handler_10;
    }
    assert( tmp_class_creation_10__class == NULL );
    tmp_class_creation_10__class = tmp_assign_source_270;

    goto try_end_10;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    tmp_assign_source_271 = tmp_class_creation_10__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_107, tmp_assign_source_271 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class );
    Py_DECREF( tmp_class_creation_10__class );
    tmp_class_creation_10__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases );
    Py_DECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class_dict );
    Py_DECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__metaclass );
    Py_DECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    tmp_assattr_name_10 = PyList_New( 2 );
    tmp_list_element_49 = PyTuple_New( 2 );
    tmp_tuple_element_39 = const_str_plain_pipeName;
    Py_INCREF( tmp_tuple_element_39 );
    PyTuple_SET_ITEM( tmp_list_element_49, 0, tmp_tuple_element_39 );
    tmp_left_name_1 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_char );

    if (unlikely( tmp_left_name_1 == NULL ))
    {
        tmp_left_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_char );
    }

    if ( tmp_left_name_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_10 );
        Py_DECREF( tmp_list_element_49 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_char" );
        exception_tb = NULL;

        exception_lineno = 652;
        goto frame_exception_exit_1;
    }

    tmp_right_name_1 = const_int_pos_80;
    tmp_tuple_element_39 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_tuple_element_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_10 );
        Py_DECREF( tmp_list_element_49 );

        exception_lineno = 652;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_49, 1, tmp_tuple_element_39 );
    PyList_SET_ITEM( tmp_assattr_name_10, 0, tmp_list_element_49 );
    tmp_list_element_49 = PyTuple_New( 2 );
    tmp_tuple_element_40 = const_str_plain_networkId;
    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_list_element_49, 0, tmp_tuple_element_40 );
    tmp_tuple_element_40 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_40 == NULL ))
    {
        tmp_tuple_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_40 == NULL )
    {
        Py_DECREF( tmp_assattr_name_10 );
        Py_DECREF( tmp_list_element_49 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 653;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_list_element_49, 1, tmp_tuple_element_40 );
    PyList_SET_ITEM( tmp_assattr_name_10, 1, tmp_list_element_49 );
    tmp_assattr_target_10 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_107 );

    if (unlikely( tmp_assattr_target_10 == NULL ))
    {
        tmp_assattr_target_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_107 );
    }

    if ( tmp_assattr_target_10 == NULL )
    {
        Py_DECREF( tmp_assattr_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_107" );
        exception_tb = NULL;

        exception_lineno = 651;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain__fields_, tmp_assattr_name_10 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_10 );

        exception_lineno = 651;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_10 );
    tmp_assign_source_272 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_107 );

    if (unlikely( tmp_assign_source_272 == NULL ))
    {
        tmp_assign_source_272 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_107 );
    }

    if ( tmp_assign_source_272 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_107" );
        exception_tb = NULL;

        exception_lineno = 656;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeNetworkSGIX, tmp_assign_source_272 );
    tmp_source_name_241 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_241 == NULL ))
    {
        tmp_source_name_241 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_241 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 657;
        goto frame_exception_exit_1;
    }

    tmp_called_name_287 = LOOKUP_ATTRIBUTE( tmp_source_name_241, const_str_plain_createBaseFunction );
    if ( tmp_called_name_287 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 657;
        goto frame_exception_exit_1;
    }
    tmp_args_name_42 = const_tuple_str_plain_glXQueryHyperpipeNetworkSGIX_tuple;
    tmp_kw_name_42 = _PyDict_NewPresized( 5 );
    tmp_source_name_242 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_242 == NULL ))
    {
        tmp_source_name_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_242 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 658;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_206 = LOOKUP_ATTRIBUTE( tmp_source_name_242, const_str_plain_GL );
    if ( tmp_dict_value_206 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );

        exception_lineno = 658;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_206 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_42, tmp_dict_key_206, tmp_dict_value_206 );
    Py_DECREF( tmp_dict_value_206 );
    tmp_called_name_288 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_288 == NULL ))
    {
        tmp_called_name_288 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_288 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 658;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_109 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeNetworkSGIX );

    if (unlikely( tmp_args_element_name_109 == NULL ))
    {
        tmp_args_element_name_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeNetworkSGIX );
    }

    if ( tmp_args_element_name_109 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXHyperpipeNetworkSGIX" );
        exception_tb = NULL;

        exception_lineno = 658;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 658;
    {
        PyObject *call_args[] = { tmp_args_element_name_109 };
        tmp_dict_value_207 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_288, call_args );
    }

    if ( tmp_dict_value_207 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );

        exception_lineno = 658;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_207 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_42, tmp_dict_key_207, tmp_dict_value_207 );
    Py_DECREF( tmp_dict_value_207 );
    tmp_dict_value_208 = PyList_New( 2 );
    tmp_called_name_289 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_289 == NULL ))
    {
        tmp_called_name_289 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_289 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        Py_DECREF( tmp_dict_value_208 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 659;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_110 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_110 == NULL ))
    {
        tmp_args_element_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_110 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        Py_DECREF( tmp_dict_value_208 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 659;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 659;
    {
        PyObject *call_args[] = { tmp_args_element_name_110 };
        tmp_list_element_50 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_289, call_args );
    }

    if ( tmp_list_element_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        Py_DECREF( tmp_dict_value_208 );

        exception_lineno = 659;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_208, 0, tmp_list_element_50 );
    tmp_called_name_290 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_290 == NULL ))
    {
        tmp_called_name_290 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_290 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        Py_DECREF( tmp_dict_value_208 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 659;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_111 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_111 == NULL ))
    {
        tmp_args_element_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_111 == NULL )
    {
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        Py_DECREF( tmp_dict_value_208 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 659;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 659;
    {
        PyObject *call_args[] = { tmp_args_element_name_111 };
        tmp_list_element_50 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_290, call_args );
    }

    if ( tmp_list_element_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_287 );
        Py_DECREF( tmp_kw_name_42 );
        Py_DECREF( tmp_dict_value_208 );

        exception_lineno = 659;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_208, 1, tmp_list_element_50 );
    tmp_dict_key_208 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_42, tmp_dict_key_208, tmp_dict_value_208 );
    Py_DECREF( tmp_dict_value_208 );
    tmp_dict_value_209 = const_str_digest_0da1ae79a7b26bfaf6ae43f2e5c51733;
    tmp_dict_key_209 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_42, tmp_dict_key_209, tmp_dict_value_209 );
    tmp_dict_value_210 = LIST_COPY( const_list_str_empty_str_empty_list );
    tmp_dict_key_210 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_42, tmp_dict_key_210, tmp_dict_value_210 );
    Py_DECREF( tmp_dict_value_210 );
    frame_module->f_lineno = 661;
    tmp_assign_source_273 = CALL_FUNCTION( tmp_called_name_287, tmp_args_name_42, tmp_kw_name_42 );
    Py_DECREF( tmp_called_name_287 );
    Py_DECREF( tmp_kw_name_42 );
    if ( tmp_assign_source_273 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 661;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryHyperpipeNetworkSGIX, tmp_assign_source_273 );
    // Tried code:
    tmp_assign_source_274 = PyTuple_New( 1 );
    tmp_tuple_element_41 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Structure );

    if (unlikely( tmp_tuple_element_41 == NULL ))
    {
        tmp_tuple_element_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Structure );
    }

    if ( tmp_tuple_element_41 == NULL )
    {
        Py_DECREF( tmp_assign_source_274 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Structure" );
        exception_tb = NULL;

        exception_lineno = 664;
        goto try_except_handler_11;
    }

    Py_INCREF( tmp_tuple_element_41 );
    PyTuple_SET_ITEM( tmp_assign_source_274, 0, tmp_tuple_element_41 );
    assert( tmp_class_creation_11__bases == NULL );
    tmp_class_creation_11__bases = tmp_assign_source_274;

    tmp_assign_source_275 = impl_OpenGL$raw$_GLX_NV$$$class_11_struct_anon_108( NULL );
    assert( tmp_assign_source_275 != NULL );
    assert( tmp_class_creation_11__class_dict == NULL );
    tmp_class_creation_11__class_dict = tmp_assign_source_275;

    tmp_compare_left_11 = const_str_plain___metaclass__;
    tmp_compare_right_11 = tmp_class_creation_11__class_dict;

    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_dict_name_11 = tmp_class_creation_11__class_dict;

    tmp_key_name_11 = const_str_plain___metaclass__;
    tmp_assign_source_276 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
    if ( tmp_assign_source_276 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 664;
        goto try_except_handler_11;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_bases_name_11 = tmp_class_creation_11__bases;

    tmp_assign_source_276 = SELECT_METACLASS( tmp_bases_name_11, GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_11:;
    assert( tmp_class_creation_11__metaclass == NULL );
    tmp_class_creation_11__metaclass = tmp_assign_source_276;

    tmp_called_name_291 = tmp_class_creation_11__metaclass;

    tmp_args_element_name_112 = const_str_plain_struct_anon_108;
    tmp_args_element_name_113 = tmp_class_creation_11__bases;

    tmp_args_element_name_114 = tmp_class_creation_11__class_dict;

    frame_module->f_lineno = 664;
    {
        PyObject *call_args[] = { tmp_args_element_name_112, tmp_args_element_name_113, tmp_args_element_name_114 };
        tmp_assign_source_277 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_291, call_args );
    }

    if ( tmp_assign_source_277 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 664;
        goto try_except_handler_11;
    }
    assert( tmp_class_creation_11__class == NULL );
    tmp_class_creation_11__class = tmp_assign_source_277;

    goto try_end_11;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    tmp_assign_source_278 = tmp_class_creation_11__class;

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_108, tmp_assign_source_278 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class );
    Py_DECREF( tmp_class_creation_11__class );
    tmp_class_creation_11__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases );
    Py_DECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class_dict );
    Py_DECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__metaclass );
    Py_DECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    tmp_assattr_name_11 = PyList_New( 4 );
    tmp_list_element_51 = PyTuple_New( 2 );
    tmp_tuple_element_42 = const_str_plain_pipeName;
    Py_INCREF( tmp_tuple_element_42 );
    PyTuple_SET_ITEM( tmp_list_element_51, 0, tmp_tuple_element_42 );
    tmp_left_name_2 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_char );

    if (unlikely( tmp_left_name_2 == NULL ))
    {
        tmp_left_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_char );
    }

    if ( tmp_left_name_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_11 );
        Py_DECREF( tmp_list_element_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_char" );
        exception_tb = NULL;

        exception_lineno = 672;
        goto frame_exception_exit_1;
    }

    tmp_right_name_2 = const_int_pos_80;
    tmp_tuple_element_42 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_tuple_element_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_11 );
        Py_DECREF( tmp_list_element_51 );

        exception_lineno = 672;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_51, 1, tmp_tuple_element_42 );
    PyList_SET_ITEM( tmp_assattr_name_11, 0, tmp_list_element_51 );
    tmp_list_element_51 = PyTuple_New( 2 );
    tmp_tuple_element_43 = const_str_plain_channel;
    Py_INCREF( tmp_tuple_element_43 );
    PyTuple_SET_ITEM( tmp_list_element_51, 0, tmp_tuple_element_43 );
    tmp_tuple_element_43 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_43 == NULL ))
    {
        tmp_tuple_element_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_43 == NULL )
    {
        Py_DECREF( tmp_assattr_name_11 );
        Py_DECREF( tmp_list_element_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 673;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_43 );
    PyTuple_SET_ITEM( tmp_list_element_51, 1, tmp_tuple_element_43 );
    PyList_SET_ITEM( tmp_assattr_name_11, 1, tmp_list_element_51 );
    tmp_list_element_51 = PyTuple_New( 2 );
    tmp_tuple_element_44 = const_str_plain_participationType;
    Py_INCREF( tmp_tuple_element_44 );
    PyTuple_SET_ITEM( tmp_list_element_51, 0, tmp_tuple_element_44 );
    tmp_tuple_element_44 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_tuple_element_44 == NULL ))
    {
        tmp_tuple_element_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_tuple_element_44 == NULL )
    {
        Py_DECREF( tmp_assattr_name_11 );
        Py_DECREF( tmp_list_element_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 674;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_44 );
    PyTuple_SET_ITEM( tmp_list_element_51, 1, tmp_tuple_element_44 );
    PyList_SET_ITEM( tmp_assattr_name_11, 2, tmp_list_element_51 );
    tmp_list_element_51 = PyTuple_New( 2 );
    tmp_tuple_element_45 = const_str_plain_timeSlice;
    Py_INCREF( tmp_tuple_element_45 );
    PyTuple_SET_ITEM( tmp_list_element_51, 0, tmp_tuple_element_45 );
    tmp_tuple_element_45 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_tuple_element_45 == NULL ))
    {
        tmp_tuple_element_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_tuple_element_45 == NULL )
    {
        Py_DECREF( tmp_assattr_name_11 );
        Py_DECREF( tmp_list_element_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_45 );
    PyTuple_SET_ITEM( tmp_list_element_51, 1, tmp_tuple_element_45 );
    PyList_SET_ITEM( tmp_assattr_name_11, 3, tmp_list_element_51 );
    tmp_assattr_target_11 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_108 );

    if (unlikely( tmp_assattr_target_11 == NULL ))
    {
        tmp_assattr_target_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_108 );
    }

    if ( tmp_assattr_target_11 == NULL )
    {
        Py_DECREF( tmp_assattr_name_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_108" );
        exception_tb = NULL;

        exception_lineno = 671;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain__fields_, tmp_assattr_name_11 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_11 );

        exception_lineno = 671;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_11 );
    tmp_assign_source_279 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_struct_anon_108 );

    if (unlikely( tmp_assign_source_279 == NULL ))
    {
        tmp_assign_source_279 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct_anon_108 );
    }

    if ( tmp_assign_source_279 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct_anon_108" );
        exception_tb = NULL;

        exception_lineno = 678;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeConfigSGIX, tmp_assign_source_279 );
    tmp_source_name_243 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_243 == NULL ))
    {
        tmp_source_name_243 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_243 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 679;
        goto frame_exception_exit_1;
    }

    tmp_called_name_292 = LOOKUP_ATTRIBUTE( tmp_source_name_243, const_str_plain_createBaseFunction );
    if ( tmp_called_name_292 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 679;
        goto frame_exception_exit_1;
    }
    tmp_args_name_43 = const_tuple_str_plain_glXHyperpipeConfigSGIX_tuple;
    tmp_kw_name_43 = _PyDict_NewPresized( 5 );
    tmp_source_name_244 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_244 == NULL ))
    {
        tmp_source_name_244 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_244 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 680;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_211 = LOOKUP_ATTRIBUTE( tmp_source_name_244, const_str_plain_GL );
    if ( tmp_dict_value_211 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );

        exception_lineno = 680;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_211 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_43, tmp_dict_key_211, tmp_dict_value_211 );
    Py_DECREF( tmp_dict_value_211 );
    tmp_dict_value_212 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_212 == NULL ))
    {
        tmp_dict_value_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_212 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 680;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_212 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_43, tmp_dict_key_212, tmp_dict_value_212 );
    tmp_dict_value_213 = PyList_New( 5 );
    tmp_called_name_293 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_293 == NULL ))
    {
        tmp_called_name_293 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_293 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_115 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_115 == NULL ))
    {
        tmp_args_element_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_115 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 681;
    {
        PyObject *call_args[] = { tmp_args_element_name_115 };
        tmp_list_element_52 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_293, call_args );
    }

    if ( tmp_list_element_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_213, 0, tmp_list_element_52 );
    tmp_list_element_52 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_52 == NULL ))
    {
        tmp_list_element_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_52 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_52 );
    PyList_SET_ITEM( tmp_dict_value_213, 1, tmp_list_element_52 );
    tmp_list_element_52 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_52 == NULL ))
    {
        tmp_list_element_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_52 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_52 );
    PyList_SET_ITEM( tmp_dict_value_213, 2, tmp_list_element_52 );
    tmp_called_name_294 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_294 == NULL ))
    {
        tmp_called_name_294 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_294 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_116 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeConfigSGIX );

    if (unlikely( tmp_args_element_name_116 == NULL ))
    {
        tmp_args_element_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeConfigSGIX );
    }

    if ( tmp_args_element_name_116 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXHyperpipeConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 681;
    {
        PyObject *call_args[] = { tmp_args_element_name_116 };
        tmp_list_element_52 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_294, call_args );
    }

    if ( tmp_list_element_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_213, 3, tmp_list_element_52 );
    tmp_called_name_295 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_295 == NULL ))
    {
        tmp_called_name_295 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_295 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_117 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_117 == NULL ))
    {
        tmp_args_element_name_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_117 == NULL )
    {
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 681;
    {
        PyObject *call_args[] = { tmp_args_element_name_117 };
        tmp_list_element_52 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_295, call_args );
    }

    if ( tmp_list_element_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_292 );
        Py_DECREF( tmp_kw_name_43 );
        Py_DECREF( tmp_dict_value_213 );

        exception_lineno = 681;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_213, 4, tmp_list_element_52 );
    tmp_dict_key_213 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_43, tmp_dict_key_213, tmp_dict_value_213 );
    Py_DECREF( tmp_dict_value_213 );
    tmp_dict_value_214 = const_str_digest_656688ee175b35551db67ddd2ed6db4d;
    tmp_dict_key_214 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_43, tmp_dict_key_214, tmp_dict_value_214 );
    tmp_dict_value_215 = LIST_COPY( const_list_str_empty_str_plain_None_str_plain_None_str_empty_str_empty_list );
    tmp_dict_key_215 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_43, tmp_dict_key_215, tmp_dict_value_215 );
    Py_DECREF( tmp_dict_value_215 );
    frame_module->f_lineno = 683;
    tmp_assign_source_280 = CALL_FUNCTION( tmp_called_name_292, tmp_args_name_43, tmp_kw_name_43 );
    Py_DECREF( tmp_called_name_292 );
    Py_DECREF( tmp_kw_name_43 );
    if ( tmp_assign_source_280 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 683;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXHyperpipeConfigSGIX, tmp_assign_source_280 );
    tmp_source_name_245 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_245 == NULL ))
    {
        tmp_source_name_245 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_245 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 686;
        goto frame_exception_exit_1;
    }

    tmp_called_name_296 = LOOKUP_ATTRIBUTE( tmp_source_name_245, const_str_plain_createBaseFunction );
    if ( tmp_called_name_296 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 686;
        goto frame_exception_exit_1;
    }
    tmp_args_name_44 = const_tuple_str_plain_glXQueryHyperpipeConfigSGIX_tuple;
    tmp_kw_name_44 = _PyDict_NewPresized( 5 );
    tmp_source_name_246 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_246 == NULL ))
    {
        tmp_source_name_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_246 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 687;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_216 = LOOKUP_ATTRIBUTE( tmp_source_name_246, const_str_plain_GL );
    if ( tmp_dict_value_216 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );

        exception_lineno = 687;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_216 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_44, tmp_dict_key_216, tmp_dict_value_216 );
    Py_DECREF( tmp_dict_value_216 );
    tmp_called_name_297 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_297 == NULL ))
    {
        tmp_called_name_297 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_297 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 687;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_118 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeConfigSGIX );

    if (unlikely( tmp_args_element_name_118 == NULL ))
    {
        tmp_args_element_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXHyperpipeConfigSGIX );
    }

    if ( tmp_args_element_name_118 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXHyperpipeConfigSGIX" );
        exception_tb = NULL;

        exception_lineno = 687;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 687;
    {
        PyObject *call_args[] = { tmp_args_element_name_118 };
        tmp_dict_value_217 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_297, call_args );
    }

    if ( tmp_dict_value_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );

        exception_lineno = 687;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_217 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_44, tmp_dict_key_217, tmp_dict_value_217 );
    Py_DECREF( tmp_dict_value_217 );
    tmp_dict_value_218 = PyList_New( 3 );
    tmp_called_name_298 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_298 == NULL ))
    {
        tmp_called_name_298 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_298 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_119 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_119 == NULL ))
    {
        tmp_args_element_name_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_119 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 688;
    {
        PyObject *call_args[] = { tmp_args_element_name_119 };
        tmp_list_element_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_298, call_args );
    }

    if ( tmp_list_element_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_218, 0, tmp_list_element_53 );
    tmp_list_element_53 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_53 == NULL ))
    {
        tmp_list_element_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_53 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_53 );
    PyList_SET_ITEM( tmp_dict_value_218, 1, tmp_list_element_53 );
    tmp_called_name_299 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_299 == NULL ))
    {
        tmp_called_name_299 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_299 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_120 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_120 == NULL ))
    {
        tmp_args_element_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_120 == NULL )
    {
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 688;
    {
        PyObject *call_args[] = { tmp_args_element_name_120 };
        tmp_list_element_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_299, call_args );
    }

    if ( tmp_list_element_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_296 );
        Py_DECREF( tmp_kw_name_44 );
        Py_DECREF( tmp_dict_value_218 );

        exception_lineno = 688;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_218, 2, tmp_list_element_53 );
    tmp_dict_key_218 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_44, tmp_dict_key_218, tmp_dict_value_218 );
    Py_DECREF( tmp_dict_value_218 );
    tmp_dict_value_219 = const_str_digest_482f73b6e0342793adf6e03678f66408;
    tmp_dict_key_219 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_44, tmp_dict_key_219, tmp_dict_value_219 );
    tmp_dict_value_220 = LIST_COPY( const_list_str_empty_str_plain_None_str_empty_list );
    tmp_dict_key_220 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_44, tmp_dict_key_220, tmp_dict_value_220 );
    Py_DECREF( tmp_dict_value_220 );
    frame_module->f_lineno = 690;
    tmp_assign_source_281 = CALL_FUNCTION( tmp_called_name_296, tmp_args_name_44, tmp_kw_name_44 );
    Py_DECREF( tmp_called_name_296 );
    Py_DECREF( tmp_kw_name_44 );
    if ( tmp_assign_source_281 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 690;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryHyperpipeConfigSGIX, tmp_assign_source_281 );
    tmp_source_name_247 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_247 == NULL ))
    {
        tmp_source_name_247 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_247 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 693;
        goto frame_exception_exit_1;
    }

    tmp_called_name_300 = LOOKUP_ATTRIBUTE( tmp_source_name_247, const_str_plain_createBaseFunction );
    if ( tmp_called_name_300 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 693;
        goto frame_exception_exit_1;
    }
    tmp_args_name_45 = const_tuple_str_plain_glXDestroyHyperpipeConfigSGIX_tuple;
    tmp_kw_name_45 = _PyDict_NewPresized( 5 );
    tmp_source_name_248 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_248 == NULL ))
    {
        tmp_source_name_248 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_248 == NULL )
    {
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 694;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_221 = LOOKUP_ATTRIBUTE( tmp_source_name_248, const_str_plain_GL );
    if ( tmp_dict_value_221 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );

        exception_lineno = 694;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_221 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_45, tmp_dict_key_221, tmp_dict_value_221 );
    Py_DECREF( tmp_dict_value_221 );
    tmp_dict_value_222 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_222 == NULL ))
    {
        tmp_dict_value_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_222 == NULL )
    {
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 694;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_222 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_45, tmp_dict_key_222, tmp_dict_value_222 );
    tmp_dict_value_223 = PyList_New( 2 );
    tmp_called_name_301 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_301 == NULL ))
    {
        tmp_called_name_301 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_301 == NULL )
    {
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );
        Py_DECREF( tmp_dict_value_223 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 695;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_121 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_121 == NULL ))
    {
        tmp_args_element_name_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_121 == NULL )
    {
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );
        Py_DECREF( tmp_dict_value_223 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 695;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 695;
    {
        PyObject *call_args[] = { tmp_args_element_name_121 };
        tmp_list_element_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_301, call_args );
    }

    if ( tmp_list_element_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );
        Py_DECREF( tmp_dict_value_223 );

        exception_lineno = 695;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_223, 0, tmp_list_element_54 );
    tmp_list_element_54 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_54 == NULL ))
    {
        tmp_list_element_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_54 == NULL )
    {
        Py_DECREF( tmp_called_name_300 );
        Py_DECREF( tmp_kw_name_45 );
        Py_DECREF( tmp_dict_value_223 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 695;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_54 );
    PyList_SET_ITEM( tmp_dict_value_223, 1, tmp_list_element_54 );
    tmp_dict_key_223 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_45, tmp_dict_key_223, tmp_dict_value_223 );
    Py_DECREF( tmp_dict_value_223 );
    tmp_dict_value_224 = const_str_digest_073463760f38e6d101fe65f893b5d98b;
    tmp_dict_key_224 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_45, tmp_dict_key_224, tmp_dict_value_224 );
    tmp_dict_value_225 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_225 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_45, tmp_dict_key_225, tmp_dict_value_225 );
    Py_DECREF( tmp_dict_value_225 );
    frame_module->f_lineno = 697;
    tmp_assign_source_282 = CALL_FUNCTION( tmp_called_name_300, tmp_args_name_45, tmp_kw_name_45 );
    Py_DECREF( tmp_called_name_300 );
    Py_DECREF( tmp_kw_name_45 );
    if ( tmp_assign_source_282 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 697;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXDestroyHyperpipeConfigSGIX, tmp_assign_source_282 );
    tmp_source_name_249 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_249 == NULL ))
    {
        tmp_source_name_249 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_249 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 700;
        goto frame_exception_exit_1;
    }

    tmp_called_name_302 = LOOKUP_ATTRIBUTE( tmp_source_name_249, const_str_plain_createBaseFunction );
    if ( tmp_called_name_302 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 700;
        goto frame_exception_exit_1;
    }
    tmp_args_name_46 = const_tuple_str_plain_glXBindHyperpipeSGIX_tuple;
    tmp_kw_name_46 = _PyDict_NewPresized( 5 );
    tmp_source_name_250 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_250 == NULL ))
    {
        tmp_source_name_250 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_250 == NULL )
    {
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 701;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_226 = LOOKUP_ATTRIBUTE( tmp_source_name_250, const_str_plain_GL );
    if ( tmp_dict_value_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );

        exception_lineno = 701;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_226 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_46, tmp_dict_key_226, tmp_dict_value_226 );
    Py_DECREF( tmp_dict_value_226 );
    tmp_dict_value_227 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_227 == NULL ))
    {
        tmp_dict_value_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_227 == NULL )
    {
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 701;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_227 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_46, tmp_dict_key_227, tmp_dict_value_227 );
    tmp_dict_value_228 = PyList_New( 2 );
    tmp_called_name_303 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_303 == NULL ))
    {
        tmp_called_name_303 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_303 == NULL )
    {
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );
        Py_DECREF( tmp_dict_value_228 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 702;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_122 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_122 == NULL ))
    {
        tmp_args_element_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_122 == NULL )
    {
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );
        Py_DECREF( tmp_dict_value_228 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 702;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 702;
    {
        PyObject *call_args[] = { tmp_args_element_name_122 };
        tmp_list_element_55 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_303, call_args );
    }

    if ( tmp_list_element_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );
        Py_DECREF( tmp_dict_value_228 );

        exception_lineno = 702;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_228, 0, tmp_list_element_55 );
    tmp_list_element_55 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_55 == NULL ))
    {
        tmp_list_element_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_55 == NULL )
    {
        Py_DECREF( tmp_called_name_302 );
        Py_DECREF( tmp_kw_name_46 );
        Py_DECREF( tmp_dict_value_228 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 702;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_55 );
    PyList_SET_ITEM( tmp_dict_value_228, 1, tmp_list_element_55 );
    tmp_dict_key_228 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_46, tmp_dict_key_228, tmp_dict_value_228 );
    Py_DECREF( tmp_dict_value_228 );
    tmp_dict_value_229 = const_str_digest_4be51464519e91b2d20686d7e832d2eb;
    tmp_dict_key_229 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_46, tmp_dict_key_229, tmp_dict_value_229 );
    tmp_dict_value_230 = LIST_COPY( const_list_str_empty_str_plain_None_list );
    tmp_dict_key_230 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_46, tmp_dict_key_230, tmp_dict_value_230 );
    Py_DECREF( tmp_dict_value_230 );
    frame_module->f_lineno = 704;
    tmp_assign_source_283 = CALL_FUNCTION( tmp_called_name_302, tmp_args_name_46, tmp_kw_name_46 );
    Py_DECREF( tmp_called_name_302 );
    Py_DECREF( tmp_kw_name_46 );
    if ( tmp_assign_source_283 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXBindHyperpipeSGIX, tmp_assign_source_283 );
    tmp_source_name_251 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_251 == NULL ))
    {
        tmp_source_name_251 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_251 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 707;
        goto frame_exception_exit_1;
    }

    tmp_called_name_304 = LOOKUP_ATTRIBUTE( tmp_source_name_251, const_str_plain_createBaseFunction );
    if ( tmp_called_name_304 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 707;
        goto frame_exception_exit_1;
    }
    tmp_args_name_47 = const_tuple_str_plain_glXQueryHyperpipeBestAttribSGIX_tuple;
    tmp_kw_name_47 = _PyDict_NewPresized( 5 );
    tmp_source_name_252 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_252 == NULL ))
    {
        tmp_source_name_252 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_252 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 708;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_231 = LOOKUP_ATTRIBUTE( tmp_source_name_252, const_str_plain_GL );
    if ( tmp_dict_value_231 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );

        exception_lineno = 708;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_231 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_47, tmp_dict_key_231, tmp_dict_value_231 );
    Py_DECREF( tmp_dict_value_231 );
    tmp_dict_value_232 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_232 == NULL ))
    {
        tmp_dict_value_232 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_232 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 708;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_232 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_47, tmp_dict_key_232, tmp_dict_value_232 );
    tmp_dict_value_233 = PyList_New( 6 );
    tmp_called_name_305 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_305 == NULL ))
    {
        tmp_called_name_305 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_305 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_123 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_123 == NULL ))
    {
        tmp_args_element_name_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_123 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 709;
    {
        PyObject *call_args[] = { tmp_args_element_name_123 };
        tmp_list_element_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_305, call_args );
    }

    if ( tmp_list_element_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_233, 0, tmp_list_element_56 );
    tmp_list_element_56 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_56 == NULL ))
    {
        tmp_list_element_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_56 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_56 );
    PyList_SET_ITEM( tmp_dict_value_233, 1, tmp_list_element_56 );
    tmp_list_element_56 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_56 == NULL ))
    {
        tmp_list_element_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_56 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_56 );
    PyList_SET_ITEM( tmp_dict_value_233, 2, tmp_list_element_56 );
    tmp_list_element_56 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_56 == NULL ))
    {
        tmp_list_element_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_56 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_56 );
    PyList_SET_ITEM( tmp_dict_value_233, 3, tmp_list_element_56 );
    tmp_called_name_306 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_306 == NULL ))
    {
        tmp_called_name_306 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_306 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 709;
    tmp_list_element_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_306, &PyTuple_GET_ITEM( const_tuple_none_tuple, 0 ) );

    if ( tmp_list_element_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_233, 4, tmp_list_element_56 );
    tmp_called_name_307 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_307 == NULL ))
    {
        tmp_called_name_307 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_307 == NULL )
    {
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 709;
    tmp_list_element_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_307, &PyTuple_GET_ITEM( const_tuple_none_tuple, 0 ) );

    if ( tmp_list_element_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_304 );
        Py_DECREF( tmp_kw_name_47 );
        Py_DECREF( tmp_dict_value_233 );

        exception_lineno = 709;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_233, 5, tmp_list_element_56 );
    tmp_dict_key_233 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_47, tmp_dict_key_233, tmp_dict_value_233 );
    Py_DECREF( tmp_dict_value_233 );
    tmp_dict_value_234 = const_str_digest_740661ae8072b9b6f27c227efa5faec8;
    tmp_dict_key_234 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_47, tmp_dict_key_234, tmp_dict_value_234 );
    tmp_dict_value_235 = LIST_COPY( const_list_45412d477a1d06e2d718b391256bcf77_list );
    tmp_dict_key_235 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_47, tmp_dict_key_235, tmp_dict_value_235 );
    Py_DECREF( tmp_dict_value_235 );
    frame_module->f_lineno = 711;
    tmp_assign_source_284 = CALL_FUNCTION( tmp_called_name_304, tmp_args_name_47, tmp_kw_name_47 );
    Py_DECREF( tmp_called_name_304 );
    Py_DECREF( tmp_kw_name_47 );
    if ( tmp_assign_source_284 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 711;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryHyperpipeBestAttribSGIX, tmp_assign_source_284 );
    tmp_source_name_253 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_253 == NULL ))
    {
        tmp_source_name_253 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_253 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 714;
        goto frame_exception_exit_1;
    }

    tmp_called_name_308 = LOOKUP_ATTRIBUTE( tmp_source_name_253, const_str_plain_createBaseFunction );
    if ( tmp_called_name_308 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 714;
        goto frame_exception_exit_1;
    }
    tmp_args_name_48 = const_tuple_str_plain_glXHyperpipeAttribSGIX_tuple;
    tmp_kw_name_48 = _PyDict_NewPresized( 5 );
    tmp_source_name_254 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_254 == NULL ))
    {
        tmp_source_name_254 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_254 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 715;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_236 = LOOKUP_ATTRIBUTE( tmp_source_name_254, const_str_plain_GL );
    if ( tmp_dict_value_236 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );

        exception_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_236 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_48, tmp_dict_key_236, tmp_dict_value_236 );
    Py_DECREF( tmp_dict_value_236 );
    tmp_dict_value_237 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_237 == NULL ))
    {
        tmp_dict_value_237 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_237 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 715;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_237 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_48, tmp_dict_key_237, tmp_dict_value_237 );
    tmp_dict_value_238 = PyList_New( 5 );
    tmp_called_name_309 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_309 == NULL ))
    {
        tmp_called_name_309 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_309 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_124 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_124 == NULL ))
    {
        tmp_args_element_name_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_124 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 716;
    {
        PyObject *call_args[] = { tmp_args_element_name_124 };
        tmp_list_element_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_309, call_args );
    }

    if ( tmp_list_element_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_238, 0, tmp_list_element_57 );
    tmp_list_element_57 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_57 == NULL ))
    {
        tmp_list_element_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_57 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_57 );
    PyList_SET_ITEM( tmp_dict_value_238, 1, tmp_list_element_57 );
    tmp_list_element_57 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_57 == NULL ))
    {
        tmp_list_element_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_57 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_57 );
    PyList_SET_ITEM( tmp_dict_value_238, 2, tmp_list_element_57 );
    tmp_list_element_57 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_57 == NULL ))
    {
        tmp_list_element_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_57 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_57 );
    PyList_SET_ITEM( tmp_dict_value_238, 3, tmp_list_element_57 );
    tmp_called_name_310 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_310 == NULL ))
    {
        tmp_called_name_310 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_310 == NULL )
    {
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 716;
    tmp_list_element_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_310, &PyTuple_GET_ITEM( const_tuple_none_tuple, 0 ) );

    if ( tmp_list_element_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_308 );
        Py_DECREF( tmp_kw_name_48 );
        Py_DECREF( tmp_dict_value_238 );

        exception_lineno = 716;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_238, 4, tmp_list_element_57 );
    tmp_dict_key_238 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_48, tmp_dict_key_238, tmp_dict_value_238 );
    Py_DECREF( tmp_dict_value_238 );
    tmp_dict_value_239 = const_str_digest_db6d710a60d6c8c3d65c539b1d93387a;
    tmp_dict_key_239 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_48, tmp_dict_key_239, tmp_dict_value_239 );
    tmp_dict_value_240 = LIST_COPY( const_list_314788751150d7acc81145c4eab8ab45_list );
    tmp_dict_key_240 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_48, tmp_dict_key_240, tmp_dict_value_240 );
    Py_DECREF( tmp_dict_value_240 );
    frame_module->f_lineno = 718;
    tmp_assign_source_285 = CALL_FUNCTION( tmp_called_name_308, tmp_args_name_48, tmp_kw_name_48 );
    Py_DECREF( tmp_called_name_308 );
    Py_DECREF( tmp_kw_name_48 );
    if ( tmp_assign_source_285 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 718;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXHyperpipeAttribSGIX, tmp_assign_source_285 );
    tmp_source_name_255 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_255 == NULL ))
    {
        tmp_source_name_255 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_255 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 721;
        goto frame_exception_exit_1;
    }

    tmp_called_name_311 = LOOKUP_ATTRIBUTE( tmp_source_name_255, const_str_plain_createBaseFunction );
    if ( tmp_called_name_311 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 721;
        goto frame_exception_exit_1;
    }
    tmp_args_name_49 = const_tuple_str_plain_glXQueryHyperpipeAttribSGIX_tuple;
    tmp_kw_name_49 = _PyDict_NewPresized( 5 );
    tmp_source_name_256 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_256 == NULL ))
    {
        tmp_source_name_256 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_256 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_241 = LOOKUP_ATTRIBUTE( tmp_source_name_256, const_str_plain_GL );
    if ( tmp_dict_value_241 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );

        exception_lineno = 722;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_241 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_49, tmp_dict_key_241, tmp_dict_value_241 );
    Py_DECREF( tmp_dict_value_241 );
    tmp_dict_value_242 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_242 == NULL ))
    {
        tmp_dict_value_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_242 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_242 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_49, tmp_dict_key_242, tmp_dict_value_242 );
    tmp_dict_value_243 = PyList_New( 5 );
    tmp_called_name_312 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_312 == NULL ))
    {
        tmp_called_name_312 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_312 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_125 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_125 == NULL ))
    {
        tmp_args_element_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_125 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 723;
    {
        PyObject *call_args[] = { tmp_args_element_name_125 };
        tmp_list_element_58 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_312, call_args );
    }

    if ( tmp_list_element_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_243, 0, tmp_list_element_58 );
    tmp_list_element_58 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_58 == NULL ))
    {
        tmp_list_element_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_58 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_58 );
    PyList_SET_ITEM( tmp_dict_value_243, 1, tmp_list_element_58 );
    tmp_list_element_58 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_58 == NULL ))
    {
        tmp_list_element_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_58 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_58 );
    PyList_SET_ITEM( tmp_dict_value_243, 2, tmp_list_element_58 );
    tmp_list_element_58 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_58 == NULL ))
    {
        tmp_list_element_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_58 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_58 );
    PyList_SET_ITEM( tmp_dict_value_243, 3, tmp_list_element_58 );
    tmp_called_name_313 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_313 == NULL ))
    {
        tmp_called_name_313 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_313 == NULL )
    {
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 723;
    tmp_list_element_58 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_313, &PyTuple_GET_ITEM( const_tuple_none_tuple, 0 ) );

    if ( tmp_list_element_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_311 );
        Py_DECREF( tmp_kw_name_49 );
        Py_DECREF( tmp_dict_value_243 );

        exception_lineno = 723;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_243, 4, tmp_list_element_58 );
    tmp_dict_key_243 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_49, tmp_dict_key_243, tmp_dict_value_243 );
    Py_DECREF( tmp_dict_value_243 );
    tmp_dict_value_244 = const_str_digest_b393d709359b66a9f39baecd2301b73f;
    tmp_dict_key_244 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_49, tmp_dict_key_244, tmp_dict_value_244 );
    tmp_dict_value_245 = LIST_COPY( const_list_314788751150d7acc81145c4eab8ab45_list );
    tmp_dict_key_245 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_49, tmp_dict_key_245, tmp_dict_value_245 );
    Py_DECREF( tmp_dict_value_245 );
    frame_module->f_lineno = 725;
    tmp_assign_source_286 = CALL_FUNCTION( tmp_called_name_311, tmp_args_name_49, tmp_kw_name_49 );
    Py_DECREF( tmp_called_name_311 );
    Py_DECREF( tmp_kw_name_49 );
    if ( tmp_assign_source_286 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryHyperpipeAttribSGIX, tmp_assign_source_286 );
    tmp_source_name_257 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_257 == NULL ))
    {
        tmp_source_name_257 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_257 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 729;
        goto frame_exception_exit_1;
    }

    tmp_called_name_314 = LOOKUP_ATTRIBUTE( tmp_source_name_257, const_str_plain_Constant );
    if ( tmp_called_name_314 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 729;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 729;
    tmp_assign_source_287 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_314, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_MESA_agp_offset_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_314 );
    if ( tmp_assign_source_287 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 729;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_MESA_agp_offset, tmp_assign_source_287 );
    tmp_source_name_258 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_258 == NULL ))
    {
        tmp_source_name_258 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_258 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 730;
        goto frame_exception_exit_1;
    }

    tmp_called_name_315 = LOOKUP_ATTRIBUTE( tmp_source_name_258, const_str_plain_createBaseFunction );
    if ( tmp_called_name_315 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        goto frame_exception_exit_1;
    }
    tmp_args_name_50 = const_tuple_str_plain_glXGetAGPOffsetMESA_tuple;
    tmp_kw_name_50 = _PyDict_NewPresized( 5 );
    tmp_source_name_259 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_259 == NULL ))
    {
        tmp_source_name_259 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_259 == NULL )
    {
        Py_DECREF( tmp_called_name_315 );
        Py_DECREF( tmp_kw_name_50 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 731;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_246 = LOOKUP_ATTRIBUTE( tmp_source_name_259, const_str_plain_GL );
    if ( tmp_dict_value_246 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_315 );
        Py_DECREF( tmp_kw_name_50 );

        exception_lineno = 731;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_246 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_50, tmp_dict_key_246, tmp_dict_value_246 );
    Py_DECREF( tmp_dict_value_246 );
    tmp_dict_value_247 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_dict_value_247 == NULL ))
    {
        tmp_dict_value_247 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_dict_value_247 == NULL )
    {
        Py_DECREF( tmp_called_name_315 );
        Py_DECREF( tmp_kw_name_50 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 731;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_247 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_50, tmp_dict_key_247, tmp_dict_value_247 );
    tmp_dict_value_248 = PyList_New( 1 );
    tmp_called_name_316 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_316 == NULL ))
    {
        tmp_called_name_316 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_316 == NULL )
    {
        Py_DECREF( tmp_called_name_315 );
        Py_DECREF( tmp_kw_name_50 );
        Py_DECREF( tmp_dict_value_248 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 732;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 732;
    tmp_list_element_59 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_316, &PyTuple_GET_ITEM( const_tuple_none_tuple, 0 ) );

    if ( tmp_list_element_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_315 );
        Py_DECREF( tmp_kw_name_50 );
        Py_DECREF( tmp_dict_value_248 );

        exception_lineno = 732;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_248, 0, tmp_list_element_59 );
    tmp_dict_key_248 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_50, tmp_dict_key_248, tmp_dict_value_248 );
    Py_DECREF( tmp_dict_value_248 );
    tmp_dict_value_249 = const_str_digest_c02641944ae06a09a2ad26b1a7baa1a2;
    tmp_dict_key_249 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_50, tmp_dict_key_249, tmp_dict_value_249 );
    tmp_dict_value_250 = LIST_COPY( const_list_str_empty_list );
    tmp_dict_key_250 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_50, tmp_dict_key_250, tmp_dict_value_250 );
    Py_DECREF( tmp_dict_value_250 );
    frame_module->f_lineno = 734;
    tmp_assign_source_288 = CALL_FUNCTION( tmp_called_name_315, tmp_args_name_50, tmp_kw_name_50 );
    Py_DECREF( tmp_called_name_315 );
    Py_DECREF( tmp_kw_name_50 );
    if ( tmp_assign_source_288 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 734;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetAGPOffsetMESA, tmp_assign_source_288 );
    tmp_source_name_260 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_260 == NULL ))
    {
        tmp_source_name_260 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_260 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 738;
        goto frame_exception_exit_1;
    }

    tmp_called_name_317 = LOOKUP_ATTRIBUTE( tmp_source_name_260, const_str_plain_Constant );
    if ( tmp_called_name_317 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 738;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 738;
    tmp_assign_source_289 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_317, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_NV_vertex_array_range_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_317 );
    if ( tmp_assign_source_289 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 738;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_NV_vertex_array_range, tmp_assign_source_289 );
    tmp_assign_source_290 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_assign_source_290 == NULL ))
    {
        tmp_assign_source_290 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_assign_source_290 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 739;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLsizei, tmp_assign_source_290 );
    tmp_assign_source_291 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_float );

    if (unlikely( tmp_assign_source_291 == NULL ))
    {
        tmp_assign_source_291 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_float );
    }

    if ( tmp_assign_source_291 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_float" );
        exception_tb = NULL;

        exception_lineno = 740;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLfloat, tmp_assign_source_291 );
    tmp_source_name_261 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_261 == NULL ))
    {
        tmp_source_name_261 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_261 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 741;
        goto frame_exception_exit_1;
    }

    tmp_called_name_318 = LOOKUP_ATTRIBUTE( tmp_source_name_261, const_str_plain_createBaseFunction );
    if ( tmp_called_name_318 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 741;
        goto frame_exception_exit_1;
    }
    tmp_args_name_51 = const_tuple_str_plain_glXAllocateMemoryNV_tuple;
    tmp_kw_name_51 = _PyDict_NewPresized( 5 );
    tmp_source_name_262 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_262 == NULL ))
    {
        tmp_source_name_262 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_262 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 742;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_251 = LOOKUP_ATTRIBUTE( tmp_source_name_262, const_str_plain_GL );
    if ( tmp_dict_value_251 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );

        exception_lineno = 742;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_251 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_51, tmp_dict_key_251, tmp_dict_value_251 );
    Py_DECREF( tmp_dict_value_251 );
    tmp_called_name_319 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_319 == NULL ))
    {
        tmp_called_name_319 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_319 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 742;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_126 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_void );

    if (unlikely( tmp_args_element_name_126 == NULL ))
    {
        tmp_args_element_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_void );
    }

    if ( tmp_args_element_name_126 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_void" );
        exception_tb = NULL;

        exception_lineno = 742;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 742;
    {
        PyObject *call_args[] = { tmp_args_element_name_126 };
        tmp_dict_value_252 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_319, call_args );
    }

    if ( tmp_dict_value_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );

        exception_lineno = 742;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_252 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_51, tmp_dict_key_252, tmp_dict_value_252 );
    Py_DECREF( tmp_dict_value_252 );
    tmp_dict_value_253 = PyList_New( 4 );
    tmp_list_element_60 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLsizei );

    if (unlikely( tmp_list_element_60 == NULL ))
    {
        tmp_list_element_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLsizei );
    }

    if ( tmp_list_element_60 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        Py_DECREF( tmp_dict_value_253 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLsizei" );
        exception_tb = NULL;

        exception_lineno = 743;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_60 );
    PyList_SET_ITEM( tmp_dict_value_253, 0, tmp_list_element_60 );
    tmp_list_element_60 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLfloat );

    if (unlikely( tmp_list_element_60 == NULL ))
    {
        tmp_list_element_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLfloat );
    }

    if ( tmp_list_element_60 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        Py_DECREF( tmp_dict_value_253 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLfloat" );
        exception_tb = NULL;

        exception_lineno = 743;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_60 );
    PyList_SET_ITEM( tmp_dict_value_253, 1, tmp_list_element_60 );
    tmp_list_element_60 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLfloat );

    if (unlikely( tmp_list_element_60 == NULL ))
    {
        tmp_list_element_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLfloat );
    }

    if ( tmp_list_element_60 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        Py_DECREF( tmp_dict_value_253 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLfloat" );
        exception_tb = NULL;

        exception_lineno = 743;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_60 );
    PyList_SET_ITEM( tmp_dict_value_253, 2, tmp_list_element_60 );
    tmp_list_element_60 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLfloat );

    if (unlikely( tmp_list_element_60 == NULL ))
    {
        tmp_list_element_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLfloat );
    }

    if ( tmp_list_element_60 == NULL )
    {
        Py_DECREF( tmp_called_name_318 );
        Py_DECREF( tmp_kw_name_51 );
        Py_DECREF( tmp_dict_value_253 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLfloat" );
        exception_tb = NULL;

        exception_lineno = 743;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_60 );
    PyList_SET_ITEM( tmp_dict_value_253, 3, tmp_list_element_60 );
    tmp_dict_key_253 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_51, tmp_dict_key_253, tmp_dict_value_253 );
    Py_DECREF( tmp_dict_value_253 );
    tmp_dict_value_254 = const_str_digest_82b632c3e739bc15fd5521768fa13ae2;
    tmp_dict_key_254 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_51, tmp_dict_key_254, tmp_dict_value_254 );
    tmp_dict_value_255 = LIST_COPY( const_list_2adbab2f904694d00f60131444ae3422_list );
    tmp_dict_key_255 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_51, tmp_dict_key_255, tmp_dict_value_255 );
    Py_DECREF( tmp_dict_value_255 );
    frame_module->f_lineno = 745;
    tmp_assign_source_292 = CALL_FUNCTION( tmp_called_name_318, tmp_args_name_51, tmp_kw_name_51 );
    Py_DECREF( tmp_called_name_318 );
    Py_DECREF( tmp_kw_name_51 );
    if ( tmp_assign_source_292 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 745;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXAllocateMemoryNV, tmp_assign_source_292 );
    tmp_assign_source_293 = Py_None;
    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLvoid, tmp_assign_source_293 );
    tmp_source_name_263 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_263 == NULL ))
    {
        tmp_source_name_263 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_263 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 749;
        goto frame_exception_exit_1;
    }

    tmp_called_name_320 = LOOKUP_ATTRIBUTE( tmp_source_name_263, const_str_plain_createBaseFunction );
    if ( tmp_called_name_320 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 749;
        goto frame_exception_exit_1;
    }
    tmp_args_name_52 = const_tuple_str_plain_glXFreeMemoryNV_tuple;
    tmp_kw_name_52 = _PyDict_NewPresized( 5 );
    tmp_source_name_264 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_264 == NULL ))
    {
        tmp_source_name_264 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_264 == NULL )
    {
        Py_DECREF( tmp_called_name_320 );
        Py_DECREF( tmp_kw_name_52 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 750;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_256 = LOOKUP_ATTRIBUTE( tmp_source_name_264, const_str_plain_GL );
    if ( tmp_dict_value_256 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_320 );
        Py_DECREF( tmp_kw_name_52 );

        exception_lineno = 750;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_256 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_52, tmp_dict_key_256, tmp_dict_value_256 );
    Py_DECREF( tmp_dict_value_256 );
    tmp_dict_value_257 = Py_None;
    tmp_dict_key_257 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_52, tmp_dict_key_257, tmp_dict_value_257 );
    tmp_dict_value_258 = PyList_New( 1 );
    tmp_called_name_321 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_321 == NULL ))
    {
        tmp_called_name_321 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_321 == NULL )
    {
        Py_DECREF( tmp_called_name_320 );
        Py_DECREF( tmp_kw_name_52 );
        Py_DECREF( tmp_dict_value_258 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 751;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_127 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLvoid );

    if (unlikely( tmp_args_element_name_127 == NULL ))
    {
        tmp_args_element_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLvoid );
    }

    if ( tmp_args_element_name_127 == NULL )
    {
        Py_DECREF( tmp_called_name_320 );
        Py_DECREF( tmp_kw_name_52 );
        Py_DECREF( tmp_dict_value_258 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLvoid" );
        exception_tb = NULL;

        exception_lineno = 751;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 751;
    {
        PyObject *call_args[] = { tmp_args_element_name_127 };
        tmp_list_element_61 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_321, call_args );
    }

    if ( tmp_list_element_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_320 );
        Py_DECREF( tmp_kw_name_52 );
        Py_DECREF( tmp_dict_value_258 );

        exception_lineno = 751;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_258, 0, tmp_list_element_61 );
    tmp_dict_key_258 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_52, tmp_dict_key_258, tmp_dict_value_258 );
    Py_DECREF( tmp_dict_value_258 );
    tmp_dict_value_259 = const_str_digest_26c801e11906625e123d1d97ee422d76;
    tmp_dict_key_259 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_52, tmp_dict_key_259, tmp_dict_value_259 );
    tmp_dict_value_260 = LIST_COPY( const_list_str_plain_pointer_list );
    tmp_dict_key_260 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_52, tmp_dict_key_260, tmp_dict_value_260 );
    Py_DECREF( tmp_dict_value_260 );
    frame_module->f_lineno = 753;
    tmp_assign_source_294 = CALL_FUNCTION( tmp_called_name_320, tmp_args_name_52, tmp_kw_name_52 );
    Py_DECREF( tmp_called_name_320 );
    Py_DECREF( tmp_kw_name_52 );
    if ( tmp_assign_source_294 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 753;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXFreeMemoryNV, tmp_assign_source_294 );
    tmp_source_name_265 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_265 == NULL ))
    {
        tmp_source_name_265 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_265 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 757;
        goto frame_exception_exit_1;
    }

    tmp_called_name_322 = LOOKUP_ATTRIBUTE( tmp_source_name_265, const_str_plain_Constant );
    if ( tmp_called_name_322 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 757;
    tmp_assign_source_295 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_322, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_NV_swap_group_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_322 );
    if ( tmp_assign_source_295 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_NV_swap_group, tmp_assign_source_295 );
    tmp_assign_source_296 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_assign_source_296 == NULL ))
    {
        tmp_assign_source_296 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_assign_source_296 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 758;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint, tmp_assign_source_296 );
    tmp_source_name_266 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_266 == NULL ))
    {
        tmp_source_name_266 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_266 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 759;
        goto frame_exception_exit_1;
    }

    tmp_called_name_323 = LOOKUP_ATTRIBUTE( tmp_source_name_266, const_str_plain_createBaseFunction );
    if ( tmp_called_name_323 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 759;
        goto frame_exception_exit_1;
    }
    tmp_args_name_53 = const_tuple_str_plain_glXJoinSwapGroupNV_tuple;
    tmp_kw_name_53 = _PyDict_NewPresized( 5 );
    tmp_source_name_267 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_267 == NULL ))
    {
        tmp_source_name_267 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_267 == NULL )
    {
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 760;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_261 = LOOKUP_ATTRIBUTE( tmp_source_name_267, const_str_plain_GL );
    if ( tmp_dict_value_261 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );

        exception_lineno = 760;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_261 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_53, tmp_dict_key_261, tmp_dict_value_261 );
    Py_DECREF( tmp_dict_value_261 );
    tmp_dict_value_262 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_262 == NULL ))
    {
        tmp_dict_value_262 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_262 == NULL )
    {
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 760;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_262 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_53, tmp_dict_key_262, tmp_dict_value_262 );
    tmp_dict_value_263 = PyList_New( 3 );
    tmp_called_name_324 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_324 == NULL ))
    {
        tmp_called_name_324 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_324 == NULL )
    {
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        Py_DECREF( tmp_dict_value_263 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 761;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_128 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_128 == NULL ))
    {
        tmp_args_element_name_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_128 == NULL )
    {
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        Py_DECREF( tmp_dict_value_263 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 761;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 761;
    {
        PyObject *call_args[] = { tmp_args_element_name_128 };
        tmp_list_element_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_324, call_args );
    }

    if ( tmp_list_element_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        Py_DECREF( tmp_dict_value_263 );

        exception_lineno = 761;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_263, 0, tmp_list_element_62 );
    tmp_list_element_62 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_62 == NULL ))
    {
        tmp_list_element_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_62 == NULL )
    {
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        Py_DECREF( tmp_dict_value_263 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 761;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_62 );
    PyList_SET_ITEM( tmp_dict_value_263, 1, tmp_list_element_62 );
    tmp_list_element_62 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_list_element_62 == NULL ))
    {
        tmp_list_element_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_list_element_62 == NULL )
    {
        Py_DECREF( tmp_called_name_323 );
        Py_DECREF( tmp_kw_name_53 );
        Py_DECREF( tmp_dict_value_263 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 761;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_62 );
    PyList_SET_ITEM( tmp_dict_value_263, 2, tmp_list_element_62 );
    tmp_dict_key_263 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_53, tmp_dict_key_263, tmp_dict_value_263 );
    Py_DECREF( tmp_dict_value_263 );
    tmp_dict_value_264 = const_str_digest_c6db3dc91a25c9b312aac3fb70b6536a;
    tmp_dict_key_264 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_53, tmp_dict_key_264, tmp_dict_value_264 );
    tmp_dict_value_265 = LIST_COPY( const_list_str_plain_dpy_str_plain_drawable_str_plain_group_list );
    tmp_dict_key_265 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_53, tmp_dict_key_265, tmp_dict_value_265 );
    Py_DECREF( tmp_dict_value_265 );
    frame_module->f_lineno = 763;
    tmp_assign_source_297 = CALL_FUNCTION( tmp_called_name_323, tmp_args_name_53, tmp_kw_name_53 );
    Py_DECREF( tmp_called_name_323 );
    Py_DECREF( tmp_kw_name_53 );
    if ( tmp_assign_source_297 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXJoinSwapGroupNV, tmp_assign_source_297 );
    tmp_source_name_268 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_268 == NULL ))
    {
        tmp_source_name_268 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_268 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 766;
        goto frame_exception_exit_1;
    }

    tmp_called_name_325 = LOOKUP_ATTRIBUTE( tmp_source_name_268, const_str_plain_createBaseFunction );
    if ( tmp_called_name_325 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;
        goto frame_exception_exit_1;
    }
    tmp_args_name_54 = const_tuple_str_plain_glXBindSwapBarrierNV_tuple;
    tmp_kw_name_54 = _PyDict_NewPresized( 5 );
    tmp_source_name_269 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_269 == NULL ))
    {
        tmp_source_name_269 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_269 == NULL )
    {
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_266 = LOOKUP_ATTRIBUTE( tmp_source_name_269, const_str_plain_GL );
    if ( tmp_dict_value_266 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_266 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_54, tmp_dict_key_266, tmp_dict_value_266 );
    Py_DECREF( tmp_dict_value_266 );
    tmp_dict_value_267 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_267 == NULL ))
    {
        tmp_dict_value_267 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_267 == NULL )
    {
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 767;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_267 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_54, tmp_dict_key_267, tmp_dict_value_267 );
    tmp_dict_value_268 = PyList_New( 3 );
    tmp_called_name_326 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_326 == NULL ))
    {
        tmp_called_name_326 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_326 == NULL )
    {
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        Py_DECREF( tmp_dict_value_268 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 768;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_129 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_129 == NULL ))
    {
        tmp_args_element_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_129 == NULL )
    {
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        Py_DECREF( tmp_dict_value_268 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 768;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 768;
    {
        PyObject *call_args[] = { tmp_args_element_name_129 };
        tmp_list_element_63 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_326, call_args );
    }

    if ( tmp_list_element_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        Py_DECREF( tmp_dict_value_268 );

        exception_lineno = 768;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_268, 0, tmp_list_element_63 );
    tmp_list_element_63 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_list_element_63 == NULL ))
    {
        tmp_list_element_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_list_element_63 == NULL )
    {
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        Py_DECREF( tmp_dict_value_268 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 768;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_63 );
    PyList_SET_ITEM( tmp_dict_value_268, 1, tmp_list_element_63 );
    tmp_list_element_63 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_list_element_63 == NULL ))
    {
        tmp_list_element_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_list_element_63 == NULL )
    {
        Py_DECREF( tmp_called_name_325 );
        Py_DECREF( tmp_kw_name_54 );
        Py_DECREF( tmp_dict_value_268 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 768;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_63 );
    PyList_SET_ITEM( tmp_dict_value_268, 2, tmp_list_element_63 );
    tmp_dict_key_268 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_54, tmp_dict_key_268, tmp_dict_value_268 );
    Py_DECREF( tmp_dict_value_268 );
    tmp_dict_value_269 = const_str_digest_8ccf23569b690bfb6f477e67763890f8;
    tmp_dict_key_269 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_54, tmp_dict_key_269, tmp_dict_value_269 );
    tmp_dict_value_270 = LIST_COPY( const_list_str_plain_dpy_str_plain_group_str_plain_barrier_list );
    tmp_dict_key_270 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_54, tmp_dict_key_270, tmp_dict_value_270 );
    Py_DECREF( tmp_dict_value_270 );
    frame_module->f_lineno = 770;
    tmp_assign_source_298 = CALL_FUNCTION( tmp_called_name_325, tmp_args_name_54, tmp_kw_name_54 );
    Py_DECREF( tmp_called_name_325 );
    Py_DECREF( tmp_kw_name_54 );
    if ( tmp_assign_source_298 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 770;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXBindSwapBarrierNV, tmp_assign_source_298 );
    tmp_source_name_270 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_270 == NULL ))
    {
        tmp_source_name_270 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_270 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 773;
        goto frame_exception_exit_1;
    }

    tmp_called_name_327 = LOOKUP_ATTRIBUTE( tmp_source_name_270, const_str_plain_createBaseFunction );
    if ( tmp_called_name_327 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 773;
        goto frame_exception_exit_1;
    }
    tmp_args_name_55 = const_tuple_str_plain_glXQuerySwapGroupNV_tuple;
    tmp_kw_name_55 = _PyDict_NewPresized( 5 );
    tmp_source_name_271 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_271 == NULL ))
    {
        tmp_source_name_271 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_271 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 774;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_271 = LOOKUP_ATTRIBUTE( tmp_source_name_271, const_str_plain_GL );
    if ( tmp_dict_value_271 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );

        exception_lineno = 774;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_271 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_55, tmp_dict_key_271, tmp_dict_value_271 );
    Py_DECREF( tmp_dict_value_271 );
    tmp_dict_value_272 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_272 == NULL ))
    {
        tmp_dict_value_272 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_272 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 774;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_272 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_55, tmp_dict_key_272, tmp_dict_value_272 );
    tmp_dict_value_273 = PyList_New( 4 );
    tmp_called_name_328 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_328 == NULL ))
    {
        tmp_called_name_328 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_328 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_130 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_130 == NULL ))
    {
        tmp_args_element_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_130 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 775;
    {
        PyObject *call_args[] = { tmp_args_element_name_130 };
        tmp_list_element_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_328, call_args );
    }

    if ( tmp_list_element_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_273, 0, tmp_list_element_64 );
    tmp_list_element_64 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_64 == NULL ))
    {
        tmp_list_element_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_64 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_64 );
    PyList_SET_ITEM( tmp_dict_value_273, 1, tmp_list_element_64 );
    tmp_called_name_329 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_329 == NULL ))
    {
        tmp_called_name_329 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_329 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_131 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_args_element_name_131 == NULL ))
    {
        tmp_args_element_name_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_args_element_name_131 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 775;
    {
        PyObject *call_args[] = { tmp_args_element_name_131 };
        tmp_list_element_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_329, call_args );
    }

    if ( tmp_list_element_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_273, 2, tmp_list_element_64 );
    tmp_called_name_330 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_330 == NULL ))
    {
        tmp_called_name_330 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_330 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_132 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_args_element_name_132 == NULL ))
    {
        tmp_args_element_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_args_element_name_132 == NULL )
    {
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 775;
    {
        PyObject *call_args[] = { tmp_args_element_name_132 };
        tmp_list_element_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_330, call_args );
    }

    if ( tmp_list_element_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_327 );
        Py_DECREF( tmp_kw_name_55 );
        Py_DECREF( tmp_dict_value_273 );

        exception_lineno = 775;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_273, 3, tmp_list_element_64 );
    tmp_dict_key_273 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_55, tmp_dict_key_273, tmp_dict_value_273 );
    Py_DECREF( tmp_dict_value_273 );
    tmp_dict_value_274 = const_str_digest_e385c4d0eb77065429f1121f25238fa1;
    tmp_dict_key_274 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_55, tmp_dict_key_274, tmp_dict_value_274 );
    tmp_dict_value_275 = LIST_COPY( const_list_af2cf34c9c2aeea740ead53b368c2419_list );
    tmp_dict_key_275 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_55, tmp_dict_key_275, tmp_dict_value_275 );
    Py_DECREF( tmp_dict_value_275 );
    frame_module->f_lineno = 777;
    tmp_assign_source_299 = CALL_FUNCTION( tmp_called_name_327, tmp_args_name_55, tmp_kw_name_55 );
    Py_DECREF( tmp_called_name_327 );
    Py_DECREF( tmp_kw_name_55 );
    if ( tmp_assign_source_299 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 777;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQuerySwapGroupNV, tmp_assign_source_299 );
    tmp_source_name_272 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_272 == NULL ))
    {
        tmp_source_name_272 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_272 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 780;
        goto frame_exception_exit_1;
    }

    tmp_called_name_331 = LOOKUP_ATTRIBUTE( tmp_source_name_272, const_str_plain_createBaseFunction );
    if ( tmp_called_name_331 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        goto frame_exception_exit_1;
    }
    tmp_args_name_56 = const_tuple_str_plain_glXQueryMaxSwapGroupsNV_tuple;
    tmp_kw_name_56 = _PyDict_NewPresized( 5 );
    tmp_source_name_273 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_273 == NULL ))
    {
        tmp_source_name_273 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_273 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 781;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_276 = LOOKUP_ATTRIBUTE( tmp_source_name_273, const_str_plain_GL );
    if ( tmp_dict_value_276 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );

        exception_lineno = 781;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_276 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_56, tmp_dict_key_276, tmp_dict_value_276 );
    Py_DECREF( tmp_dict_value_276 );
    tmp_dict_value_277 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_277 == NULL ))
    {
        tmp_dict_value_277 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_277 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 781;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_277 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_56, tmp_dict_key_277, tmp_dict_value_277 );
    tmp_dict_value_278 = PyList_New( 4 );
    tmp_called_name_332 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_332 == NULL ))
    {
        tmp_called_name_332 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_332 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_133 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_133 == NULL ))
    {
        tmp_args_element_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_133 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 782;
    {
        PyObject *call_args[] = { tmp_args_element_name_133 };
        tmp_list_element_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_332, call_args );
    }

    if ( tmp_list_element_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_278, 0, tmp_list_element_65 );
    tmp_list_element_65 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_65 == NULL ))
    {
        tmp_list_element_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_65 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_65 );
    PyList_SET_ITEM( tmp_dict_value_278, 1, tmp_list_element_65 );
    tmp_called_name_333 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_333 == NULL ))
    {
        tmp_called_name_333 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_333 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_134 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_args_element_name_134 == NULL ))
    {
        tmp_args_element_name_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_args_element_name_134 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 782;
    {
        PyObject *call_args[] = { tmp_args_element_name_134 };
        tmp_list_element_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_333, call_args );
    }

    if ( tmp_list_element_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_278, 2, tmp_list_element_65 );
    tmp_called_name_334 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_334 == NULL ))
    {
        tmp_called_name_334 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_334 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_135 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_args_element_name_135 == NULL ))
    {
        tmp_args_element_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_args_element_name_135 == NULL )
    {
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 782;
    {
        PyObject *call_args[] = { tmp_args_element_name_135 };
        tmp_list_element_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_334, call_args );
    }

    if ( tmp_list_element_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_331 );
        Py_DECREF( tmp_kw_name_56 );
        Py_DECREF( tmp_dict_value_278 );

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_278, 3, tmp_list_element_65 );
    tmp_dict_key_278 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_56, tmp_dict_key_278, tmp_dict_value_278 );
    Py_DECREF( tmp_dict_value_278 );
    tmp_dict_value_279 = const_str_digest_63af519f3ec97f6b155b392ba378e8b2;
    tmp_dict_key_279 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_56, tmp_dict_key_279, tmp_dict_value_279 );
    tmp_dict_value_280 = LIST_COPY( const_list_086872101edaafe07727f8675195e9ab_list );
    tmp_dict_key_280 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_56, tmp_dict_key_280, tmp_dict_value_280 );
    Py_DECREF( tmp_dict_value_280 );
    frame_module->f_lineno = 784;
    tmp_assign_source_300 = CALL_FUNCTION( tmp_called_name_331, tmp_args_name_56, tmp_kw_name_56 );
    Py_DECREF( tmp_called_name_331 );
    Py_DECREF( tmp_kw_name_56 );
    if ( tmp_assign_source_300 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryMaxSwapGroupsNV, tmp_assign_source_300 );
    tmp_source_name_274 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_274 == NULL ))
    {
        tmp_source_name_274 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_274 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 787;
        goto frame_exception_exit_1;
    }

    tmp_called_name_335 = LOOKUP_ATTRIBUTE( tmp_source_name_274, const_str_plain_createBaseFunction );
    if ( tmp_called_name_335 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 787;
        goto frame_exception_exit_1;
    }
    tmp_args_name_57 = const_tuple_str_plain_glXQueryFrameCountNV_tuple;
    tmp_kw_name_57 = _PyDict_NewPresized( 5 );
    tmp_source_name_275 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_275 == NULL ))
    {
        tmp_source_name_275 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_275 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 788;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_281 = LOOKUP_ATTRIBUTE( tmp_source_name_275, const_str_plain_GL );
    if ( tmp_dict_value_281 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );

        exception_lineno = 788;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_281 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_57, tmp_dict_key_281, tmp_dict_value_281 );
    Py_DECREF( tmp_dict_value_281 );
    tmp_dict_value_282 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_282 == NULL ))
    {
        tmp_dict_value_282 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_282 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 788;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_282 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_57, tmp_dict_key_282, tmp_dict_value_282 );
    tmp_dict_value_283 = PyList_New( 3 );
    tmp_called_name_336 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_336 == NULL ))
    {
        tmp_called_name_336 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_336 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_136 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_136 == NULL ))
    {
        tmp_args_element_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_136 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 789;
    {
        PyObject *call_args[] = { tmp_args_element_name_136 };
        tmp_list_element_66 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_336, call_args );
    }

    if ( tmp_list_element_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_283, 0, tmp_list_element_66 );
    tmp_list_element_66 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_66 == NULL ))
    {
        tmp_list_element_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_66 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_66 );
    PyList_SET_ITEM( tmp_dict_value_283, 1, tmp_list_element_66 );
    tmp_called_name_337 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_337 == NULL ))
    {
        tmp_called_name_337 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_337 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_137 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLuint );

    if (unlikely( tmp_args_element_name_137 == NULL ))
    {
        tmp_args_element_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLuint );
    }

    if ( tmp_args_element_name_137 == NULL )
    {
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLuint" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 789;
    {
        PyObject *call_args[] = { tmp_args_element_name_137 };
        tmp_list_element_66 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_337, call_args );
    }

    if ( tmp_list_element_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_335 );
        Py_DECREF( tmp_kw_name_57 );
        Py_DECREF( tmp_dict_value_283 );

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_283, 2, tmp_list_element_66 );
    tmp_dict_key_283 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_57, tmp_dict_key_283, tmp_dict_value_283 );
    Py_DECREF( tmp_dict_value_283 );
    tmp_dict_value_284 = const_str_digest_f1874426d1a94f4d5dc574f84a6d7368;
    tmp_dict_key_284 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_57, tmp_dict_key_284, tmp_dict_value_284 );
    tmp_dict_value_285 = LIST_COPY( const_list_str_plain_dpy_str_plain_screen_str_plain_count_list );
    tmp_dict_key_285 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_57, tmp_dict_key_285, tmp_dict_value_285 );
    Py_DECREF( tmp_dict_value_285 );
    frame_module->f_lineno = 791;
    tmp_assign_source_301 = CALL_FUNCTION( tmp_called_name_335, tmp_args_name_57, tmp_kw_name_57 );
    Py_DECREF( tmp_called_name_335 );
    Py_DECREF( tmp_kw_name_57 );
    if ( tmp_assign_source_301 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXQueryFrameCountNV, tmp_assign_source_301 );
    tmp_source_name_276 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_276 == NULL ))
    {
        tmp_source_name_276 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_276 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 794;
        goto frame_exception_exit_1;
    }

    tmp_called_name_338 = LOOKUP_ATTRIBUTE( tmp_source_name_276, const_str_plain_createBaseFunction );
    if ( tmp_called_name_338 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 794;
        goto frame_exception_exit_1;
    }
    tmp_args_name_58 = const_tuple_str_plain_glXResetFrameCountNV_tuple;
    tmp_kw_name_58 = _PyDict_NewPresized( 5 );
    tmp_source_name_277 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_277 == NULL ))
    {
        tmp_source_name_277 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_277 == NULL )
    {
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 795;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_286 = LOOKUP_ATTRIBUTE( tmp_source_name_277, const_str_plain_GL );
    if ( tmp_dict_value_286 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );

        exception_lineno = 795;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_286 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_58, tmp_dict_key_286, tmp_dict_value_286 );
    Py_DECREF( tmp_dict_value_286 );
    tmp_dict_value_287 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_287 == NULL ))
    {
        tmp_dict_value_287 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_287 == NULL )
    {
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 795;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_287 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_58, tmp_dict_key_287, tmp_dict_value_287 );
    tmp_dict_value_288 = PyList_New( 2 );
    tmp_called_name_339 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_339 == NULL ))
    {
        tmp_called_name_339 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_339 == NULL )
    {
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );
        Py_DECREF( tmp_dict_value_288 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 796;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_138 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_138 == NULL ))
    {
        tmp_args_element_name_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_138 == NULL )
    {
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );
        Py_DECREF( tmp_dict_value_288 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 796;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 796;
    {
        PyObject *call_args[] = { tmp_args_element_name_138 };
        tmp_list_element_67 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_339, call_args );
    }

    if ( tmp_list_element_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );
        Py_DECREF( tmp_dict_value_288 );

        exception_lineno = 796;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_288, 0, tmp_list_element_67 );
    tmp_list_element_67 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_67 == NULL ))
    {
        tmp_list_element_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_67 == NULL )
    {
        Py_DECREF( tmp_called_name_338 );
        Py_DECREF( tmp_kw_name_58 );
        Py_DECREF( tmp_dict_value_288 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 796;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_67 );
    PyList_SET_ITEM( tmp_dict_value_288, 1, tmp_list_element_67 );
    tmp_dict_key_288 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_58, tmp_dict_key_288, tmp_dict_value_288 );
    Py_DECREF( tmp_dict_value_288 );
    tmp_dict_value_289 = const_str_digest_bf01b0f9143c3dabea0b1b19171aff31;
    tmp_dict_key_289 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_58, tmp_dict_key_289, tmp_dict_value_289 );
    tmp_dict_value_290 = LIST_COPY( const_list_str_plain_dpy_str_plain_screen_list );
    tmp_dict_key_290 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_58, tmp_dict_key_290, tmp_dict_value_290 );
    Py_DECREF( tmp_dict_value_290 );
    frame_module->f_lineno = 798;
    tmp_assign_source_302 = CALL_FUNCTION( tmp_called_name_338, tmp_args_name_58, tmp_kw_name_58 );
    Py_DECREF( tmp_called_name_338 );
    Py_DECREF( tmp_kw_name_58 );
    if ( tmp_assign_source_302 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 798;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXResetFrameCountNV, tmp_assign_source_302 );
    tmp_source_name_278 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_constant );

    if (unlikely( tmp_source_name_278 == NULL ))
    {
        tmp_source_name_278 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constant );
    }

    if ( tmp_source_name_278 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "constant" );
        exception_tb = NULL;

        exception_lineno = 802;
        goto frame_exception_exit_1;
    }

    tmp_called_name_340 = LOOKUP_ATTRIBUTE( tmp_source_name_278, const_str_plain_Constant );
    if ( tmp_called_name_340 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 802;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 802;
    tmp_assign_source_303 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_340, &PyTuple_GET_ITEM( const_tuple_str_plain_GLX_NV_video_out_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_340 );
    if ( tmp_assign_source_303 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 802;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLX_NV_video_out, tmp_assign_source_303 );
    tmp_assign_source_304 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_uint );

    if (unlikely( tmp_assign_source_304 == NULL ))
    {
        tmp_assign_source_304 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_uint );
    }

    if ( tmp_assign_source_304 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_uint" );
        exception_tb = NULL;

        exception_lineno = 803;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV, tmp_assign_source_304 );
    tmp_source_name_279 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_279 == NULL ))
    {
        tmp_source_name_279 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_279 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 804;
        goto frame_exception_exit_1;
    }

    tmp_called_name_341 = LOOKUP_ATTRIBUTE( tmp_source_name_279, const_str_plain_createBaseFunction );
    if ( tmp_called_name_341 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 804;
        goto frame_exception_exit_1;
    }
    tmp_args_name_59 = const_tuple_str_plain_glXGetVideoDeviceNV_tuple;
    tmp_kw_name_59 = _PyDict_NewPresized( 5 );
    tmp_source_name_280 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_280 == NULL ))
    {
        tmp_source_name_280 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_280 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_291 = LOOKUP_ATTRIBUTE( tmp_source_name_280, const_str_plain_GL );
    if ( tmp_dict_value_291 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_291 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_59, tmp_dict_key_291, tmp_dict_value_291 );
    Py_DECREF( tmp_dict_value_291 );
    tmp_dict_value_292 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_292 == NULL ))
    {
        tmp_dict_value_292 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_292 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_292 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_59, tmp_dict_key_292, tmp_dict_value_292 );
    tmp_dict_value_293 = PyList_New( 4 );
    tmp_called_name_342 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_342 == NULL ))
    {
        tmp_called_name_342 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_342 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_139 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_139 == NULL ))
    {
        tmp_args_element_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_139 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 806;
    {
        PyObject *call_args[] = { tmp_args_element_name_139 };
        tmp_list_element_68 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_342, call_args );
    }

    if ( tmp_list_element_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_293, 0, tmp_list_element_68 );
    tmp_list_element_68 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_68 == NULL ))
    {
        tmp_list_element_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_68 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_68 );
    PyList_SET_ITEM( tmp_dict_value_293, 1, tmp_list_element_68 );
    tmp_list_element_68 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_68 == NULL ))
    {
        tmp_list_element_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_68 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_68 );
    PyList_SET_ITEM( tmp_dict_value_293, 2, tmp_list_element_68 );
    tmp_called_name_343 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_343 == NULL ))
    {
        tmp_called_name_343 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_343 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_140 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );

    if (unlikely( tmp_args_element_name_140 == NULL ))
    {
        tmp_args_element_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );
    }

    if ( tmp_args_element_name_140 == NULL )
    {
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXVideoDeviceNV" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 806;
    {
        PyObject *call_args[] = { tmp_args_element_name_140 };
        tmp_list_element_68 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_343, call_args );
    }

    if ( tmp_list_element_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_341 );
        Py_DECREF( tmp_kw_name_59 );
        Py_DECREF( tmp_dict_value_293 );

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_293, 3, tmp_list_element_68 );
    tmp_dict_key_293 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_59, tmp_dict_key_293, tmp_dict_value_293 );
    Py_DECREF( tmp_dict_value_293 );
    tmp_dict_value_294 = const_str_digest_4016b620dd9070ac17a9bd97f45d37ea;
    tmp_dict_key_294 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_59, tmp_dict_key_294, tmp_dict_value_294 );
    tmp_dict_value_295 = LIST_COPY( const_list_c5e695ca431ef6f10322bd3fd623ebfc_list );
    tmp_dict_key_295 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_59, tmp_dict_key_295, tmp_dict_value_295 );
    Py_DECREF( tmp_dict_value_295 );
    frame_module->f_lineno = 808;
    tmp_assign_source_305 = CALL_FUNCTION( tmp_called_name_341, tmp_args_name_59, tmp_kw_name_59 );
    Py_DECREF( tmp_called_name_341 );
    Py_DECREF( tmp_kw_name_59 );
    if ( tmp_assign_source_305 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 808;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetVideoDeviceNV, tmp_assign_source_305 );
    tmp_source_name_281 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_281 == NULL ))
    {
        tmp_source_name_281 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_281 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 811;
        goto frame_exception_exit_1;
    }

    tmp_called_name_344 = LOOKUP_ATTRIBUTE( tmp_source_name_281, const_str_plain_createBaseFunction );
    if ( tmp_called_name_344 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 811;
        goto frame_exception_exit_1;
    }
    tmp_args_name_60 = const_tuple_str_plain_glXReleaseVideoDeviceNV_tuple;
    tmp_kw_name_60 = _PyDict_NewPresized( 5 );
    tmp_source_name_282 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_282 == NULL ))
    {
        tmp_source_name_282 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_282 == NULL )
    {
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 812;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_296 = LOOKUP_ATTRIBUTE( tmp_source_name_282, const_str_plain_GL );
    if ( tmp_dict_value_296 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );

        exception_lineno = 812;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_296 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_60, tmp_dict_key_296, tmp_dict_value_296 );
    Py_DECREF( tmp_dict_value_296 );
    tmp_dict_value_297 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_297 == NULL ))
    {
        tmp_dict_value_297 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_297 == NULL )
    {
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 812;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_297 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_60, tmp_dict_key_297, tmp_dict_value_297 );
    tmp_dict_value_298 = PyList_New( 3 );
    tmp_called_name_345 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_345 == NULL ))
    {
        tmp_called_name_345 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_345 == NULL )
    {
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        Py_DECREF( tmp_dict_value_298 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 813;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_141 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_141 == NULL ))
    {
        tmp_args_element_name_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_141 == NULL )
    {
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        Py_DECREF( tmp_dict_value_298 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 813;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 813;
    {
        PyObject *call_args[] = { tmp_args_element_name_141 };
        tmp_list_element_69 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_345, call_args );
    }

    if ( tmp_list_element_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        Py_DECREF( tmp_dict_value_298 );

        exception_lineno = 813;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_298, 0, tmp_list_element_69 );
    tmp_list_element_69 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_69 == NULL ))
    {
        tmp_list_element_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_69 == NULL )
    {
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        Py_DECREF( tmp_dict_value_298 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 813;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_69 );
    PyList_SET_ITEM( tmp_dict_value_298, 1, tmp_list_element_69 );
    tmp_list_element_69 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );

    if (unlikely( tmp_list_element_69 == NULL ))
    {
        tmp_list_element_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );
    }

    if ( tmp_list_element_69 == NULL )
    {
        Py_DECREF( tmp_called_name_344 );
        Py_DECREF( tmp_kw_name_60 );
        Py_DECREF( tmp_dict_value_298 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXVideoDeviceNV" );
        exception_tb = NULL;

        exception_lineno = 813;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_69 );
    PyList_SET_ITEM( tmp_dict_value_298, 2, tmp_list_element_69 );
    tmp_dict_key_298 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_60, tmp_dict_key_298, tmp_dict_value_298 );
    Py_DECREF( tmp_dict_value_298 );
    tmp_dict_value_299 = const_str_digest_414e895a750d5a1d1c9e7b538fe702c7;
    tmp_dict_key_299 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_60, tmp_dict_key_299, tmp_dict_value_299 );
    tmp_dict_value_300 = LIST_COPY( const_list_str_plain_dpy_str_plain_screen_str_plain_VideoDevice_list );
    tmp_dict_key_300 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_60, tmp_dict_key_300, tmp_dict_value_300 );
    Py_DECREF( tmp_dict_value_300 );
    frame_module->f_lineno = 815;
    tmp_assign_source_306 = CALL_FUNCTION( tmp_called_name_344, tmp_args_name_60, tmp_kw_name_60 );
    Py_DECREF( tmp_called_name_344 );
    Py_DECREF( tmp_kw_name_60 );
    if ( tmp_assign_source_306 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXReleaseVideoDeviceNV, tmp_assign_source_306 );
    tmp_assign_source_307 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_XID );

    if (unlikely( tmp_assign_source_307 == NULL ))
    {
        tmp_assign_source_307 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XID );
    }

    if ( tmp_assign_source_307 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "XID" );
        exception_tb = NULL;

        exception_lineno = 818;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbuffer, tmp_assign_source_307 );
    tmp_source_name_283 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_283 == NULL ))
    {
        tmp_source_name_283 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_283 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 819;
        goto frame_exception_exit_1;
    }

    tmp_called_name_346 = LOOKUP_ATTRIBUTE( tmp_source_name_283, const_str_plain_createBaseFunction );
    if ( tmp_called_name_346 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 819;
        goto frame_exception_exit_1;
    }
    tmp_args_name_61 = const_tuple_str_plain_glXBindVideoImageNV_tuple;
    tmp_kw_name_61 = _PyDict_NewPresized( 5 );
    tmp_source_name_284 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_284 == NULL ))
    {
        tmp_source_name_284 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_284 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_301 = LOOKUP_ATTRIBUTE( tmp_source_name_284, const_str_plain_GL );
    if ( tmp_dict_value_301 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_301 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_61, tmp_dict_key_301, tmp_dict_value_301 );
    Py_DECREF( tmp_dict_value_301 );
    tmp_dict_value_302 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_302 == NULL ))
    {
        tmp_dict_value_302 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_302 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_302 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_61, tmp_dict_key_302, tmp_dict_value_302 );
    tmp_dict_value_303 = PyList_New( 4 );
    tmp_called_name_347 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_347 == NULL ))
    {
        tmp_called_name_347 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_347 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        Py_DECREF( tmp_dict_value_303 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 821;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_142 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_142 == NULL ))
    {
        tmp_args_element_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_142 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        Py_DECREF( tmp_dict_value_303 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 821;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 821;
    {
        PyObject *call_args[] = { tmp_args_element_name_142 };
        tmp_list_element_70 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_347, call_args );
    }

    if ( tmp_list_element_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        Py_DECREF( tmp_dict_value_303 );

        exception_lineno = 821;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_303, 0, tmp_list_element_70 );
    tmp_list_element_70 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );

    if (unlikely( tmp_list_element_70 == NULL ))
    {
        tmp_list_element_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );
    }

    if ( tmp_list_element_70 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        Py_DECREF( tmp_dict_value_303 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXVideoDeviceNV" );
        exception_tb = NULL;

        exception_lineno = 821;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_70 );
    PyList_SET_ITEM( tmp_dict_value_303, 1, tmp_list_element_70 );
    tmp_list_element_70 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbuffer );

    if (unlikely( tmp_list_element_70 == NULL ))
    {
        tmp_list_element_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPbuffer );
    }

    if ( tmp_list_element_70 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        Py_DECREF( tmp_dict_value_303 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPbuffer" );
        exception_tb = NULL;

        exception_lineno = 821;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_70 );
    PyList_SET_ITEM( tmp_dict_value_303, 2, tmp_list_element_70 );
    tmp_list_element_70 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_70 == NULL ))
    {
        tmp_list_element_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_70 == NULL )
    {
        Py_DECREF( tmp_called_name_346 );
        Py_DECREF( tmp_kw_name_61 );
        Py_DECREF( tmp_dict_value_303 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 821;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_70 );
    PyList_SET_ITEM( tmp_dict_value_303, 3, tmp_list_element_70 );
    tmp_dict_key_303 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_61, tmp_dict_key_303, tmp_dict_value_303 );
    Py_DECREF( tmp_dict_value_303 );
    tmp_dict_value_304 = const_str_digest_93833061a1a7d5ae372ab52c0119f31f;
    tmp_dict_key_304 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_61, tmp_dict_key_304, tmp_dict_value_304 );
    tmp_dict_value_305 = LIST_COPY( const_list_b6fe39b0e9e35a370ce9104704f66840_list );
    tmp_dict_key_305 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_61, tmp_dict_key_305, tmp_dict_value_305 );
    Py_DECREF( tmp_dict_value_305 );
    frame_module->f_lineno = 823;
    tmp_assign_source_308 = CALL_FUNCTION( tmp_called_name_346, tmp_args_name_61, tmp_kw_name_61 );
    Py_DECREF( tmp_called_name_346 );
    Py_DECREF( tmp_kw_name_61 );
    if ( tmp_assign_source_308 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 823;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXBindVideoImageNV, tmp_assign_source_308 );
    tmp_source_name_285 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_285 == NULL ))
    {
        tmp_source_name_285 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_285 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 826;
        goto frame_exception_exit_1;
    }

    tmp_called_name_348 = LOOKUP_ATTRIBUTE( tmp_source_name_285, const_str_plain_createBaseFunction );
    if ( tmp_called_name_348 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_args_name_62 = const_tuple_str_plain_glXReleaseVideoImageNV_tuple;
    tmp_kw_name_62 = _PyDict_NewPresized( 5 );
    tmp_source_name_286 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_286 == NULL ))
    {
        tmp_source_name_286 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_286 == NULL )
    {
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 827;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_306 = LOOKUP_ATTRIBUTE( tmp_source_name_286, const_str_plain_GL );
    if ( tmp_dict_value_306 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );

        exception_lineno = 827;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_306 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_62, tmp_dict_key_306, tmp_dict_value_306 );
    Py_DECREF( tmp_dict_value_306 );
    tmp_dict_value_307 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_307 == NULL ))
    {
        tmp_dict_value_307 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_307 == NULL )
    {
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 827;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_307 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_62, tmp_dict_key_307, tmp_dict_value_307 );
    tmp_dict_value_308 = PyList_New( 2 );
    tmp_called_name_349 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_349 == NULL ))
    {
        tmp_called_name_349 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_349 == NULL )
    {
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );
        Py_DECREF( tmp_dict_value_308 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 828;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_143 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_143 == NULL ))
    {
        tmp_args_element_name_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_143 == NULL )
    {
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );
        Py_DECREF( tmp_dict_value_308 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 828;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 828;
    {
        PyObject *call_args[] = { tmp_args_element_name_143 };
        tmp_list_element_71 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_349, call_args );
    }

    if ( tmp_list_element_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );
        Py_DECREF( tmp_dict_value_308 );

        exception_lineno = 828;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_308, 0, tmp_list_element_71 );
    tmp_list_element_71 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbuffer );

    if (unlikely( tmp_list_element_71 == NULL ))
    {
        tmp_list_element_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPbuffer );
    }

    if ( tmp_list_element_71 == NULL )
    {
        Py_DECREF( tmp_called_name_348 );
        Py_DECREF( tmp_kw_name_62 );
        Py_DECREF( tmp_dict_value_308 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPbuffer" );
        exception_tb = NULL;

        exception_lineno = 828;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_71 );
    PyList_SET_ITEM( tmp_dict_value_308, 1, tmp_list_element_71 );
    tmp_dict_key_308 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_62, tmp_dict_key_308, tmp_dict_value_308 );
    Py_DECREF( tmp_dict_value_308 );
    tmp_dict_value_309 = const_str_digest_d1bb062c077f34f880a7fd8ba4b82499;
    tmp_dict_key_309 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_62, tmp_dict_key_309, tmp_dict_value_309 );
    tmp_dict_value_310 = LIST_COPY( const_list_str_plain_dpy_str_plain_pbuf_list );
    tmp_dict_key_310 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_62, tmp_dict_key_310, tmp_dict_value_310 );
    Py_DECREF( tmp_dict_value_310 );
    frame_module->f_lineno = 830;
    tmp_assign_source_309 = CALL_FUNCTION( tmp_called_name_348, tmp_args_name_62, tmp_kw_name_62 );
    Py_DECREF( tmp_called_name_348 );
    Py_DECREF( tmp_kw_name_62 );
    if ( tmp_assign_source_309 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 830;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXReleaseVideoImageNV, tmp_assign_source_309 );
    tmp_assign_source_310 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ubyte );

    if (unlikely( tmp_assign_source_310 == NULL ))
    {
        tmp_assign_source_310 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ubyte );
    }

    if ( tmp_assign_source_310 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ubyte" );
        exception_tb = NULL;

        exception_lineno = 833;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLboolean, tmp_assign_source_310 );
    tmp_source_name_287 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_287 == NULL ))
    {
        tmp_source_name_287 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_287 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 834;
        goto frame_exception_exit_1;
    }

    tmp_called_name_350 = LOOKUP_ATTRIBUTE( tmp_source_name_287, const_str_plain_createBaseFunction );
    if ( tmp_called_name_350 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 834;
        goto frame_exception_exit_1;
    }
    tmp_args_name_63 = const_tuple_str_plain_glXSendPbufferToVideoNV_tuple;
    tmp_kw_name_63 = _PyDict_NewPresized( 5 );
    tmp_source_name_288 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_288 == NULL ))
    {
        tmp_source_name_288 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_288 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 835;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_311 = LOOKUP_ATTRIBUTE( tmp_source_name_288, const_str_plain_GL );
    if ( tmp_dict_value_311 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );

        exception_lineno = 835;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_311 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_63, tmp_dict_key_311, tmp_dict_value_311 );
    Py_DECREF( tmp_dict_value_311 );
    tmp_dict_value_312 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_312 == NULL ))
    {
        tmp_dict_value_312 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_312 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 835;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_312 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_63, tmp_dict_key_312, tmp_dict_value_312 );
    tmp_dict_value_313 = PyList_New( 5 );
    tmp_called_name_351 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_351 == NULL ))
    {
        tmp_called_name_351 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_351 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_144 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_144 == NULL ))
    {
        tmp_args_element_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_144 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 836;
    {
        PyObject *call_args[] = { tmp_args_element_name_144 };
        tmp_list_element_72 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_351, call_args );
    }

    if ( tmp_list_element_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_313, 0, tmp_list_element_72 );
    tmp_list_element_72 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXPbuffer );

    if (unlikely( tmp_list_element_72 == NULL ))
    {
        tmp_list_element_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXPbuffer );
    }

    if ( tmp_list_element_72 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXPbuffer" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_72 );
    PyList_SET_ITEM( tmp_dict_value_313, 1, tmp_list_element_72 );
    tmp_list_element_72 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_72 == NULL ))
    {
        tmp_list_element_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_72 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_72 );
    PyList_SET_ITEM( tmp_dict_value_313, 2, tmp_list_element_72 );
    tmp_called_name_352 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_352 == NULL ))
    {
        tmp_called_name_352 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_352 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_145 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_args_element_name_145 == NULL ))
    {
        tmp_args_element_name_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_args_element_name_145 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 836;
    {
        PyObject *call_args[] = { tmp_args_element_name_145 };
        tmp_list_element_72 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_352, call_args );
    }

    if ( tmp_list_element_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_313, 3, tmp_list_element_72 );
    tmp_list_element_72 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLboolean );

    if (unlikely( tmp_list_element_72 == NULL ))
    {
        tmp_list_element_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLboolean );
    }

    if ( tmp_list_element_72 == NULL )
    {
        Py_DECREF( tmp_called_name_350 );
        Py_DECREF( tmp_kw_name_63 );
        Py_DECREF( tmp_dict_value_313 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLboolean" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_72 );
    PyList_SET_ITEM( tmp_dict_value_313, 4, tmp_list_element_72 );
    tmp_dict_key_313 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_63, tmp_dict_key_313, tmp_dict_value_313 );
    Py_DECREF( tmp_dict_value_313 );
    tmp_dict_value_314 = const_str_digest_2a148c04d8fd2fc8e9ee080f2b7a6788;
    tmp_dict_key_314 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_63, tmp_dict_key_314, tmp_dict_value_314 );
    tmp_dict_value_315 = LIST_COPY( const_list_42edf42ed02a726d64afbc4d5851b6c5_list );
    tmp_dict_key_315 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_63, tmp_dict_key_315, tmp_dict_value_315 );
    Py_DECREF( tmp_dict_value_315 );
    frame_module->f_lineno = 838;
    tmp_assign_source_311 = CALL_FUNCTION( tmp_called_name_350, tmp_args_name_63, tmp_kw_name_63 );
    Py_DECREF( tmp_called_name_350 );
    Py_DECREF( tmp_kw_name_63 );
    if ( tmp_assign_source_311 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXSendPbufferToVideoNV, tmp_assign_source_311 );
    tmp_source_name_289 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_289 == NULL ))
    {
        tmp_source_name_289 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_289 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 841;
        goto frame_exception_exit_1;
    }

    tmp_called_name_353 = LOOKUP_ATTRIBUTE( tmp_source_name_289, const_str_plain_createBaseFunction );
    if ( tmp_called_name_353 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        goto frame_exception_exit_1;
    }
    tmp_args_name_64 = const_tuple_str_plain_glXGetVideoInfoNV_tuple;
    tmp_kw_name_64 = _PyDict_NewPresized( 5 );
    tmp_source_name_290 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_290 == NULL ))
    {
        tmp_source_name_290 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_290 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 842;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_316 = LOOKUP_ATTRIBUTE( tmp_source_name_290, const_str_plain_GL );
    if ( tmp_dict_value_316 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );

        exception_lineno = 842;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_316 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_64, tmp_dict_key_316, tmp_dict_value_316 );
    Py_DECREF( tmp_dict_value_316 );
    tmp_dict_value_317 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_dict_value_317 == NULL ))
    {
        tmp_dict_value_317 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_dict_value_317 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 842;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_317 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_64, tmp_dict_key_317, tmp_dict_value_317 );
    tmp_dict_value_318 = PyList_New( 5 );
    tmp_called_name_354 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_354 == NULL ))
    {
        tmp_called_name_354 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_354 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_146 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_146 == NULL ))
    {
        tmp_args_element_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_146 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 843;
    {
        PyObject *call_args[] = { tmp_args_element_name_146 };
        tmp_list_element_73 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_354, call_args );
    }

    if ( tmp_list_element_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_318, 0, tmp_list_element_73 );
    tmp_list_element_73 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_73 == NULL ))
    {
        tmp_list_element_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_73 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_73 );
    PyList_SET_ITEM( tmp_dict_value_318, 1, tmp_list_element_73 );
    tmp_list_element_73 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );

    if (unlikely( tmp_list_element_73 == NULL ))
    {
        tmp_list_element_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXVideoDeviceNV );
    }

    if ( tmp_list_element_73 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXVideoDeviceNV" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_73 );
    PyList_SET_ITEM( tmp_dict_value_318, 2, tmp_list_element_73 );
    tmp_called_name_355 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_355 == NULL ))
    {
        tmp_called_name_355 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_355 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_147 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_args_element_name_147 == NULL ))
    {
        tmp_args_element_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_args_element_name_147 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 843;
    {
        PyObject *call_args[] = { tmp_args_element_name_147 };
        tmp_list_element_73 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_355, call_args );
    }

    if ( tmp_list_element_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_318, 3, tmp_list_element_73 );
    tmp_called_name_356 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_356 == NULL ))
    {
        tmp_called_name_356 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_356 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_148 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_ulong );

    if (unlikely( tmp_args_element_name_148 == NULL ))
    {
        tmp_args_element_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_ulong );
    }

    if ( tmp_args_element_name_148 == NULL )
    {
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_ulong" );
        exception_tb = NULL;

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 843;
    {
        PyObject *call_args[] = { tmp_args_element_name_148 };
        tmp_list_element_73 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_356, call_args );
    }

    if ( tmp_list_element_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_353 );
        Py_DECREF( tmp_kw_name_64 );
        Py_DECREF( tmp_dict_value_318 );

        exception_lineno = 843;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_318, 4, tmp_list_element_73 );
    tmp_dict_key_318 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_64, tmp_dict_key_318, tmp_dict_value_318 );
    Py_DECREF( tmp_dict_value_318 );
    tmp_dict_value_319 = const_str_digest_8e739a2246775620a5171b129f6a57f7;
    tmp_dict_key_319 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_64, tmp_dict_key_319, tmp_dict_value_319 );
    tmp_dict_value_320 = LIST_COPY( const_list_ccc38a652f1ff5c5f4518bbb8d03e8b8_list );
    tmp_dict_key_320 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_64, tmp_dict_key_320, tmp_dict_value_320 );
    Py_DECREF( tmp_dict_value_320 );
    frame_module->f_lineno = 845;
    tmp_assign_source_312 = CALL_FUNCTION( tmp_called_name_353, tmp_args_name_64, tmp_kw_name_64 );
    Py_DECREF( tmp_called_name_353 );
    Py_DECREF( tmp_kw_name_64 );
    if ( tmp_assign_source_312 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 845;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXGetVideoInfoNV, tmp_assign_source_312 );
    tmp_source_name_291 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_291 == NULL ))
    {
        tmp_source_name_291 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_291 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 849;
        goto frame_exception_exit_1;
    }

    tmp_called_name_357 = LOOKUP_ATTRIBUTE( tmp_source_name_291, const_str_plain_createBaseFunction );
    if ( tmp_called_name_357 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 849;
        goto frame_exception_exit_1;
    }
    tmp_args_name_65 = const_tuple_str_plain_glXBindTexImageEXT_tuple;
    tmp_kw_name_65 = _PyDict_NewPresized( 5 );
    tmp_source_name_292 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_292 == NULL ))
    {
        tmp_source_name_292 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_292 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 850;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_321 = LOOKUP_ATTRIBUTE( tmp_source_name_292, const_str_plain_GL );
    if ( tmp_dict_value_321 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );

        exception_lineno = 850;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_321 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_65, tmp_dict_key_321, tmp_dict_value_321 );
    Py_DECREF( tmp_dict_value_321 );
    tmp_dict_value_322 = Py_None;
    tmp_dict_key_322 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_65, tmp_dict_key_322, tmp_dict_value_322 );
    tmp_dict_value_323 = PyList_New( 4 );
    tmp_called_name_358 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_358 == NULL ))
    {
        tmp_called_name_358 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_358 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_149 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_149 == NULL ))
    {
        tmp_args_element_name_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_149 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 851;
    {
        PyObject *call_args[] = { tmp_args_element_name_149 };
        tmp_list_element_74 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_358, call_args );
    }

    if ( tmp_list_element_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_323, 0, tmp_list_element_74 );
    tmp_list_element_74 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_74 == NULL ))
    {
        tmp_list_element_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_74 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_74 );
    PyList_SET_ITEM( tmp_dict_value_323, 1, tmp_list_element_74 );
    tmp_list_element_74 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_74 == NULL ))
    {
        tmp_list_element_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_74 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_74 );
    PyList_SET_ITEM( tmp_dict_value_323, 2, tmp_list_element_74 );
    tmp_called_name_359 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_359 == NULL ))
    {
        tmp_called_name_359 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_359 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_150 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_args_element_name_150 == NULL ))
    {
        tmp_args_element_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_args_element_name_150 == NULL )
    {
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 851;
    {
        PyObject *call_args[] = { tmp_args_element_name_150 };
        tmp_list_element_74 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_359, call_args );
    }

    if ( tmp_list_element_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_357 );
        Py_DECREF( tmp_kw_name_65 );
        Py_DECREF( tmp_dict_value_323 );

        exception_lineno = 851;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_323, 3, tmp_list_element_74 );
    tmp_dict_key_323 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_65, tmp_dict_key_323, tmp_dict_value_323 );
    Py_DECREF( tmp_dict_value_323 );
    tmp_dict_value_324 = const_str_digest_4e1a5d0367407337a6963aabb312ee17;
    tmp_dict_key_324 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_65, tmp_dict_key_324, tmp_dict_value_324 );
    tmp_dict_value_325 = LIST_COPY( const_list_28fa4832a7371e413208804bd2c2407c_list );
    tmp_dict_key_325 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_65, tmp_dict_key_325, tmp_dict_value_325 );
    Py_DECREF( tmp_dict_value_325 );
    frame_module->f_lineno = 853;
    tmp_assign_source_313 = CALL_FUNCTION( tmp_called_name_357, tmp_args_name_65, tmp_kw_name_65 );
    Py_DECREF( tmp_called_name_357 );
    Py_DECREF( tmp_kw_name_65 );
    if ( tmp_assign_source_313 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 853;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXBindTexImageEXT, tmp_assign_source_313 );
    tmp_source_name_293 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_293 == NULL ))
    {
        tmp_source_name_293 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_293 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 856;
        goto frame_exception_exit_1;
    }

    tmp_called_name_360 = LOOKUP_ATTRIBUTE( tmp_source_name_293, const_str_plain_createBaseFunction );
    if ( tmp_called_name_360 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 856;
        goto frame_exception_exit_1;
    }
    tmp_args_name_66 = const_tuple_str_plain_glXReleaseTextImageEXT_tuple;
    tmp_kw_name_66 = _PyDict_NewPresized( 5 );
    tmp_source_name_294 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_platform );

    if (unlikely( tmp_source_name_294 == NULL ))
    {
        tmp_source_name_294 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_platform );
    }

    if ( tmp_source_name_294 == NULL )
    {
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "platform" );
        exception_tb = NULL;

        exception_lineno = 857;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_326 = LOOKUP_ATTRIBUTE( tmp_source_name_294, const_str_plain_GL );
    if ( tmp_dict_value_326 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );

        exception_lineno = 857;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_326 = const_str_plain_dll;
    PyDict_SetItem( tmp_kw_name_66, tmp_dict_key_326, tmp_dict_value_326 );
    Py_DECREF( tmp_dict_value_326 );
    tmp_dict_value_327 = Py_None;
    tmp_dict_key_327 = const_str_plain_resultType;
    PyDict_SetItem( tmp_kw_name_66, tmp_dict_key_327, tmp_dict_value_327 );
    tmp_dict_value_328 = PyList_New( 3 );
    tmp_called_name_361 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_POINTER );

    if (unlikely( tmp_called_name_361 == NULL ))
    {
        tmp_called_name_361 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_POINTER );
    }

    if ( tmp_called_name_361 == NULL )
    {
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );
        Py_DECREF( tmp_dict_value_328 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "POINTER" );
        exception_tb = NULL;

        exception_lineno = 858;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_151 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_Display );

    if (unlikely( tmp_args_element_name_151 == NULL ))
    {
        tmp_args_element_name_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Display );
    }

    if ( tmp_args_element_name_151 == NULL )
    {
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );
        Py_DECREF( tmp_dict_value_328 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Display" );
        exception_tb = NULL;

        exception_lineno = 858;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 858;
    {
        PyObject *call_args[] = { tmp_args_element_name_151 };
        tmp_list_element_75 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_361, call_args );
    }

    if ( tmp_list_element_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );
        Py_DECREF( tmp_dict_value_328 );

        exception_lineno = 858;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_dict_value_328, 0, tmp_list_element_75 );
    tmp_list_element_75 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_GLXDrawable );

    if (unlikely( tmp_list_element_75 == NULL ))
    {
        tmp_list_element_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GLXDrawable );
    }

    if ( tmp_list_element_75 == NULL )
    {
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );
        Py_DECREF( tmp_dict_value_328 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "GLXDrawable" );
        exception_tb = NULL;

        exception_lineno = 858;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_75 );
    PyList_SET_ITEM( tmp_dict_value_328, 1, tmp_list_element_75 );
    tmp_list_element_75 = GET_STRING_DICT_VALUE( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_c_int );

    if (unlikely( tmp_list_element_75 == NULL ))
    {
        tmp_list_element_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_c_int );
    }

    if ( tmp_list_element_75 == NULL )
    {
        Py_DECREF( tmp_called_name_360 );
        Py_DECREF( tmp_kw_name_66 );
        Py_DECREF( tmp_dict_value_328 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "c_int" );
        exception_tb = NULL;

        exception_lineno = 858;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_75 );
    PyList_SET_ITEM( tmp_dict_value_328, 2, tmp_list_element_75 );
    tmp_dict_key_328 = const_str_plain_argTypes;
    PyDict_SetItem( tmp_kw_name_66, tmp_dict_key_328, tmp_dict_value_328 );
    Py_DECREF( tmp_dict_value_328 );
    tmp_dict_value_329 = const_str_digest_54ad5eaffdadc4af238a20981fb9c8d5;
    tmp_dict_key_329 = const_str_plain_doc;
    PyDict_SetItem( tmp_kw_name_66, tmp_dict_key_329, tmp_dict_value_329 );
    tmp_dict_value_330 = LIST_COPY( const_list_str_plain_dpy_str_plain_drawable_str_plain_buffer_list );
    tmp_dict_key_330 = const_str_plain_argNames;
    PyDict_SetItem( tmp_kw_name_66, tmp_dict_key_330, tmp_dict_value_330 );
    Py_DECREF( tmp_dict_value_330 );
    frame_module->f_lineno = 860;
    tmp_assign_source_314 = CALL_FUNCTION( tmp_called_name_360, tmp_args_name_66, tmp_kw_name_66 );
    Py_DECREF( tmp_called_name_360 );
    Py_DECREF( tmp_kw_name_66 );
    if ( tmp_assign_source_314 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain_glXReleaseTextImageEXT, tmp_assign_source_314 );

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module, exception_lineno );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module, exception_lineno );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;
    tmp_assign_source_315 = LIST_COPY( const_list_265dc922129348f3f8543af8faa8ab26_list );
    UPDATE_STRING_DICT1( moduledict_OpenGL$raw$_GLX_NV, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_315 );

    return MOD_RETURN_VALUE( module_OpenGL$raw$_GLX_NV );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
