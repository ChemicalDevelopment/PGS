/* Generated code for Python source for module 'six'
 * created by Nuitka version 0.5.22
 *
 * This code is in part copyright 2016 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

/* The _module_six is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_six;
PyDictObject *moduledict_six;

/* The module constants used, if any. */
static PyObject *const_str_plain___closure__;
extern PyObject *const_str_plain_get;
extern PyObject *const_str_digest_937e23fd1af2ef7336d82295a1301f51;
extern PyObject *const_str_plain_HTTPRedirectHandler;
extern PyObject *const_str_plain_data;
static PyObject *const_tuple_str_plain___spec___tuple;
static PyObject *const_str_plain__print;
static PyObject *const_tuple_str_plain_viewvalues_tuple;
static PyObject *const_str_plain_slots;
static PyObject *const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple;
static PyObject *const_str_digest_3f74da80d70054f566244d16961c095c;
extern PyObject *const_str_plain_urlencode;
extern PyObject *const_str_plain_OpenerDirector;
extern PyObject *const_str_plain_quote;
extern PyObject *const_str_plain_startswith;
extern PyObject *const_str_plain_pickle;
extern PyObject *const_tuple_str_plain_java_tuple;
static PyObject *const_tuple_02f51975eddf6871d90b3972207564b4_tuple;
static PyObject *const_tuple_46f723d6309298cb06eb75b900616e85_tuple;
static PyObject *const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple;
static PyObject *const_str_digest_cce73c34157ad7a21f7265310a153ec1;
static PyObject *const_str_plain_SimpleXMLRPCServer;
extern PyObject *const_str_plain___func__;
extern PyObject *const_str_plain_urljoin;
static PyObject *const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple;
static PyObject *const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple;
extern PyObject *const_str_plain_unicode_escape;
static PyObject *const_tuple_251221e54a5302daeb82388ea082ec95_tuple;
static PyObject *const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple;
extern PyObject *const_str_plain_unichr;
static PyObject *const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple;
extern PyObject *const_str_plain_urldefrag;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
extern PyObject *const_str_plain___path__;
extern PyObject *const_str_plain_i;
static PyObject *const_tuple_4690034a949ab9ca5f391d7593b67689_tuple;
extern PyObject *const_str_plain_cls;
static PyObject *const_tuple_104a70332acb2b4496703dc266a2c27c_tuple;
extern PyObject *const_str_plain_iteritems;
extern PyObject *const_str_digest_f5862b11e62dc1382b5d1226dd5ff379;
extern PyObject *const_str_plain_int;
static PyObject *const_tuple_str_plain___slots___tuple;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_FancyURLopener;
static PyObject *const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple;
extern PyObject *const_str_plain_write;
static PyObject *const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple;
static PyObject *const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple;
static PyObject *const_tuple_45353a5ecbb9971e49387253d02aa926_tuple;
static PyObject *const_str_plain_im_func;
extern PyObject *const_str_plain_itertools;
extern PyObject *const_str_plain_b;
static PyObject *const_str_digest_fa9629ad3e56524d94051e9d7ab9b735;
extern PyObject *const_str_plain_text_type;
extern PyObject *const_str_plain_copyreg;
static PyObject *const_str_digest_2f383546f01c636d68b29330ba99dcef;
static PyObject *const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple;
static PyObject *const_str_plain_ifilterfalse;
extern PyObject *const_str_plain_sep;
extern PyObject *const_str_plain_proxy_bypass;
static PyObject *const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_plain__urllib_request_moved_attributes;
extern PyObject *const_str_plain_Request;
extern PyObject *const_str_plain_tkinter;
static PyObject *const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1;
extern PyObject *const_str_plain_meta_path;
static PyObject *const_str_plain__func_defaults;
static PyObject *const_str_plain_get_source;
extern PyObject *const_str_plain_encoding;
static PyObject *const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple;
static PyObject *const_str_digest_2a7b3d36c635f4688c336c8ee8000e51;
static PyObject *const_tuple_411972e912d706a64e285af8aa597505_tuple;
extern PyObject *const_str_plain___slots__;
static PyObject *const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple;
static PyObject *const_str_plain_httplib;
static PyObject *const_str_plain_get_function_code;
static PyObject *const_str_digest_4082068f02f117842a4eba60151ac8c5;
extern PyObject *const_str_plain_addbase;
static PyObject *const_str_plain__assertRegex;
extern PyObject *const_str_plain_temporary_class;
static PyObject *const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple;
static PyObject *const_str_digest_a343d5bd65de7d15893f1a0d02d09f45;
extern PyObject *const_str_plain_s;
static PyObject *const_str_plain_email_mime_multipart;
extern PyObject *const_str_plain_items;
static PyObject *const_str_digest_44b5a94106b8a7650b1be1b19e45a62a;
extern PyObject *const_str_plain_new;
static PyObject *const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple;
static PyObject *const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple;
static PyObject *const_str_digest_8cc5006936e02b61706e4ff874fb2042;
static PyObject *const_str_digest_dc51ca580cc759241b93115ce34bf24c;
static PyObject *const_str_digest_dc2910a6e816441d866e674df51d57ac;
extern PyObject *const_str_plain___traceback__;
static PyObject *const_tuple_5fefbced8180c1de12054109841aa2ac_tuple;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_StringIO;
extern PyObject *const_str_plain___name__;
extern PyObject *const_str_plain_addinfo;
static PyObject *const_str_digest_813378a9c91048d7990696da82a61814;
static PyObject *const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b;
static PyObject *const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple;
static PyObject *const_str_digest_a13cea3eac144232780ec70fab3f1816;
static PyObject *const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple;
static PyObject *const_str_plain_updated;
static PyObject *const_tuple_187fbe928d64ead4410a5c32362e3350_tuple;
static PyObject *const_str_digest_4c46721e9886c5db124415a36253d572;
extern PyObject *const_str_plain___dir__;
static PyObject *const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple;
static PyObject *const_str_plain_tkinter_filedialog;
static PyObject *const_str_plain_tkinter_scrolledtext;
static PyObject *const_str_plain__urllib_response_moved_attributes;
extern PyObject *const_str_plain_HTTPCookieProcessor;
static PyObject *const_tuple_1a887db86b993bc5af6452d60025b66a_tuple;
extern PyObject *const_str_plain_map;
static PyObject *const_str_digest_98007d19004f11322e99f7f66acdf51d;
static PyObject *const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple;
static PyObject *const_str_plain_BaseHTTPServer;
static PyObject *const_tuple_str_plain_klass_tuple;
extern PyObject *const_str_plain_basestring;
static PyObject *const_str_plain_assertRegexpMatches;
static PyObject *const_str_plain_getitem;
static PyObject *const_str_plain_html_entities;
extern PyObject *const_str_plain_integer_types;
static PyObject *const_str_digest_ef5ae5746ab9ada338d738fcd9ef185d;
static PyObject *const_tuple_str_plain_func_str_plain_doc_tuple;
static PyObject *const_str_plain__module;
extern PyObject *const_str_plain_kw;
extern PyObject *const_str_plain_viewvalues;
static PyObject *const_str_digest_a72c0d952f927fbb71c170425931b6ab;
extern PyObject *const_str_plain_klass;
static PyObject *const_tuple_str_plain_self_str_plain_six_module_name_tuple;
static PyObject *const_str_digest_6fdf710e7d63e48e68391e1f587ae0a5;
static PyObject *const_str_plain_tkinter_simpledialog;
extern PyObject *const_str_plain_FileHandler;
static PyObject *const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple;
static PyObject *const_str_digest_64f81132823110b66a668f94ef3217ac;
static PyObject *const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple;
static PyObject *const_str_plain_importer;
static PyObject *const_tuple_str_plain_flush_false_tuple;
extern PyObject *const_str_plain_raw_input;
extern PyObject *const_str_plain_HTTPPasswordMgrWithDefaultRealm;
static PyObject *const_str_plain_old_attr;
static PyObject *const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple;
static PyObject *const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple;
extern PyObject *const_str_plain_module;
extern PyObject *const_str_plain_func_defaults;
static PyObject *const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_digest_04991ea695faff4a76e4efb6a8a8593f;
static PyObject *const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple;
static PyObject *const_tuple_586a1339d35425b5e4ad734e75b48193_tuple;
static PyObject *const_tuple_str_plain_viewitems_tuple;
extern PyObject *const_str_plain_python_2_unicode_compatible;
extern PyObject *const_str_plain_winreg;
static PyObject *const_tuple_str_plain_six_tuple;
static PyObject *const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple;
static PyObject *const_str_plain__moved_attributes;
static PyObject *const_str_plain_xmlrpc_client;
extern PyObject *const_str_plain___unicode__;
static PyObject *const_str_plain_reload_module;
static PyObject *const_tuple_424b5876d9142cfd116cee7c287158fe_tuple;
static PyObject *const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple;
static PyObject *const_str_digest_36b48fae7858438c9796c3d30c76579f;
static PyObject *const_str_digest_8f714300b54df1f07c5ea6ab3e1ef1e0;
extern PyObject *const_str_plain_self;
static PyObject *const_tuple_bb96d7dab96c950426bed873db7c315f_tuple;
static PyObject *const_str_digest_0796df54888fe073ef078d402adc4fc3;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple;
extern PyObject *const_str_plain_PY3;
static PyObject *const_str_plain__assertRaisesRegex;
static PyObject *const_str_plain_wrapped;
static PyObject *const_str_digest_41c64468a0c9e92d8eea5f7e817937e8;
extern PyObject *const_str_plain_func_globals;
static PyObject *const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple;
extern PyObject *const_str_plain_delattr;
extern PyObject *const_str_plain_operator;
extern PyObject *const_tuple_none_none_tuple;
static PyObject *const_tuple_str_plain_values_tuple;
static PyObject *const_str_digest_7cd96a434c5e7c2d0afa70c5bbed7be7;
extern PyObject *const_str_plain_mod;
extern PyObject *const_str_plain_gdbm;
static PyObject *const_str_digest_377bbfde508aa04103b00d9192b3b50d;
static PyObject *const_str_plain_Queue;
static PyObject *const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_tuple;
static PyObject *const_tuple_320c4efc844604789134735e48a67fb0_tuple;
extern PyObject *const_str_plain_urllib;
extern PyObject *const_str_plain___getattr__;
extern PyObject *const_str_digest_59bc9c95777e64e4720c3af0837aec42;
static PyObject *const_str_plain_indexbytes;
static PyObject *const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple;
static PyObject *const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple;
extern PyObject *const_str_plain_AbstractBasicAuthHandler;
static PyObject *const_str_plain_reload;
extern PyObject *const_str_plain___init__;
static PyObject *const_tuple_str_plain_d_str_plain_kw_tuple;
static PyObject *const_str_plain__MovedItems;
extern PyObject *const_str_plain_urllib2;
static PyObject *const_str_plain___get_module;
extern PyObject *const_str_plain_encode;
extern PyObject *const_str_plain_platform;
extern PyObject *const_str_plain___weakref__;
extern PyObject *const_str_plain_exec;
extern PyObject *const_tuple_str_plain_func_str_plain_cls_tuple;
extern PyObject *const_str_plain_java;
static PyObject *const_str_plain__LazyModule;
static PyObject *const_str_plain_tkSimpleDialog;
static PyObject *const_str_plain_im_self;
extern PyObject *const_str_plain_HTTPDigestAuthHandler;
static PyObject *const_str_plain_tkFont;
extern PyObject *const_str_plain_quote_plus;
extern PyObject *const_tuple_empty;
static PyObject *const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple;
static PyObject *const_str_plain_byte2int;
static PyObject *const_str_plain_Tix;
static PyObject *const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9;
extern PyObject *const_str_plain_strict;
static PyObject *const_str_digest_36bd400ddf45050462a62a66cdace7eb;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_str_plain__meth_self;
static PyObject *const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple;
static PyObject *const_tuple_31e595002f80a39949775964212a97b9_tuple;
static PyObject *const_str_digest_a13035c59d0f0e8c04a4feacc0004cd7;
static PyObject *const_str_plain_MAXSIZE;
static PyObject *const_str_plain_assertRegex;
static PyObject *const_str_plain_shlex_quote;
static PyObject *const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple;
static PyObject *const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple;
static PyObject *const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple;
extern PyObject *const_str_plain_ord;
extern PyObject *const_str_plain___next__;
extern PyObject *const_str_digest_52da6974eceb6e05255f92901fc2e2f2;
static PyObject *const_str_digest_1e91aab42d00f04e391d84545f09e2f5;
static PyObject *const_str_digest_97d8b3849ccb4841962c7ac18f0af059;
static PyObject *const_str_digest_122cdcc1600da4a884855d78ecd7756a;
extern PyObject *const_str_plain_RobotFileParser;
static PyObject *const_str_plain_submodule_search_locations;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple;
extern PyObject *const_str_plain_AbstractDigestAuthHandler;
static PyObject *const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple;
extern PyObject *const_str_plain_reduce;
static PyObject *const_tuple_389a28f291802cc0a0085952a3a22b60_tuple;
extern PyObject *const_str_plain_input;
static PyObject *const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple;
static PyObject *const_str_plain__get_module;
static PyObject *const_str_plain_tkFileDialog;
extern PyObject *const_str_plain_ProxyHandler;
extern PyObject *const_str_plain_cPickle;
static PyObject *const_str_plain_get_function_globals;
extern PyObject *const_str_plain_HTTPError;
static PyObject *const_str_digest_5b3beed978ba6433285f8986661c0d63;
static PyObject *const_str_plain_dbm_gnu;
static PyObject *const_str_plain__assertCountEqual;
static PyObject *const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple;
static PyObject *const_str_plain_tkinter_tksimpledialog;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_ClassType;
static PyObject *const_str_plain__func_code;
static PyObject *const_str_plain_slots_var;
static PyObject *const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3;
extern PyObject *const_str_plain_arg;
static PyObject *const_tuple_str_plain_sep_none_tuple;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_tuple_b95736e8f51c92667f5e42089a453e06_tuple;
static PyObject *const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple;
extern PyObject *const_str_plain__thread;
static PyObject *const_str_plain_tkinter_colorchooser;
extern PyObject *const_str_plain_FTPHandler;
extern PyObject *const_str_plain_izip;
extern PyObject *const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a;
extern PyObject *const_str_plain_xrange;
static PyObject *const_str_digest_07471a17cf805229414e895d873904c1;
static PyObject *const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple;
static PyObject *const_str_plain_tkinter_commondialog;
static PyObject *const_int_pos_2147483647;
static PyObject *const_int_pos_2147483648;
static PyObject *const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple;
extern PyObject *const_str_plain_replace;
extern PyObject *const_str_plain_lists;
static PyObject *const_str_digest_7cb7e1a5659547478f12d8fe755efd75;
static PyObject *const_str_plain__func_closure;
static PyObject *const_str_plain_tkColorChooser;
static PyObject *const_str_plain_assertRaisesRegex;
static PyObject *const_tuple_23e241754072378d4aca55ebd413fe81_tuple;
static PyObject *const_tuple_78e9781575bd6d8322d39e052488fa24_tuple;
extern PyObject *const_str_plain___new__;
static PyObject *const_str_digest_c18de21b4af59af9eda7ad848834774a;
extern PyObject *const_str_plain_http_client;
extern PyObject *const_str_plain_unquote;
extern PyObject *const_str_plain_path;
static PyObject *const_str_plain___loader__;
extern PyObject *const_str_plain_Cookie;
extern PyObject *const_str_plain_doc;
static PyObject *const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple;
extern PyObject *const_str_plain_name;
static PyObject *const_str_plain_tkinter_dnd;
static PyObject *const_str_digest_12251381889b9eebcd7998baa486eb86;
static PyObject *const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple;
extern PyObject *const_str_plain_collections;
extern PyObject *const_str_plain_wrapper;
static PyObject *const_str_digest_cc1200855d2ddc077676ac963b3ffc09;
static PyObject *const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple;
extern PyObject *const_str_plain_chr;
extern PyObject *const_str_plain_binary_type;
extern PyObject *const_str_plain_getcwd;
extern PyObject *const_str_plain_f_globals;
static PyObject *const_str_digest_70a0120f28d7311f633323a6bfb46104;
static PyObject *const_str_plain_iterbytes;
static PyObject *const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple;
static PyObject *const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38;
static PyObject *const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple;
static PyObject *const_str_plain_HTMLParser;
static PyObject *const_str_digest_6a93038d6d3774db54a1e6e70149bd98;
extern PyObject *const_str_plain_UnknownHandler;
static PyObject *const_tuple_e79d7f1b4734be0e37665951db297244_tuple;
static PyObject *const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple;
static PyObject *const_tuple_991a248aa1804f30822646929a31e57a_tuple;
extern PyObject *const_str_plain___globals__;
extern PyObject *const_str_plain_addinfourl;
extern PyObject *const_str_plain_splitquery;
extern PyObject *const_str_plain_uses_relative;
static PyObject *const_str_digest_c94e49aa6b31218158c33258bda42655;
static PyObject *const_str_plain_new_mod;
extern PyObject *const_str_plain_struct;
static PyObject *const_tuple_3587390c695a62b1bc9b3790076ef063_tuple;
static PyObject *const_str_plain_WRAPPER_ASSIGNMENTS;
extern PyObject *const_str_plain_itemgetter;
static PyObject *const_str_plain_getcwdu;
static PyObject *const_str_digest_096ca139beaf8ac5201071e235ad66b6;
static PyObject *const_str_plain_cookielib;
static PyObject *const_str_plain_SimpleHTTPServer;
extern PyObject *const_str_plain_parse;
extern PyObject *const_str_plain_imap;
static PyObject *const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple;
extern PyObject *const_str_plain_types;
extern PyObject *const_str_plain_meta;
static PyObject *const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple;
extern PyObject *const_tuple_int_pos_1_tuple;
static PyObject *const_str_digest_a5f041d60ba724151c334293929df649;
static PyObject *const_str_digest_af845b30b77af5531a80edf50d295161;
static PyObject *const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple;
static PyObject *const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple;
static PyObject *const_str_plain_get_code;
static PyObject *const_tuple_str_plain_builtins_str_plain___builtin___tuple;
static PyObject *const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple;
static PyObject *const_str_plain_tkMessageBox;
extern PyObject *const_str_plain_print;
extern PyObject *const_str_digest_1d2e267f2ccdeb84fbf4cb4191414e9f;
static PyObject *const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple;
static PyObject *const_str_digest_bdf07efe689edd815848f7ba41ea2eee;
extern PyObject *const_str_plain_getproxies;
extern PyObject *const_str_plain_frame;
static PyObject *const_str_plain_http_cookies;
static PyObject *const_str_plain_xmlrpclib;
static PyObject *const_str_plain_Module_six_moves_urllib_error;
extern PyObject *const_str_plain_PY2;
static PyObject *const_str_plain_UserList;
static PyObject *const_tuple_547fe239a3216bb76fb01949941399cd_tuple;
extern PyObject *const_str_plain_uses_params;
static PyObject *const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple;
static PyObject *const_str_plain_WRAPPER_UPDATES;
static PyObject *const_str_plain_xmlrpc_server;
static PyObject *const_tuple_str_plain_reprlib_str_plain_repr_tuple;
extern PyObject *const_str_plain_URLopener;
static PyObject *const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple;
extern PyObject *const_str_plain_htmlentitydefs;
static PyObject *const_tuple_str_plain_end_none_tuple;
static PyObject *const_str_plain_CGIHTTPServer;
extern PyObject *const_str_plain___call__;
extern PyObject *const_str_plain_ConfigParser;
static PyObject *const_str_digest_1a36329ae97c46a5978110ca53f2f5e7;
extern PyObject *const_str_plain_partial;
extern PyObject *const_str_plain_urlsplit;
extern PyObject *const_str_plain_builtins;
static PyObject *const_str_plain__func_globals;
static PyObject *const_str_plain_six_module_name;
extern PyObject *const_str_plain_tb;
static PyObject *const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple;
extern PyObject *const_str_plain_type;
static PyObject *const_str_plain_Module_six_moves_urllib_parse;
extern PyObject *const_str_plain_tp;
static PyObject *const_str_plain_email_mime_base;
static PyObject *const_list_str_plain___doc___str_plain___name___list;
static PyObject *const_str_plain_tkinter_messagebox;
static PyObject *const_str_plain_ScrolledText;
static PyObject *const_tuple_str_plain_value_str_plain_from_value_tuple;
static PyObject *const_str_plain_email_mime_text;
static PyObject *const_str_digest_4f965162d0a8bf5d5b4136bee888b84b;
static PyObject *const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple;
static PyObject *const_str_plain_pipes;
static PyObject *const_str_digest_fcac682f3d9b9835f1b6816f54ff0830;
extern PyObject *const_str_plain_configparser;
static PyObject *const_str_plain__meth_func;
extern PyObject *const_str_plain_object;
extern PyObject *const_tuple_int_pos_3_int_pos_3_tuple;
static PyObject *const_str_digest_0e07ea38c4cf2fbcefc89e7de4db934c;
extern PyObject *const_str_plain_dummy_thread;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_pack;
static PyObject *const_str_plain_get_function_defaults;
static PyObject *const_tuple_efb9818f797f41ca8cd537504758b934_tuple;
extern PyObject *const_str_plain_it;
static PyObject *const_str_plain_is_package;
static PyObject *const_str_digest_89029d2dedfd3a97fd4d41a1b57a375b;
extern PyObject *const_str_plain_file;
static PyObject *const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple;
static PyObject *const_tuple_cf52b2b37e911829df5ff352b85be861_tuple;
extern PyObject *const_str_plain_robotparser;
extern PyObject *const_str_plain_maxsize;
static PyObject *const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple;
extern PyObject *const_str_plain_HTTPErrorProcessor;
static PyObject *const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple;
static PyObject *const_str_plain__SixMetaPathImporter__get_module;
extern PyObject *const_str_plain_viewkeys;
extern PyObject *const_str_plain_urlcleanup;
extern PyObject *const_str_plain_f_locals;
static PyObject *const_tuple_str_plain___dict___none_tuple;
static PyObject *const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple;
extern PyObject *const_str_plain_value;
static PyObject *const_str_plain_tkCommonDialog;
static PyObject *const_str_plain__add_doc;
extern PyObject *const_str_plain_urlparse;
static PyObject *const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple;
static PyObject *const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple;
static PyObject *const_str_plain_MovedModule;
static PyObject *const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple;
extern PyObject *const_str_plain_socketserver;
extern PyObject *const_str_plain_wraps;
static PyObject *const_tuple_str_plain_viewkeys_tuple;
static PyObject *const_str_digest_39084269160328bfe64f57e4e4ad6847;
static PyObject *const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_buf;
static PyObject *const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple;
extern PyObject *const_str_plain_HTTPDefaultErrorHandler;
static PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain_error;
static PyObject *const_str_digest_0e7fae28a2f47cf9bbe813dcd6d34e25;
static PyObject *const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple;
static PyObject *const_str_digest_53317e6be879446851f4fe6f94b546e7;
static PyObject *const_str_plain__importer;
static PyObject *const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple;
extern PyObject *const_str_plain_raise_from;
static PyObject *const_str_plain_create_unbound_method;
static PyObject *const_str_plain_get_method_self;
extern PyObject *const_str_plain_errors;
static PyObject *const_str_digest_492eced51578a561806e20ae8ef1f867;
extern PyObject *const_str_plain_modules;
extern PyObject *const_int_pos_4;
extern PyObject *const_int_pos_2;
static PyObject *const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_class_types;
extern PyObject *const_str_plain_old;
static PyObject *const_str_plain_shlex;
extern PyObject *const_str_plain_moves;
extern PyObject *const_str_plain_iter;
static PyObject *const_str_plain_get_function_closure;
extern PyObject *const_str_plain___author__;
static PyObject *const_str_plain__globs_;
extern PyObject *const_int_pos_3;
static PyObject *const_str_digest_dde65581d0349b25365c94106df5eaa4;
extern PyObject *const_str_plain_urlunsplit;
static PyObject *const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple;
extern PyObject *const_str_space;
static PyObject *const_str_plain_tkinter_constants;
static PyObject *const_str_digest_67aba58fab2484c4d294c8cbe1258e39;
static PyObject *const_str_plain__LazyDescr;
static PyObject *const_str_plain_email_mime_nonmultipart;
static PyObject *const_str_digest_1164690e1be4282a96b5a813ded7269b;
extern PyObject *const_str_plain_newline;
extern PyObject *const_str_plain_cStringIO;
static PyObject *const_str_plain_get_method_function;
extern PyObject *const_str_plain_space;
static PyObject *const_str_plain_UserDict;
extern PyObject *const_str_plain_io;
static PyObject *const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple;
static PyObject *const_str_digest_13baab1dc3d5588a95d9291b1530e6c0;
extern PyObject *const_str_plain_pathname2url;
static PyObject *const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple;
static PyObject *const_str_plain_tkinter_tkfiledialog;
static PyObject *const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple;
extern PyObject *const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple;
extern PyObject *const_str_plain_functools;
static PyObject *const_str_plain_orig_vars;
static PyObject *const_str_plain_assertRaisesRegexp;
extern PyObject *const_str_plain_attr;
extern PyObject *const_str_plain_parse_qs;
static PyObject *const_str_plain_Tkdnd;
extern PyObject *const_str_plain_long;
static PyObject *const_str_plain_Module_six_moves_urllib_response;
extern PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_tuple;
static PyObject *const_str_plain__locs_;
static PyObject *const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8;
extern PyObject *const_str_angle_string;
extern PyObject *const_str_plain_string_types;
extern PyObject *const_tuple_161fc844a072f0af4aef9f4d296def14_tuple;
static PyObject *const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple;
static PyObject *const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple;
static PyObject *const_tuple_90e06424913ba9ad885f60767479fe37_tuple;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_fp;
extern PyObject *const_str_plain_X;
extern PyObject *const_str_plain_urlunparse;
static PyObject *const_str_plain___self__;
static PyObject *const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple;
extern PyObject *const_str_plain_stdout;
extern PyObject *const_str_plain_with_metaclass;
static PyObject *const_str_digest_d082ba711c791809312af019a50cc3ce;
static PyObject *const_tuple_str_plain_metaclass_str_plain_wrapper_tuple;
extern PyObject *const_str_plain_ModuleType;
static PyObject *const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4;
extern PyObject *const_str_plain_d;
static PyObject *const_str_plain_int2byte;
extern PyObject *const_str_plain_iterkeys;
static PyObject *const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd;
static PyObject *const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple;
static PyObject *const_str_digest_836236e827883e9923f3b043ffe4640d;
extern PyObject *const_tuple_str_plain_s_tuple;
extern PyObject *const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple;
extern PyObject *const_str_plain_u;
extern PyObject *const_str_plain___dict__;
extern PyObject *const_str_plain___defaults__;
static PyObject *const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple;
extern PyObject *const_str_plain_flush;
static PyObject *const_str_plain_urllib_error;
extern PyObject *const_str_plain_unquote_plus;
extern PyObject *const_str_plain_HTTPPasswordMgr;
static PyObject *const_str_plain_iterlists;
static PyObject *const_str_plain_tkinter_ttk;
static PyObject *const_str_plain_filterfalse;
static PyObject *const_str_plain_ttk;
static PyObject *const_tuple_str_plain_bs_tuple;
extern PyObject *const_str_plain_ContentTooShortError;
static PyObject *const_str_plain_methodcaller;
static PyObject *const_tuple_45037418d37481db3e88817f5f3e75d5_tuple;
static PyObject *const_str_digest_0f0322cacec3a164468e788b6cf4cba4;
extern PyObject *const_str_plain_copy_reg;
static PyObject *const_str_digest_b136a150499b95c9a0929c5fba6642cb;
static PyObject *const_str_plain_get_unbound_function;
extern PyObject *const_str_plain_win32;
static PyObject *const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple;
extern PyObject *const_str_plain_imp;
static PyObject *const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple;
extern PyObject *const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple;
static PyObject *const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple;
extern PyObject *const_str_plain_viewitems;
static PyObject *const_str_plain_want_unicode;
static PyObject *const_str_plain_MovedAttribute;
extern PyObject *const_str_plain_zip;
extern PyObject *const_str_plain_load_module;
extern PyObject *const_str_plain_MethodType;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_repr;
static PyObject *const_str_plain_html_parser;
static PyObject *const_str_plain_zip_longest;
static PyObject *const_str_plain_unbound;
static PyObject *const_str_plain_six;
static PyObject *const_tuple_b7e39273727f74459e3203a2be1ea787_tuple;
extern PyObject *const_str_plain___version__;
static PyObject *const_str_digest_7e4f7e7d87a44d0e81f11f08170c9bf6;
extern PyObject *const_str_plain_uses_netloc;
extern PyObject *const_str_plain_callable;
extern PyObject *const_str_plain_Iterator;
static PyObject *const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple;
extern PyObject *const_str_plain__getframe;
static PyObject *const_str_plain_Tkinter;
extern PyObject *const_str_plain_url2pathname;
extern PyObject *const_str_plain_reraise;
static PyObject *const_str_plain_tkinter_tix;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_BytesIO;
static PyObject *const_str_plain_add_metaclass;
extern PyObject *const_str_plain_response;
static PyObject *const_str_plain_SimpleDialog;
static PyObject *const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple;
extern PyObject *const_str_plain_splituser;
extern PyObject *const_str_plain_thread;
static PyObject *const_str_digest_af06de2d225df4407b0a0ba06a331ccf;
extern PyObject *const_tuple_str_plain_name_tuple;
static PyObject *const_str_plain_assigned;
extern PyObject *const_str_plain_ProxyBasicAuthHandler;
static PyObject *const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple;
extern PyObject *const_str_angle_lambda;
extern PyObject *const_str_plain_copy;
extern PyObject *const_str_plain_attrgetter;
extern PyObject *const_str_plain_HTTPHandler;
extern PyObject *const_str_digest_62b7e67e29e99420603c12d205222fa5;
static PyObject *const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple;
static PyObject *const_str_plain___package__;
static PyObject *const_str_digest_2a86adf5a4eff7c85cf98b964b9653c8;
extern PyObject *const_str_plain_splittag;
static PyObject *const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple;
extern PyObject *const_str_plain_func;
static PyObject *const_str_plain__code_;
static PyObject *const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple;
static PyObject *const_tuple_3adb059b24d1b9435823e57bdb130564_tuple;
static PyObject *const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple;
static PyObject *const_str_plain_izip_longest;
static PyObject *const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple;
static PyObject *const_str_digest_62c17ddfba14b5f942749b77083b82bc;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_ProxyDigestAuthHandler;
static PyObject *const_str_digest_0f169d7824efcd520f23c128909f68ee;
static PyObject *const_str_digest_72df134f8c83427ccf218c27297b8304;
static PyObject *const_str_plain_func_closure;
static PyObject *const_str_digest_745e67bb7def529140f256e556b67b38;
extern PyObject *const_str_plain_queue;
static PyObject *const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple;
static PyObject *const_tuple_1a737763e143149741eebf35b19ac3f9_tuple;
static PyObject *const_str_digest_91987f05961643baf523130276babe51;
static PyObject *const_str_plain_new_attr;
extern PyObject *const_str_plain_next;
static PyObject *const_str_plain__add_module;
extern PyObject *const_str_plain_intern;
extern PyObject *const_str_plain_unicode;
static PyObject *const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple;
static PyObject *const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib;
extern PyObject *const_str_plain_bs;
extern PyObject *const_str_plain_exec_;
static PyObject *const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple;
extern PyObject *const_str_plain___builtin__;
static PyObject *const_str_plain_urllib_robotparser;
static PyObject *const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple;
static PyObject *const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple;
static PyObject *const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple;
static PyObject *const_str_plain_remove_move;
extern PyObject *const_unicode_space;
extern PyObject *const_str_plain_staticmethod;
extern PyObject *const_str_plain_range;
static PyObject *const_str_digest_bc859a90e4d9c0b4fce03f66d37f0cf6;
extern PyObject *const_unicode_newline;
static PyObject *const_tuple_a766c17241115f6922b493dfd444b3b5_tuple;
static PyObject *const_tuple_d573636f316e67f758ce3eddfc433d39_tuple;
static PyObject *const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple;
extern PyObject *const_str_plain___str__;
extern PyObject *const_str_plain_move;
static PyObject *const_tuple_983a57efce70dcb41da6c64e832b9120_tuple;
static PyObject *const_str_plain__import_module;
extern PyObject *const_str_plain_http_cookiejar;
static PyObject *const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple;
extern PyObject *const_str_plain_with_traceback;
static PyObject *const_str_plain_add_move;
static PyObject *const_str_plain_SocketServer;
static PyObject *const_str_plain__urllib_error_moved_attributes;
extern PyObject *const_str_plain___len__;
static PyObject *const_int_pos_9223372036854775807;
static PyObject *const_str_plain_tkinter_font;
extern PyObject *const_str_plain_uses_fragment;
static PyObject *const_str_plain__SixMetaPathImporter;
extern PyObject *const_str_plain__dummy_thread;
extern PyObject *const_tuple_int_0_tuple;
static PyObject *const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8;
extern PyObject *const_str_plain_find_module;
extern PyObject *const_str_digest_45c254f6a6153d392478fd2944a253a6;
static PyObject *const_str_plain__resolve;
extern PyObject *const_str_plain_SplitResult;
static PyObject *const_tuple_str_plain_func_str_plain_obj_tuple;
static PyObject *const_str_digest_345fae18cb5b2b245881e77b200cffe5;
extern PyObject *const_str_plain_version_info;
extern PyObject *const_str_plain_urlretrieve;
static PyObject *const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple;
extern PyObject *const_str_plain_func_code;
static PyObject *const_tuple_5e662527879cefa60fbd95a7550cf311_tuple;
static PyObject *const_str_plain_fullnames;
extern PyObject *const_str_plain_request;
extern PyObject *const_str_plain_uses_query;
static PyObject *const_str_digest_b0187e473195d5f4e7f8d9079ea0b7b3;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple;
static PyObject *const_str_digest_d8d4f5e440c7f01129293c18f6555af5;
static PyObject *const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple;
extern PyObject *const_str_plain_build_opener;
static PyObject *const_str_plain_FileDialog;
static PyObject *const_str_digest_666540d560c14e9851ed9be690845abf;
static PyObject *const_str_plain_Tkconstants;
extern PyObject *const_str_plain_HTTPSHandler;
extern PyObject *const_str_plain_install_opener;
extern PyObject *const_str_plain_CacheFTPHandler;
static PyObject *const_tuple_str_plain___weakref___none_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple;
extern PyObject *const_str_plain_bases;
extern PyObject *const_str_plain___get__;
static PyObject *const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple;
static PyObject *const_str_digest_087d011e227804c37fa5a994ee918bbe;
static PyObject *const_str_plain_Module_six_moves_urllib_robotparser;
extern PyObject *const_str_dot;
static PyObject *const_tuple_str_plain_keys_tuple;
extern PyObject *const_str_plain_enumerate;
static PyObject *const_str_plain_known_modules;
static PyObject *const_tuple_15e64786f005915ad409681ea2752bf5_tuple;
extern PyObject *const_str_plain_pop;
static PyObject *const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple;
extern PyObject *const_str_plain_values;
extern PyObject *const_str_plain_reprlib;
static PyObject *const_str_digest_f13c881fad34db50f71983f3aeb67682;
extern PyObject *const_str_plain___wrapped__;
static PyObject *const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib_request;
static PyObject *const_str_plain_print_;
extern PyObject *const_str_plain_BaseHandler;
static PyObject *const_str_plain__urllib_parse_moved_attributes;
extern PyObject *const_str_plain_this_bases;
static PyObject *const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple;
extern PyObject *const_str_plain_URLError;
static PyObject *const_str_plain__urllib_robotparser_moved_attributes;
extern PyObject *const_str_plain_ifilter;
static PyObject *const_str_digest_da28dd0fdfcf2d692298525ceb765fa8;
extern PyObject *const_str_newline;
static PyObject *const_str_plain_getcwdb;
extern PyObject *const_str_plain_filter;
extern PyObject *const_tuple_str_plain_it_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_module_tuple;
static PyObject *const_list_1c82cc17d8f54cff757731adfdff677e_list;
extern PyObject *const_str_plain_urlopen;
extern PyObject *const_str_plain_obj;
extern PyObject *const_str_plain__winreg;
static PyObject *const_str_plain_tkinter_dialog;
extern PyObject *const_str_plain_attrs;
static PyObject *const_tuple_str_plain_move_tuple;
static PyObject *const_tuple_str_plain_buf_str_plain_i_tuple;
extern PyObject *const_tuple_str_plain_obj_tuple;
static PyObject *const_tuple_str_plain_unbound_tuple;
static PyObject *const_str_plain_create_bound_method;
extern PyObject *const_str_plain___mro__;
static PyObject *const_tuple_int_pos_3_int_pos_4_tuple;
extern PyObject *const_str_plain_parse_qsl;
static PyObject *const_tuple_int_pos_3_int_pos_2_tuple;
extern PyObject *const_str_plain_bytes;
extern PyObject *const_tuple_str_plain_self_str_plain_name_tuple;
static PyObject *const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple;
static PyObject *const_str_plain_urllib_parse;
static PyObject *const_str_digest_ebf751844f7678efef5423dab5acd577;
static PyObject *const_str_plain_assertItemsEqual;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_str_digest_faf5973379f42e9b5528565b323f20e0;
static PyObject *const_str_plain_old_mod;
extern PyObject *const_str_plain___code__;
extern PyObject *const_str_digest_f1949150375e8b53443d58d93fe4f89e;
extern PyObject *const_str_plain_any;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_tuple_df925d4985bc969100774d9243b00230_tuple;
static PyObject *const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple;
static PyObject *const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple;
extern PyObject *const_str_plain___bases__;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_digest_c1940ed36d6c651776a6e3a34c7131e3;
static PyObject *const_str_plain_PY34;
static PyObject *const_tuple_str_plain_items_tuple;
static PyObject *const_tuple_097719e7086f8299513e74ca5958de16_tuple;
static PyObject *const_str_digest_49a9c7122d03f39309f825cb4f8684d5;
static PyObject *const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple;
static PyObject *const_tuple_1ca2df1302c361039c60608fe3780090_tuple;
static PyObject *const_str_plain_advance_iterator;
extern PyObject *const_str_plain_fullname;
static PyObject *const_str_plain_UserString;
static PyObject *const_tuple_str_plain_winreg_str_plain__winreg_tuple;
extern PyObject *const_str_plain_addclosehook;
static PyObject *const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple;
extern PyObject *const_str_plain_keys;
extern PyObject *const_str_plain_end;
static PyObject *const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple;
static PyObject *const_str_plain_from_value;
static PyObject *const_tuple_str_plain_queue_str_plain_Queue_tuple;
extern PyObject *const_str_plain_itervalues;
static PyObject *const_str_plain_Struct;
extern PyObject *const_str_plain_importlib;
static PyObject *const_str_plain_assertCountEqual;
extern PyObject *const_str_plain_ParseResult;
extern PyObject *const_str_plain_HTTPBasicAuthHandler;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_str_plain_Dialog;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_str_plain___closure__ = UNSTREAM_STRING( &constant_bin[ 1872073 ], 11, 1 );
    const_tuple_str_plain___spec___tuple = PyTuple_New( 1 );
    const_str_plain___spec__ = UNSTREAM_STRING( &constant_bin[ 1872084 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___spec___tuple, 0, const_str_plain___spec__ ); Py_INCREF( const_str_plain___spec__ );
    const_str_plain__print = UNSTREAM_STRING( &constant_bin[ 117404 ], 6, 1 );
    const_tuple_str_plain_viewvalues_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_viewvalues_tuple, 0, const_str_plain_viewvalues ); Py_INCREF( const_str_plain_viewvalues );
    const_str_plain_slots = UNSTREAM_STRING( &constant_bin[ 1872092 ], 5, 1 );
    const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple = PyTuple_New( 1 );
    const_str_digest_d8d4f5e440c7f01129293c18f6555af5 = UNSTREAM_STRING( &constant_bin[ 1872097 ], 9, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple, 0, const_str_digest_d8d4f5e440c7f01129293c18f6555af5 ); Py_INCREF( const_str_digest_d8d4f5e440c7f01129293c18f6555af5 );
    const_str_digest_3f74da80d70054f566244d16961c095c = UNSTREAM_STRING( &constant_bin[ 1872106 ], 24, 0 );
    const_tuple_02f51975eddf6871d90b3972207564b4_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 0, const_str_plain_HTTPDigestAuthHandler ); Py_INCREF( const_str_plain_HTTPDigestAuthHandler );
    PyTuple_SET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_46f723d6309298cb06eb75b900616e85_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 0, const_str_plain_HTTPErrorProcessor ); Py_INCREF( const_str_plain_HTTPErrorProcessor );
    PyTuple_SET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_dialog = UNSTREAM_STRING( &constant_bin[ 1872130 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 0, const_str_plain_tkinter_dialog ); Py_INCREF( const_str_plain_tkinter_dialog );
    const_str_plain_Dialog = UNSTREAM_STRING( &constant_bin[ 1872144 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 1, const_str_plain_Dialog ); Py_INCREF( const_str_plain_Dialog );
    const_str_digest_49a9c7122d03f39309f825cb4f8684d5 = UNSTREAM_STRING( &constant_bin[ 80113 ], 14, 0 );
    PyTuple_SET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 2, const_str_digest_49a9c7122d03f39309f825cb4f8684d5 ); Py_INCREF( const_str_digest_49a9c7122d03f39309f825cb4f8684d5 );
    const_str_digest_cce73c34157ad7a21f7265310a153ec1 = UNSTREAM_STRING( &constant_bin[ 1872150 ], 32, 0 );
    const_str_plain_SimpleXMLRPCServer = UNSTREAM_STRING( &constant_bin[ 1872182 ], 18, 1 );
    const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple = PyTuple_New( 3 );
    const_str_plain_UserList = UNSTREAM_STRING( &constant_bin[ 80451 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 0, const_str_plain_UserList ); Py_INCREF( const_str_plain_UserList );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 1, const_str_plain_UserList ); Py_INCREF( const_str_plain_UserList );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 2, const_str_plain_collections ); Py_INCREF( const_str_plain_collections );
    const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 3, const_str_plain_flush ); Py_INCREF( const_str_plain_flush );
    const_tuple_251221e54a5302daeb82388ea082ec95_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 0, const_str_plain_urlunsplit ); Py_INCREF( const_str_plain_urlunsplit );
    PyTuple_SET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple = PyTuple_New( 1 );
    const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38 = UNSTREAM_STRING( &constant_bin[ 1872200 ], 25, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple, 0, const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38 ); Py_INCREF( const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38 );
    const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 0, const_str_plain_AbstractBasicAuthHandler ); Py_INCREF( const_str_plain_AbstractBasicAuthHandler );
    PyTuple_SET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_4690034a949ab9ca5f391d7593b67689_tuple = PyTuple_New( 3 );
    const_str_plain_xmlrpc_server = UNSTREAM_STRING( &constant_bin[ 1872225 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 0, const_str_plain_xmlrpc_server ); Py_INCREF( const_str_plain_xmlrpc_server );
    PyTuple_SET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 1, const_str_plain_SimpleXMLRPCServer ); Py_INCREF( const_str_plain_SimpleXMLRPCServer );
    const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3 = UNSTREAM_STRING( &constant_bin[ 246931 ], 13, 0 );
    PyTuple_SET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 2, const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3 ); Py_INCREF( const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3 );
    const_tuple_104a70332acb2b4496703dc266a2c27c_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 0, const_str_plain_addinfourl ); Py_INCREF( const_str_plain_addinfourl );
    PyTuple_SET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_tuple_str_plain___slots___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___slots___tuple, 0, const_str_plain___slots__ ); Py_INCREF( const_str_plain___slots__ );
    const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 0, const_str_plain_unquote ); Py_INCREF( const_str_plain_unquote );
    PyTuple_SET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_constants = UNSTREAM_STRING( &constant_bin[ 1872238 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 0, const_str_plain_tkinter_constants ); Py_INCREF( const_str_plain_tkinter_constants );
    const_str_plain_Tkconstants = UNSTREAM_STRING( &constant_bin[ 1872255 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 1, const_str_plain_Tkconstants ); Py_INCREF( const_str_plain_Tkconstants );
    const_str_digest_fcac682f3d9b9835f1b6816f54ff0830 = UNSTREAM_STRING( &constant_bin[ 1872266 ], 17, 0 );
    PyTuple_SET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 2, const_str_digest_fcac682f3d9b9835f1b6816f54ff0830 ); Py_INCREF( const_str_digest_fcac682f3d9b9835f1b6816f54ff0830 );
    const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple, 0, const_str_plain_copyreg ); Py_INCREF( const_str_plain_copyreg );
    PyTuple_SET_ITEM( const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple, 1, const_str_plain_copy_reg ); Py_INCREF( const_str_plain_copy_reg );
    const_tuple_45353a5ecbb9971e49387253d02aa926_tuple = PyTuple_New( 3 );
    const_str_plain_xmlrpc_client = UNSTREAM_STRING( &constant_bin[ 1872283 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 0, const_str_plain_xmlrpc_client ); Py_INCREF( const_str_plain_xmlrpc_client );
    const_str_plain_xmlrpclib = UNSTREAM_STRING( &constant_bin[ 1872296 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 1, const_str_plain_xmlrpclib ); Py_INCREF( const_str_plain_xmlrpclib );
    const_str_digest_72df134f8c83427ccf218c27297b8304 = UNSTREAM_STRING( &constant_bin[ 80143 ], 13, 0 );
    PyTuple_SET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 2, const_str_digest_72df134f8c83427ccf218c27297b8304 ); Py_INCREF( const_str_digest_72df134f8c83427ccf218c27297b8304 );
    const_str_plain_im_func = UNSTREAM_STRING( &constant_bin[ 538359 ], 7, 1 );
    const_str_digest_fa9629ad3e56524d94051e9d7ab9b735 = UNSTREAM_STRING( &constant_bin[ 1872305 ], 29, 0 );
    const_str_digest_2f383546f01c636d68b29330ba99dcef = UNSTREAM_STRING( &constant_bin[ 1872334 ], 11, 0 );
    const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 0, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    PyTuple_SET_ITEM( const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 2, const_str_plain_tb ); Py_INCREF( const_str_plain_tb );
    const_str_plain_ifilterfalse = UNSTREAM_STRING( &constant_bin[ 243442 ], 12, 1 );
    const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple = PyTuple_New( 1 );
    const_str_digest_345fae18cb5b2b245881e77b200cffe5 = UNSTREAM_STRING( &constant_bin[ 1872345 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple, 0, const_str_digest_345fae18cb5b2b245881e77b200cffe5 ); Py_INCREF( const_str_digest_345fae18cb5b2b245881e77b200cffe5 );
    const_str_plain__urllib_request_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1872367 ], 32, 1 );
    const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1 = UNSTREAM_STRING( &constant_bin[ 1872399 ], 67, 0 );
    const_str_plain__func_defaults = UNSTREAM_STRING( &constant_bin[ 1872466 ], 14, 1 );
    const_str_plain_get_source = UNSTREAM_STRING( &constant_bin[ 1872480 ], 10, 1 );
    const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_colorchooser = UNSTREAM_STRING( &constant_bin[ 1872490 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 0, const_str_plain_tkinter_colorchooser ); Py_INCREF( const_str_plain_tkinter_colorchooser );
    const_str_plain_tkColorChooser = UNSTREAM_STRING( &constant_bin[ 1872510 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 1, const_str_plain_tkColorChooser ); Py_INCREF( const_str_plain_tkColorChooser );
    const_str_digest_745e67bb7def529140f256e556b67b38 = UNSTREAM_STRING( &constant_bin[ 1872524 ], 20, 0 );
    PyTuple_SET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 2, const_str_digest_745e67bb7def529140f256e556b67b38 ); Py_INCREF( const_str_digest_745e67bb7def529140f256e556b67b38 );
    const_str_digest_2a7b3d36c635f4688c336c8ee8000e51 = UNSTREAM_STRING( &constant_bin[ 1872544 ], 24, 0 );
    const_tuple_411972e912d706a64e285af8aa597505_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 0, const_str_plain_cStringIO ); Py_INCREF( const_str_plain_cStringIO );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 1, const_str_plain_cStringIO ); Py_INCREF( const_str_plain_cStringIO );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 2, const_str_plain_io ); Py_INCREF( const_str_plain_io );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 3, const_str_plain_StringIO ); Py_INCREF( const_str_plain_StringIO );
    const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple, 0, const_str_digest_3f74da80d70054f566244d16961c095c ); Py_INCREF( const_str_digest_3f74da80d70054f566244d16961c095c );
    const_str_plain_httplib = UNSTREAM_STRING( &constant_bin[ 1872568 ], 7, 1 );
    const_str_plain_get_function_code = UNSTREAM_STRING( &constant_bin[ 1872575 ], 17, 1 );
    const_str_digest_4082068f02f117842a4eba60151ac8c5 = UNSTREAM_STRING( &constant_bin[ 1872592 ], 14, 0 );
    const_str_plain__assertRegex = UNSTREAM_STRING( &constant_bin[ 1872606 ], 12, 1 );
    const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 0, const_str_plain__dummy_thread ); Py_INCREF( const_str_plain__dummy_thread );
    PyTuple_SET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 1, const_str_plain_dummy_thread ); Py_INCREF( const_str_plain_dummy_thread );
    PyTuple_SET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 2, const_str_plain__dummy_thread ); Py_INCREF( const_str_plain__dummy_thread );
    const_str_digest_a343d5bd65de7d15893f1a0d02d09f45 = UNSTREAM_STRING( &constant_bin[ 1872618 ], 63, 0 );
    const_str_plain_email_mime_multipart = UNSTREAM_STRING( &constant_bin[ 1872681 ], 20, 1 );
    const_str_digest_44b5a94106b8a7650b1be1b19e45a62a = UNSTREAM_STRING( &constant_bin[ 1872701 ], 20, 0 );
    const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 0, const_str_plain_filter ); Py_INCREF( const_str_plain_filter );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 3, const_str_plain_ifilter ); Py_INCREF( const_str_plain_ifilter );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 4, const_str_plain_filter ); Py_INCREF( const_str_plain_filter );
    const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 0, const_str_plain_HTTPPasswordMgrWithDefaultRealm ); Py_INCREF( const_str_plain_HTTPPasswordMgrWithDefaultRealm );
    PyTuple_SET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_8cc5006936e02b61706e4ff874fb2042 = UNSTREAM_STRING( &constant_bin[ 1872721 ], 15, 0 );
    const_str_digest_dc51ca580cc759241b93115ce34bf24c = UNSTREAM_STRING( &constant_bin[ 1872736 ], 18, 0 );
    const_str_digest_dc2910a6e816441d866e674df51d57ac = UNSTREAM_STRING( &constant_bin[ 1872754 ], 16, 0 );
    const_tuple_5fefbced8180c1de12054109841aa2ac_tuple = PyTuple_New( 3 );
    const_str_plain_CGIHTTPServer = UNSTREAM_STRING( &constant_bin[ 1872770 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 0, const_str_plain_CGIHTTPServer ); Py_INCREF( const_str_plain_CGIHTTPServer );
    PyTuple_SET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 1, const_str_plain_CGIHTTPServer ); Py_INCREF( const_str_plain_CGIHTTPServer );
    const_str_digest_a72c0d952f927fbb71c170425931b6ab = UNSTREAM_STRING( &constant_bin[ 240883 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 2, const_str_digest_a72c0d952f927fbb71c170425931b6ab ); Py_INCREF( const_str_digest_a72c0d952f927fbb71c170425931b6ab );
    const_str_digest_813378a9c91048d7990696da82a61814 = UNSTREAM_STRING( &constant_bin[ 1872783 ], 114, 0 );
    const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b = UNSTREAM_STRING( &constant_bin[ 1872897 ], 11, 0 );
    const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 0, const_str_plain_getproxies ); Py_INCREF( const_str_plain_getproxies );
    PyTuple_SET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 2, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 3, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    const_str_digest_a13cea3eac144232780ec70fab3f1816 = UNSTREAM_STRING( &constant_bin[ 1872908 ], 51, 0 );
    const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 0, const_str_plain_ContentTooShortError ); Py_INCREF( const_str_plain_ContentTooShortError );
    PyTuple_SET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_str_plain_updated = UNSTREAM_STRING( &constant_bin[ 3471 ], 7, 1 );
    const_tuple_187fbe928d64ead4410a5c32362e3350_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 0, const_str_plain_uses_query ); Py_INCREF( const_str_plain_uses_query );
    PyTuple_SET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_4c46721e9886c5db124415a36253d572 = UNSTREAM_STRING( &constant_bin[ 1872959 ], 89, 0 );
    const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 0, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 3, const_str_plain_raw_input ); Py_INCREF( const_str_plain_raw_input );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 4, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    const_str_plain_tkinter_filedialog = UNSTREAM_STRING( &constant_bin[ 1873048 ], 18, 1 );
    const_str_plain_tkinter_scrolledtext = UNSTREAM_STRING( &constant_bin[ 1873066 ], 20, 1 );
    const_str_plain__urllib_response_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1873086 ], 33, 1 );
    const_tuple_1a887db86b993bc5af6452d60025b66a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 0, const_str_plain_HTTPSHandler ); Py_INCREF( const_str_plain_HTTPSHandler );
    PyTuple_SET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_98007d19004f11322e99f7f66acdf51d = UNSTREAM_STRING( &constant_bin[ 1873119 ], 20, 0 );
    const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple = PyTuple_New( 1 );
    const_str_digest_377bbfde508aa04103b00d9192b3b50d = UNSTREAM_STRING( &constant_bin[ 1873139 ], 21, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple, 0, const_str_digest_377bbfde508aa04103b00d9192b3b50d ); Py_INCREF( const_str_digest_377bbfde508aa04103b00d9192b3b50d );
    const_str_plain_BaseHTTPServer = UNSTREAM_STRING( &constant_bin[ 1873160 ], 14, 1 );
    const_tuple_str_plain_klass_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_klass_tuple, 0, const_str_plain_klass ); Py_INCREF( const_str_plain_klass );
    const_str_plain_assertRegexpMatches = UNSTREAM_STRING( &constant_bin[ 1873174 ], 19, 1 );
    const_str_plain_getitem = UNSTREAM_STRING( &constant_bin[ 139630 ], 7, 1 );
    const_str_plain_html_entities = UNSTREAM_STRING( &constant_bin[ 305816 ], 13, 1 );
    const_str_digest_ef5ae5746ab9ada338d738fcd9ef185d = UNSTREAM_STRING( &constant_bin[ 1873193 ], 66, 0 );
    const_tuple_str_plain_func_str_plain_doc_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_doc_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_doc_tuple, 1, const_str_plain_doc ); Py_INCREF( const_str_plain_doc );
    const_str_plain__module = UNSTREAM_STRING( &constant_bin[ 110001 ], 7, 1 );
    const_tuple_str_plain_self_str_plain_six_module_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_six_module_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_six_module_name = UNSTREAM_STRING( &constant_bin[ 1873259 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_six_module_name_tuple, 1, const_str_plain_six_module_name ); Py_INCREF( const_str_plain_six_module_name );
    const_str_digest_6fdf710e7d63e48e68391e1f587ae0a5 = UNSTREAM_STRING( &constant_bin[ 1873274 ], 36, 0 );
    const_str_plain_tkinter_simpledialog = UNSTREAM_STRING( &constant_bin[ 1873310 ], 20, 1 );
    const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 0, const_str_plain_tkinter_filedialog ); Py_INCREF( const_str_plain_tkinter_filedialog );
    const_str_plain_FileDialog = UNSTREAM_STRING( &constant_bin[ 1873330 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 1, const_str_plain_FileDialog ); Py_INCREF( const_str_plain_FileDialog );
    const_str_digest_0f0322cacec3a164468e788b6cf4cba4 = UNSTREAM_STRING( &constant_bin[ 1873340 ], 18, 0 );
    PyTuple_SET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 2, const_str_digest_0f0322cacec3a164468e788b6cf4cba4 ); Py_INCREF( const_str_digest_0f0322cacec3a164468e788b6cf4cba4 );
    const_str_digest_64f81132823110b66a668f94ef3217ac = UNSTREAM_STRING( &constant_bin[ 1873358 ], 20, 0 );
    const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 0, const_str_plain_BaseHTTPServer ); Py_INCREF( const_str_plain_BaseHTTPServer );
    PyTuple_SET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 1, const_str_plain_BaseHTTPServer ); Py_INCREF( const_str_plain_BaseHTTPServer );
    PyTuple_SET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 2, const_str_digest_a72c0d952f927fbb71c170425931b6ab ); Py_INCREF( const_str_digest_a72c0d952f927fbb71c170425931b6ab );
    const_str_plain_importer = UNSTREAM_STRING( &constant_bin[ 1885 ], 8, 1 );
    const_tuple_str_plain_flush_false_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_flush_false_tuple, 0, const_str_plain_flush ); Py_INCREF( const_str_plain_flush );
    PyTuple_SET_ITEM( const_tuple_str_plain_flush_false_tuple, 1, Py_False ); Py_INCREF( Py_False );
    const_str_plain_old_attr = UNSTREAM_STRING( &constant_bin[ 1873378 ], 8, 1 );
    const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 0, const_str_plain_AbstractDigestAuthHandler ); Py_INCREF( const_str_plain_AbstractDigestAuthHandler );
    PyTuple_SET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 1, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 2, const_str_plain__module ); Py_INCREF( const_str_plain__module );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 0, const_str_plain_unquote_plus ); Py_INCREF( const_str_plain_unquote_plus );
    PyTuple_SET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 0, const_str_plain_http_client ); Py_INCREF( const_str_plain_http_client );
    PyTuple_SET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 1, const_str_plain_httplib ); Py_INCREF( const_str_plain_httplib );
    const_str_digest_096ca139beaf8ac5201071e235ad66b6 = UNSTREAM_STRING( &constant_bin[ 160192 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 2, const_str_digest_096ca139beaf8ac5201071e235ad66b6 ); Py_INCREF( const_str_digest_096ca139beaf8ac5201071e235ad66b6 );
    const_tuple_586a1339d35425b5e4ad734e75b48193_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 0, const_str_plain_ProxyBasicAuthHandler ); Py_INCREF( const_str_plain_ProxyBasicAuthHandler );
    PyTuple_SET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain_viewitems_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_viewitems_tuple, 0, const_str_plain_viewitems ); Py_INCREF( const_str_plain_viewitems );
    const_tuple_str_plain_six_tuple = PyTuple_New( 1 );
    const_str_plain_six = UNSTREAM_STRING( &constant_bin[ 2420 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_six_tuple, 0, const_str_plain_six ); Py_INCREF( const_str_plain_six );
    const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 3, const_str_plain_write ); Py_INCREF( const_str_plain_write );
    const_str_plain_want_unicode = UNSTREAM_STRING( &constant_bin[ 1873386 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 4, const_str_plain_want_unicode ); Py_INCREF( const_str_plain_want_unicode );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 5, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 6, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 7, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 8, const_str_plain_newline ); Py_INCREF( const_str_plain_newline );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 9, const_str_plain_space ); Py_INCREF( const_str_plain_space );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 10, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_str_plain__moved_attributes = UNSTREAM_STRING( &constant_bin[ 1872382 ], 17, 1 );
    const_str_plain_reload_module = UNSTREAM_STRING( &constant_bin[ 1873398 ], 13, 1 );
    const_tuple_424b5876d9142cfd116cee7c287158fe_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 0, const_str_plain_range ); Py_INCREF( const_str_plain_range );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 3, const_str_plain_xrange ); Py_INCREF( const_str_plain_xrange );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 4, const_str_plain_range ); Py_INCREF( const_str_plain_range );
    const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 0, const_str_plain_FileHandler ); Py_INCREF( const_str_plain_FileHandler );
    PyTuple_SET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_36b48fae7858438c9796c3d30c76579f = UNSTREAM_STRING( &constant_bin[ 1873411 ], 59, 0 );
    const_str_digest_8f714300b54df1f07c5ea6ab3e1ef1e0 = UNSTREAM_STRING( &constant_bin[ 1873470 ], 39, 0 );
    const_tuple_bb96d7dab96c950426bed873db7c315f_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 0, const_str_plain_urlcleanup ); Py_INCREF( const_str_plain_urlcleanup );
    PyTuple_SET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_0796df54888fe073ef078d402adc4fc3 = UNSTREAM_STRING( &constant_bin[ 1873509 ], 20, 0 );
    const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 2, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    const_str_plain__assertRaisesRegex = UNSTREAM_STRING( &constant_bin[ 1873529 ], 18, 1 );
    const_str_plain_wrapped = UNSTREAM_STRING( &constant_bin[ 8522 ], 7, 1 );
    const_str_digest_41c64468a0c9e92d8eea5f7e817937e8 = UNSTREAM_STRING( &constant_bin[ 169375 ], 14, 0 );
    const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 0, const_str_plain_splituser ); Py_INCREF( const_str_plain_splituser );
    PyTuple_SET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_str_plain_values_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_values_tuple, 0, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    const_str_digest_7cd96a434c5e7c2d0afa70c5bbed7be7 = UNSTREAM_STRING( &constant_bin[ 1873547 ], 158, 0 );
    const_str_plain_Queue = UNSTREAM_STRING( &constant_bin[ 242832 ], 5, 1 );
    const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple = PyTuple_New( 1 );
    const_str_digest_39084269160328bfe64f57e4e4ad6847 = UNSTREAM_STRING( &constant_bin[ 1873705 ], 24, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple, 0, const_str_digest_39084269160328bfe64f57e4e4ad6847 ); Py_INCREF( const_str_digest_39084269160328bfe64f57e4e4ad6847 );
    const_tuple_str_plain_self_str_plain_fullname_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    const_tuple_320c4efc844604789134735e48a67fb0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 0, const_str_plain_CacheFTPHandler ); Py_INCREF( const_str_plain_CacheFTPHandler );
    PyTuple_SET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_indexbytes = UNSTREAM_STRING( &constant_bin[ 1873729 ], 10, 1 );
    const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple = PyTuple_New( 1 );
    const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8 = UNSTREAM_STRING( &constant_bin[ 1873739 ], 57, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple, 0, const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8 ); Py_INCREF( const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8 );
    const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple, 0, const_str_digest_813378a9c91048d7990696da82a61814 ); Py_INCREF( const_str_digest_813378a9c91048d7990696da82a61814 );
    const_str_plain_reload = UNSTREAM_STRING( &constant_bin[ 186949 ], 6, 1 );
    const_tuple_str_plain_d_str_plain_kw_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_str_plain_kw_tuple, 0, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_str_plain_kw_tuple, 1, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    const_str_plain__MovedItems = UNSTREAM_STRING( &constant_bin[ 1873796 ], 11, 1 );
    const_str_plain___get_module = UNSTREAM_STRING( &constant_bin[ 1873807 ], 12, 1 );
    const_str_plain__LazyModule = UNSTREAM_STRING( &constant_bin[ 1873819 ], 11, 1 );
    const_str_plain_tkSimpleDialog = UNSTREAM_STRING( &constant_bin[ 1873830 ], 14, 1 );
    const_str_plain_im_self = UNSTREAM_STRING( &constant_bin[ 538435 ], 7, 1 );
    const_str_plain_tkFont = UNSTREAM_STRING( &constant_bin[ 1873844 ], 6, 1 );
    const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 0, const_str_plain_urlencode ); Py_INCREF( const_str_plain_urlencode );
    PyTuple_SET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 0, const_str_plain_pathname2url ); Py_INCREF( const_str_plain_pathname2url );
    PyTuple_SET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_byte2int = UNSTREAM_STRING( &constant_bin[ 1873850 ], 8, 1 );
    const_str_plain_Tix = UNSTREAM_STRING( &constant_bin[ 1873858 ], 3, 1 );
    const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9 = UNSTREAM_STRING( &constant_bin[ 1873861 ], 14, 0 );
    const_str_digest_36bd400ddf45050462a62a66cdace7eb = UNSTREAM_STRING( &constant_bin[ 1873875 ], 61, 0 );
    const_str_plain__meth_self = UNSTREAM_STRING( &constant_bin[ 1873936 ], 10, 1 );
    const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 1, const_str_plain_attrs ); Py_INCREF( const_str_plain_attrs );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 2, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    const_tuple_31e595002f80a39949775964212a97b9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 0, const_str_plain_HTTPHandler ); Py_INCREF( const_str_plain_HTTPHandler );
    PyTuple_SET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_a13035c59d0f0e8c04a4feacc0004cd7 = UNSTREAM_STRING( &constant_bin[ 1873946 ], 28, 0 );
    const_str_plain_MAXSIZE = UNSTREAM_STRING( &constant_bin[ 1873974 ], 7, 1 );
    const_str_plain_assertRegex = UNSTREAM_STRING( &constant_bin[ 1872607 ], 11, 1 );
    const_str_plain_shlex_quote = UNSTREAM_STRING( &constant_bin[ 1873981 ], 11, 1 );
    const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple, 0, const_str_plain_tkinter ); Py_INCREF( const_str_plain_tkinter );
    const_str_plain_Tkinter = UNSTREAM_STRING( &constant_bin[ 1873992 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple, 1, const_str_plain_Tkinter ); Py_INCREF( const_str_plain_Tkinter );
    const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 0, const_str_plain_zip ); Py_INCREF( const_str_plain_zip );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 3, const_str_plain_izip ); Py_INCREF( const_str_plain_izip );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 4, const_str_plain_zip ); Py_INCREF( const_str_plain_zip );
    const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 0, const_str_plain_HTTPError ); Py_INCREF( const_str_plain_HTTPError );
    PyTuple_SET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_str_digest_1e91aab42d00f04e391d84545f09e2f5 = UNSTREAM_STRING( &constant_bin[ 1873999 ], 55, 0 );
    const_str_digest_97d8b3849ccb4841962c7ac18f0af059 = UNSTREAM_STRING( &constant_bin[ 1874054 ], 54, 0 );
    const_str_digest_122cdcc1600da4a884855d78ecd7756a = UNSTREAM_STRING( &constant_bin[ 1874108 ], 25, 0 );
    const_str_plain_submodule_search_locations = UNSTREAM_STRING( &constant_bin[ 1874133 ], 26, 1 );
    const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 2, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 0, const_str_plain_urljoin ); Py_INCREF( const_str_plain_urljoin );
    PyTuple_SET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_389a28f291802cc0a0085952a3a22b60_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 0, const_str_plain_OpenerDirector ); Py_INCREF( const_str_plain_OpenerDirector );
    PyTuple_SET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 0, const_str_plain_HTTPBasicAuthHandler ); Py_INCREF( const_str_plain_HTTPBasicAuthHandler );
    PyTuple_SET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain__get_module = UNSTREAM_STRING( &constant_bin[ 323532 ], 11, 1 );
    const_str_plain_tkFileDialog = UNSTREAM_STRING( &constant_bin[ 1874159 ], 12, 1 );
    const_str_plain_get_function_globals = UNSTREAM_STRING( &constant_bin[ 1874171 ], 20, 1 );
    const_str_digest_5b3beed978ba6433285f8986661c0d63 = UNSTREAM_STRING( &constant_bin[ 1874191 ], 22, 0 );
    const_str_plain_dbm_gnu = UNSTREAM_STRING( &constant_bin[ 1874213 ], 7, 1 );
    const_str_plain__assertCountEqual = UNSTREAM_STRING( &constant_bin[ 1874220 ], 17, 1 );
    const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 0, const_str_plain_wrapped ); Py_INCREF( const_str_plain_wrapped );
    const_str_plain_assigned = UNSTREAM_STRING( &constant_bin[ 292794 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 1, const_str_plain_assigned ); Py_INCREF( const_str_plain_assigned );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 2, const_str_plain_updated ); Py_INCREF( const_str_plain_updated );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 3, const_str_plain_wrapper ); Py_INCREF( const_str_plain_wrapper );
    const_str_plain_tkinter_tksimpledialog = UNSTREAM_STRING( &constant_bin[ 1874237 ], 22, 1 );
    const_str_plain__func_code = UNSTREAM_STRING( &constant_bin[ 1874259 ], 10, 1 );
    const_str_plain_slots_var = UNSTREAM_STRING( &constant_bin[ 1874269 ], 9, 1 );
    const_tuple_str_plain_sep_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_sep_none_tuple, 0, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_str_plain_sep_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_tuple_b95736e8f51c92667f5e42089a453e06_tuple = PyTuple_New( 3 );
    const_str_plain_urllib_error = UNSTREAM_STRING( &constant_bin[ 1874278 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 0, const_str_plain_urllib_error ); Py_INCREF( const_str_plain_urllib_error );
    const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4 = UNSTREAM_STRING( &constant_bin[ 1874290 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 1, const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4 ); Py_INCREF( const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4 );
    PyTuple_SET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 0, const_str_plain_url2pathname ); Py_INCREF( const_str_plain_url2pathname );
    PyTuple_SET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_07471a17cf805229414e895d873904c1 = UNSTREAM_STRING( &constant_bin[ 1874312 ], 45, 0 );
    const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 0, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_tkinter_commondialog = UNSTREAM_STRING( &constant_bin[ 1874357 ], 20, 1 );
    const_int_pos_2147483647 = PyInt_FromLong( 2147483647l );
    const_int_pos_2147483648 = PyInt_FromLong( 2147483648l );
    const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple = PyTuple_New( 1 );
    const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 = UNSTREAM_STRING( &constant_bin[ 1874377 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple, 0, const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 ); Py_INCREF( const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 );
    const_str_digest_7cb7e1a5659547478f12d8fe755efd75 = UNSTREAM_STRING( &constant_bin[ 140794 ], 2, 0 );
    const_str_plain__func_closure = UNSTREAM_STRING( &constant_bin[ 1874399 ], 13, 1 );
    const_str_plain_assertRaisesRegex = UNSTREAM_STRING( &constant_bin[ 1873530 ], 17, 1 );
    const_tuple_23e241754072378d4aca55ebd413fe81_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 1, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    const_str_plain_fullnames = UNSTREAM_STRING( &constant_bin[ 1874412 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 2, const_str_plain_fullnames ); Py_INCREF( const_str_plain_fullnames );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 3, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    const_tuple_78e9781575bd6d8322d39e052488fa24_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 0, const_str_plain_SplitResult ); Py_INCREF( const_str_plain_SplitResult );
    PyTuple_SET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_c18de21b4af59af9eda7ad848834774a = UNSTREAM_STRING( &constant_bin[ 1874421 ], 51, 0 );
    const_str_plain___loader__ = UNSTREAM_STRING( &constant_bin[ 1874472 ], 10, 1 );
    const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 0, const_str_plain_build_opener ); Py_INCREF( const_str_plain_build_opener );
    PyTuple_SET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_tkinter_dnd = UNSTREAM_STRING( &constant_bin[ 1874482 ], 11, 1 );
    const_str_digest_12251381889b9eebcd7998baa486eb86 = UNSTREAM_STRING( &constant_bin[ 1874493 ], 55, 0 );
    const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_font = UNSTREAM_STRING( &constant_bin[ 1874548 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 0, const_str_plain_tkinter_font ); Py_INCREF( const_str_plain_tkinter_font );
    PyTuple_SET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 1, const_str_plain_tkFont ); Py_INCREF( const_str_plain_tkFont );
    const_str_digest_67aba58fab2484c4d294c8cbe1258e39 = UNSTREAM_STRING( &constant_bin[ 1874560 ], 12, 0 );
    PyTuple_SET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 2, const_str_digest_67aba58fab2484c4d294c8cbe1258e39 ); Py_INCREF( const_str_digest_67aba58fab2484c4d294c8cbe1258e39 );
    const_str_digest_cc1200855d2ddc077676ac963b3ffc09 = UNSTREAM_STRING( &constant_bin[ 1874294 ], 18, 0 );
    const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 0, const_str_plain_uses_netloc ); Py_INCREF( const_str_plain_uses_netloc );
    PyTuple_SET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_70a0120f28d7311f633323a6bfb46104 = UNSTREAM_STRING( &constant_bin[ 1874572 ], 30, 0 );
    const_str_plain_iterbytes = UNSTREAM_STRING( &constant_bin[ 1874602 ], 9, 1 );
    const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple, 0, const_str_digest_cc1200855d2ddc077676ac963b3ffc09 ); Py_INCREF( const_str_digest_cc1200855d2ddc077676ac963b3ffc09 );
    const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 0, const_str_plain_StringIO ); Py_INCREF( const_str_plain_StringIO );
    PyTuple_SET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 1, const_str_plain_StringIO ); Py_INCREF( const_str_plain_StringIO );
    PyTuple_SET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 2, const_str_plain_io ); Py_INCREF( const_str_plain_io );
    const_str_plain_HTMLParser = UNSTREAM_STRING( &constant_bin[ 1874611 ], 10, 1 );
    const_str_digest_6a93038d6d3774db54a1e6e70149bd98 = UNSTREAM_STRING( &constant_bin[ 1874621 ], 19, 0 );
    const_tuple_e79d7f1b4734be0e37665951db297244_tuple = PyTuple_New( 3 );
    const_str_plain_email_mime_nonmultipart = UNSTREAM_STRING( &constant_bin[ 1874640 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 0, const_str_plain_email_mime_nonmultipart ); Py_INCREF( const_str_plain_email_mime_nonmultipart );
    PyTuple_SET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 1, const_str_digest_5b3beed978ba6433285f8986661c0d63 ); Py_INCREF( const_str_digest_5b3beed978ba6433285f8986661c0d63 );
    const_str_digest_1164690e1be4282a96b5a813ded7269b = UNSTREAM_STRING( &constant_bin[ 1874663 ], 23, 0 );
    PyTuple_SET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 2, const_str_digest_1164690e1be4282a96b5a813ded7269b ); Py_INCREF( const_str_digest_1164690e1be4282a96b5a813ded7269b );
    const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple = PyTuple_New( 5 );
    const_str_plain_getcwdb = UNSTREAM_STRING( &constant_bin[ 1874686 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 0, const_str_plain_getcwdb ); Py_INCREF( const_str_plain_getcwdb );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 1, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 2, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 3, const_str_plain_getcwd ); Py_INCREF( const_str_plain_getcwd );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 4, const_str_plain_getcwdb ); Py_INCREF( const_str_plain_getcwdb );
    const_tuple_991a248aa1804f30822646929a31e57a_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 0, const_str_plain_shlex_quote ); Py_INCREF( const_str_plain_shlex_quote );
    const_str_plain_pipes = UNSTREAM_STRING( &constant_bin[ 25409 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 1, const_str_plain_pipes ); Py_INCREF( const_str_plain_pipes );
    const_str_plain_shlex = UNSTREAM_STRING( &constant_bin[ 1873981 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 2, const_str_plain_shlex ); Py_INCREF( const_str_plain_shlex );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 3, const_str_plain_quote ); Py_INCREF( const_str_plain_quote );
    const_str_digest_c94e49aa6b31218158c33258bda42655 = UNSTREAM_STRING( &constant_bin[ 80065 ], 11, 0 );
    const_str_plain_new_mod = UNSTREAM_STRING( &constant_bin[ 1874693 ], 7, 1 );
    const_tuple_3587390c695a62b1bc9b3790076ef063_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 0, const_str_plain_email_mime_multipart ); Py_INCREF( const_str_plain_email_mime_multipart );
    PyTuple_SET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 1, const_str_digest_6a93038d6d3774db54a1e6e70149bd98 ); Py_INCREF( const_str_digest_6a93038d6d3774db54a1e6e70149bd98 );
    PyTuple_SET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 2, const_str_digest_64f81132823110b66a668f94ef3217ac ); Py_INCREF( const_str_digest_64f81132823110b66a668f94ef3217ac );
    const_str_plain_WRAPPER_ASSIGNMENTS = UNSTREAM_STRING( &constant_bin[ 1874700 ], 19, 1 );
    const_str_plain_getcwdu = UNSTREAM_STRING( &constant_bin[ 1874719 ], 7, 1 );
    const_str_plain_cookielib = UNSTREAM_STRING( &constant_bin[ 1874726 ], 9, 1 );
    const_str_plain_SimpleHTTPServer = UNSTREAM_STRING( &constant_bin[ 1874735 ], 16, 1 );
    const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple, 0, const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1 ); Py_INCREF( const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1 );
    const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 0, const_str_plain_ProxyHandler ); Py_INCREF( const_str_plain_ProxyHandler );
    PyTuple_SET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_a5f041d60ba724151c334293929df649 = UNSTREAM_STRING( &constant_bin[ 1874751 ], 28, 0 );
    const_str_digest_af845b30b77af5531a80edf50d295161 = UNSTREAM_STRING( &constant_bin[ 1874779 ], 20, 0 );
    const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 0, const_str_plain_splitquery ); Py_INCREF( const_str_plain_splitquery );
    PyTuple_SET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 0, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 3, const_str_plain_imap ); Py_INCREF( const_str_plain_imap );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 4, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    const_str_plain_get_code = UNSTREAM_STRING( &constant_bin[ 1874799 ], 8, 1 );
    const_tuple_str_plain_builtins_str_plain___builtin___tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_builtins_str_plain___builtin___tuple, 0, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_str_plain_builtins_str_plain___builtin___tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 0, const_str_plain_FancyURLopener ); Py_INCREF( const_str_plain_FancyURLopener );
    PyTuple_SET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_tkMessageBox = UNSTREAM_STRING( &constant_bin[ 1874807 ], 12, 1 );
    const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 0, const_str_plain_urldefrag ); Py_INCREF( const_str_plain_urldefrag );
    PyTuple_SET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_bdf07efe689edd815848f7ba41ea2eee = UNSTREAM_STRING( &constant_bin[ 1872106 ], 12, 0 );
    const_str_plain_http_cookies = UNSTREAM_STRING( &constant_bin[ 1874819 ], 12, 1 );
    const_str_plain_Module_six_moves_urllib_error = UNSTREAM_STRING( &constant_bin[ 1874831 ], 29, 1 );
    const_tuple_547fe239a3216bb76fb01949941399cd_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 0, const_str_plain_ProxyDigestAuthHandler ); Py_INCREF( const_str_plain_ProxyDigestAuthHandler );
    PyTuple_SET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple = PyTuple_New( 3 );
    const_str_plain_urllib_robotparser = UNSTREAM_STRING( &constant_bin[ 1872112 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 0, const_str_plain_urllib_robotparser ); Py_INCREF( const_str_plain_urllib_robotparser );
    PyTuple_SET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 1, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    PyTuple_SET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 2, const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a ); Py_INCREF( const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a );
    const_str_plain_WRAPPER_UPDATES = UNSTREAM_STRING( &constant_bin[ 1874860 ], 15, 1 );
    const_tuple_str_plain_reprlib_str_plain_repr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_reprlib_str_plain_repr_tuple, 0, const_str_plain_reprlib ); Py_INCREF( const_str_plain_reprlib );
    PyTuple_SET_ITEM( const_tuple_str_plain_reprlib_str_plain_repr_tuple, 1, const_str_plain_repr ); Py_INCREF( const_str_plain_repr );
    const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 0, const_str_plain_HTTPRedirectHandler ); Py_INCREF( const_str_plain_HTTPRedirectHandler );
    PyTuple_SET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain_end_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_end_none_tuple, 0, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    PyTuple_SET_ITEM( const_tuple_str_plain_end_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_digest_1a36329ae97c46a5978110ca53f2f5e7 = UNSTREAM_STRING( &constant_bin[ 1874875 ], 18, 0 );
    const_str_plain__func_globals = UNSTREAM_STRING( &constant_bin[ 1874893 ], 13, 1 );
    const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 0, const_str_plain_parse_qsl ); Py_INCREF( const_str_plain_parse_qsl );
    PyTuple_SET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_Module_six_moves_urllib_parse = UNSTREAM_STRING( &constant_bin[ 1874906 ], 29, 1 );
    const_str_plain_email_mime_base = UNSTREAM_STRING( &constant_bin[ 1874935 ], 15, 1 );
    const_list_str_plain___doc___str_plain___name___list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain___doc___str_plain___name___list, 0, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyList_SET_ITEM( const_list_str_plain___doc___str_plain___name___list, 1, const_str_plain___name__ ); Py_INCREF( const_str_plain___name__ );
    const_str_plain_tkinter_messagebox = UNSTREAM_STRING( &constant_bin[ 1874950 ], 18, 1 );
    const_str_plain_ScrolledText = UNSTREAM_STRING( &constant_bin[ 1874968 ], 12, 1 );
    const_tuple_str_plain_value_str_plain_from_value_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_from_value_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_from_value = UNSTREAM_STRING( &constant_bin[ 1872421 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_from_value_tuple, 1, const_str_plain_from_value ); Py_INCREF( const_str_plain_from_value );
    const_str_plain_email_mime_text = UNSTREAM_STRING( &constant_bin[ 1874980 ], 15, 1 );
    const_str_digest_4f965162d0a8bf5d5b4136bee888b84b = UNSTREAM_STRING( &constant_bin[ 1874995 ], 15, 0 );
    const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 0, const_str_plain_install_opener ); Py_INCREF( const_str_plain_install_opener );
    PyTuple_SET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain__meth_func = UNSTREAM_STRING( &constant_bin[ 1875010 ], 10, 1 );
    const_str_digest_0e07ea38c4cf2fbcefc89e7de4db934c = UNSTREAM_STRING( &constant_bin[ 1875020 ], 12, 0 );
    const_str_plain_get_function_defaults = UNSTREAM_STRING( &constant_bin[ 1875032 ], 21, 1 );
    const_tuple_efb9818f797f41ca8cd537504758b934_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 0, const_str_plain_HTTPPasswordMgr ); Py_INCREF( const_str_plain_HTTPPasswordMgr );
    PyTuple_SET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_is_package = UNSTREAM_STRING( &constant_bin[ 1873445 ], 10, 1 );
    const_str_digest_89029d2dedfd3a97fd4d41a1b57a375b = UNSTREAM_STRING( &constant_bin[ 1875053 ], 58, 0 );
    const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 0, const_str_plain_SimpleHTTPServer ); Py_INCREF( const_str_plain_SimpleHTTPServer );
    PyTuple_SET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 1, const_str_plain_SimpleHTTPServer ); Py_INCREF( const_str_plain_SimpleHTTPServer );
    PyTuple_SET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 2, const_str_digest_a72c0d952f927fbb71c170425931b6ab ); Py_INCREF( const_str_digest_a72c0d952f927fbb71c170425931b6ab );
    const_tuple_cf52b2b37e911829df5ff352b85be861_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 0, const_str_plain_parse_qs ); Py_INCREF( const_str_plain_parse_qs );
    PyTuple_SET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 0, const_str_plain_http_cookiejar ); Py_INCREF( const_str_plain_http_cookiejar );
    PyTuple_SET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 1, const_str_plain_cookielib ); Py_INCREF( const_str_plain_cookielib );
    PyTuple_SET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 2, const_str_digest_41c64468a0c9e92d8eea5f7e817937e8 ); Py_INCREF( const_str_digest_41c64468a0c9e92d8eea5f7e817937e8 );
    const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 0, const_str_plain_UnknownHandler ); Py_INCREF( const_str_plain_UnknownHandler );
    PyTuple_SET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain__SixMetaPathImporter__get_module = UNSTREAM_STRING( &constant_bin[ 1875111 ], 32, 1 );
    const_tuple_str_plain___dict___none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain___dict___none_tuple, 0, const_str_plain___dict__ ); Py_INCREF( const_str_plain___dict__ );
    PyTuple_SET_ITEM( const_tuple_str_plain___dict___none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 0, const_str_plain_uses_fragment ); Py_INCREF( const_str_plain_uses_fragment );
    PyTuple_SET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_tkCommonDialog = UNSTREAM_STRING( &constant_bin[ 1875143 ], 14, 1 );
    const_str_plain__add_doc = UNSTREAM_STRING( &constant_bin[ 1875157 ], 8, 1 );
    const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 0, const_str_plain_reduce ); Py_INCREF( const_str_plain_reduce );
    PyTuple_SET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 2, const_str_plain_functools ); Py_INCREF( const_str_plain_functools );
    const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 0, const_str_plain_addbase ); Py_INCREF( const_str_plain_addbase );
    PyTuple_SET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_str_plain_MovedModule = UNSTREAM_STRING( &constant_bin[ 1875165 ], 11, 1 );
    const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 0, const_str_plain_uses_relative ); Py_INCREF( const_str_plain_uses_relative );
    PyTuple_SET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_str_plain_viewkeys_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_viewkeys_tuple, 0, const_str_plain_viewkeys ); Py_INCREF( const_str_plain_viewkeys );
    const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple, 0, const_str_digest_44b5a94106b8a7650b1be1b19e45a62a ); Py_INCREF( const_str_digest_44b5a94106b8a7650b1be1b19e45a62a );
    const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple = PyTuple_New( 3 );
    const_str_plain_urllib_parse = UNSTREAM_STRING( &constant_bin[ 1874387 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 0, const_str_plain_urllib_parse ); Py_INCREF( const_str_plain_urllib_parse );
    PyTuple_SET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 1, const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 ); Py_INCREF( const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 );
    PyTuple_SET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_0e7fae28a2f47cf9bbe813dcd6d34e25 = UNSTREAM_STRING( &constant_bin[ 1875176 ], 52, 0 );
    const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 0, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 1, const_str_plain_wrapped ); Py_INCREF( const_str_plain_wrapped );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 2, const_str_plain_assigned ); Py_INCREF( const_str_plain_assigned );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 3, const_str_plain_updated ); Py_INCREF( const_str_plain_updated );
    const_str_digest_53317e6be879446851f4fe6f94b546e7 = UNSTREAM_STRING( &constant_bin[ 1875228 ], 55, 0 );
    const_str_plain__importer = UNSTREAM_STRING( &constant_bin[ 1249627 ], 9, 1 );
    const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple = PyTuple_New( 3 );
    const_str_plain_UserString = UNSTREAM_STRING( &constant_bin[ 80461 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 0, const_str_plain_UserString ); Py_INCREF( const_str_plain_UserString );
    PyTuple_SET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 1, const_str_plain_UserString ); Py_INCREF( const_str_plain_UserString );
    PyTuple_SET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 2, const_str_plain_collections ); Py_INCREF( const_str_plain_collections );
    const_str_plain_create_unbound_method = UNSTREAM_STRING( &constant_bin[ 1875283 ], 21, 1 );
    const_str_plain_get_method_self = UNSTREAM_STRING( &constant_bin[ 1875304 ], 15, 1 );
    const_str_digest_492eced51578a561806e20ae8ef1f867 = UNSTREAM_STRING( &constant_bin[ 445800 ], 2, 0 );
    const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple = PyTuple_New( 3 );
    const_str_plain_UserDict = UNSTREAM_STRING( &constant_bin[ 80441 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 0, const_str_plain_UserDict ); Py_INCREF( const_str_plain_UserDict );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 1, const_str_plain_UserDict ); Py_INCREF( const_str_plain_UserDict );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 2, const_str_plain_collections ); Py_INCREF( const_str_plain_collections );
    const_str_plain_get_function_closure = UNSTREAM_STRING( &constant_bin[ 1875319 ], 20, 1 );
    const_str_plain__globs_ = UNSTREAM_STRING( &constant_bin[ 1874587 ], 7, 1 );
    const_str_digest_dde65581d0349b25365c94106df5eaa4 = UNSTREAM_STRING( &constant_bin[ 1875339 ], 11, 0 );
    const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 0, const_str_plain_http_cookies ); Py_INCREF( const_str_plain_http_cookies );
    PyTuple_SET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 1, const_str_plain_Cookie ); Py_INCREF( const_str_plain_Cookie );
    const_str_digest_faf5973379f42e9b5528565b323f20e0 = UNSTREAM_STRING( &constant_bin[ 246785 ], 12, 0 );
    PyTuple_SET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 2, const_str_digest_faf5973379f42e9b5528565b323f20e0 ); Py_INCREF( const_str_digest_faf5973379f42e9b5528565b323f20e0 );
    const_str_plain__LazyDescr = UNSTREAM_STRING( &constant_bin[ 1875350 ], 10, 1 );
    const_str_plain_get_method_function = UNSTREAM_STRING( &constant_bin[ 1875360 ], 19, 1 );
    const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple = PyTuple_New( 5 );
    const_str_plain_filterfalse = UNSTREAM_STRING( &constant_bin[ 80532 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 0, const_str_plain_filterfalse ); Py_INCREF( const_str_plain_filterfalse );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 2, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 3, const_str_plain_ifilterfalse ); Py_INCREF( const_str_plain_ifilterfalse );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 4, const_str_plain_filterfalse ); Py_INCREF( const_str_plain_filterfalse );
    const_str_digest_13baab1dc3d5588a95d9291b1530e6c0 = UNSTREAM_STRING( &constant_bin[ 238278 ], 6, 0 );
    const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 0, const_str_plain_addinfo ); Py_INCREF( const_str_plain_addinfo );
    PyTuple_SET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_str_plain_tkinter_tkfiledialog = UNSTREAM_STRING( &constant_bin[ 1875379 ], 20, 1 );
    const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 0, const_str_plain_dbm_gnu ); Py_INCREF( const_str_plain_dbm_gnu );
    PyTuple_SET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 1, const_str_plain_gdbm ); Py_INCREF( const_str_plain_gdbm );
    PyTuple_SET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 2, const_str_digest_937e23fd1af2ef7336d82295a1301f51 ); Py_INCREF( const_str_digest_937e23fd1af2ef7336d82295a1301f51 );
    const_str_plain_orig_vars = UNSTREAM_STRING( &constant_bin[ 1875399 ], 9, 1 );
    const_str_plain_assertRaisesRegexp = UNSTREAM_STRING( &constant_bin[ 1875408 ], 18, 1 );
    const_str_plain_Tkdnd = UNSTREAM_STRING( &constant_bin[ 1875426 ], 5, 1 );
    const_str_plain_Module_six_moves_urllib_response = UNSTREAM_STRING( &constant_bin[ 1875431 ], 32, 1 );
    const_str_plain__locs_ = UNSTREAM_STRING( &constant_bin[ 1874596 ], 6, 1 );
    const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple, 0, const_str_digest_492eced51578a561806e20ae8ef1f867 ); Py_INCREF( const_str_digest_492eced51578a561806e20ae8ef1f867 );
    const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 0, const_str_plain_HTTPCookieProcessor ); Py_INCREF( const_str_plain_HTTPCookieProcessor );
    PyTuple_SET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_90e06424913ba9ad885f60767479fe37_tuple = PyTuple_New( 4 );
    const_str_plain__code_ = UNSTREAM_STRING( &constant_bin[ 294577 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 0, const_str_plain__code_ ); Py_INCREF( const_str_plain__code_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 1, const_str_plain__globs_ ); Py_INCREF( const_str_plain__globs_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 2, const_str_plain__locs_ ); Py_INCREF( const_str_plain__locs_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, const_str_plain_frame ); Py_INCREF( const_str_plain_frame );
    const_str_plain___self__ = UNSTREAM_STRING( &constant_bin[ 1875463 ], 8, 1 );
    const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 2, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 3, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_digest_d082ba711c791809312af019a50cc3ce = UNSTREAM_STRING( &constant_bin[ 1875471 ], 33, 0 );
    const_tuple_str_plain_metaclass_str_plain_wrapper_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 0, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 1, const_str_plain_wrapper ); Py_INCREF( const_str_plain_wrapper );
    const_str_plain_int2byte = UNSTREAM_STRING( &constant_bin[ 1875504 ], 8, 1 );
    const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd = UNSTREAM_STRING( &constant_bin[ 1874381 ], 18, 0 );
    const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_plain_old_mod = UNSTREAM_STRING( &constant_bin[ 1875512 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 2, const_str_plain_old_mod ); Py_INCREF( const_str_plain_old_mod );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 3, const_str_plain_new_mod ); Py_INCREF( const_str_plain_new_mod );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 4, const_str_plain_old_attr ); Py_INCREF( const_str_plain_old_attr );
    const_str_plain_new_attr = UNSTREAM_STRING( &constant_bin[ 1875519 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 5, const_str_plain_new_attr ); Py_INCREF( const_str_plain_new_attr );
    const_str_digest_836236e827883e9923f3b043ffe4640d = UNSTREAM_STRING( &constant_bin[ 1872349 ], 18, 0 );
    const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 0, const_str_plain_xrange ); Py_INCREF( const_str_plain_xrange );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 3, const_str_plain_xrange ); Py_INCREF( const_str_plain_xrange );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 4, const_str_plain_range ); Py_INCREF( const_str_plain_range );
    const_str_plain_iterlists = UNSTREAM_STRING( &constant_bin[ 1875527 ], 9, 1 );
    const_str_plain_tkinter_ttk = UNSTREAM_STRING( &constant_bin[ 1875536 ], 11, 1 );
    const_str_plain_ttk = UNSTREAM_STRING( &constant_bin[ 1874559 ], 3, 1 );
    const_tuple_str_plain_bs_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_bs_tuple, 0, const_str_plain_bs ); Py_INCREF( const_str_plain_bs );
    const_str_plain_methodcaller = UNSTREAM_STRING( &constant_bin[ 1875547 ], 12, 1 );
    const_tuple_45037418d37481db3e88817f5f3e75d5_tuple = PyTuple_New( 3 );
    const_str_plain_html_parser = UNSTREAM_STRING( &constant_bin[ 1875559 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 0, const_str_plain_html_parser ); Py_INCREF( const_str_plain_html_parser );
    PyTuple_SET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 1, const_str_plain_HTMLParser ); Py_INCREF( const_str_plain_HTMLParser );
    PyTuple_SET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 2, const_str_digest_c94e49aa6b31218158c33258bda42655 ); Py_INCREF( const_str_digest_c94e49aa6b31218158c33258bda42655 );
    const_str_digest_b136a150499b95c9a0929c5fba6642cb = UNSTREAM_STRING( &constant_bin[ 1875570 ], 73, 0 );
    const_str_plain_get_unbound_function = UNSTREAM_STRING( &constant_bin[ 1875643 ], 20, 1 );
    const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 0, const_str_plain_ParseResult ); Py_INCREF( const_str_plain_ParseResult );
    PyTuple_SET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple, 0, const_str_digest_7cb7e1a5659547478f12d8fe755efd75 ); Py_INCREF( const_str_digest_7cb7e1a5659547478f12d8fe755efd75 );
    const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8 = UNSTREAM_STRING( &constant_bin[ 1875663 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple, 1, const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8 ); Py_INCREF( const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8 );
    const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 0, const_str_plain_urlretrieve ); Py_INCREF( const_str_plain_urlretrieve );
    PyTuple_SET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_MovedAttribute = UNSTREAM_STRING( &constant_bin[ 1875667 ], 14, 1 );
    const_str_plain_zip_longest = UNSTREAM_STRING( &constant_bin[ 80545 ], 11, 1 );
    const_str_plain_unbound = UNSTREAM_STRING( &constant_bin[ 1872943 ], 7, 1 );
    const_tuple_b7e39273727f74459e3203a2be1ea787_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 0, const_str_plain_URLopener ); Py_INCREF( const_str_plain_URLopener );
    PyTuple_SET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_7e4f7e7d87a44d0e81f11f08170c9bf6 = UNSTREAM_STRING( &constant_bin[ 1875681 ], 28, 0 );
    const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 0, const_str_plain_Request ); Py_INCREF( const_str_plain_Request );
    PyTuple_SET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_tkinter_tix = UNSTREAM_STRING( &constant_bin[ 1875709 ], 11, 1 );
    const_str_plain_add_metaclass = UNSTREAM_STRING( &constant_bin[ 1875720 ], 13, 1 );
    const_str_plain_SimpleDialog = UNSTREAM_STRING( &constant_bin[ 1873832 ], 12, 1 );
    const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 0, const_str_plain_BaseHandler ); Py_INCREF( const_str_plain_BaseHandler );
    PyTuple_SET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_af06de2d225df4407b0a0ba06a331ccf = UNSTREAM_STRING( &constant_bin[ 1875733 ], 54, 0 );
    const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 1, const_str_plain_orig_vars ); Py_INCREF( const_str_plain_orig_vars );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 2, const_str_plain_slots ); Py_INCREF( const_str_plain_slots );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 3, const_str_plain_slots_var ); Py_INCREF( const_str_plain_slots_var );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 4, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 0, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    const_str_digest_666540d560c14e9851ed9be690845abf = UNSTREAM_STRING( &constant_bin[ 1872200 ], 16, 0 );
    PyTuple_SET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 1, const_str_digest_666540d560c14e9851ed9be690845abf ); Py_INCREF( const_str_digest_666540d560c14e9851ed9be690845abf );
    PyTuple_SET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 2, const_str_digest_666540d560c14e9851ed9be690845abf ); Py_INCREF( const_str_digest_666540d560c14e9851ed9be690845abf );
    const_str_plain___package__ = UNSTREAM_STRING( &constant_bin[ 1875787 ], 11, 1 );
    const_str_digest_2a86adf5a4eff7c85cf98b964b9653c8 = UNSTREAM_STRING( &constant_bin[ 1872204 ], 21, 0 );
    const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple, 0, const_str_plain_configparser ); Py_INCREF( const_str_plain_configparser );
    PyTuple_SET_ITEM( const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple, 1, const_str_plain_ConfigParser ); Py_INCREF( const_str_plain_ConfigParser );
    const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 0, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 1, const_str_plain_errors ); Py_INCREF( const_str_plain_errors );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_3adb059b24d1b9435823e57bdb130564_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 0, const_str_plain_tkinter_simpledialog ); Py_INCREF( const_str_plain_tkinter_simpledialog );
    PyTuple_SET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 1, const_str_plain_SimpleDialog ); Py_INCREF( const_str_plain_SimpleDialog );
    PyTuple_SET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 2, const_str_digest_98007d19004f11322e99f7f66acdf51d ); Py_INCREF( const_str_digest_98007d19004f11322e99f7f66acdf51d );
    const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 0, const_str_plain_html_entities ); Py_INCREF( const_str_plain_html_entities );
    PyTuple_SET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 1, const_str_plain_htmlentitydefs ); Py_INCREF( const_str_plain_htmlentitydefs );
    PyTuple_SET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 2, const_str_digest_f5862b11e62dc1382b5d1226dd5ff379 ); Py_INCREF( const_str_digest_f5862b11e62dc1382b5d1226dd5ff379 );
    const_str_plain_izip_longest = UNSTREAM_STRING( &constant_bin[ 243508 ], 12, 1 );
    const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 0, const_str_plain_zip_longest ); Py_INCREF( const_str_plain_zip_longest );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 2, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 3, const_str_plain_izip_longest ); Py_INCREF( const_str_plain_izip_longest );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 4, const_str_plain_zip_longest ); Py_INCREF( const_str_plain_zip_longest );
    const_str_digest_62c17ddfba14b5f942749b77083b82bc = UNSTREAM_STRING( &constant_bin[ 1875798 ], 256, 0 );
    const_str_digest_0f169d7824efcd520f23c128909f68ee = UNSTREAM_STRING( &constant_bin[ 1876054 ], 20, 0 );
    const_str_plain_func_closure = UNSTREAM_STRING( &constant_bin[ 1874400 ], 12, 1 );
    const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 0, const_str_plain_proxy_bypass ); Py_INCREF( const_str_plain_proxy_bypass );
    PyTuple_SET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_1a737763e143149741eebf35b19ac3f9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 0, const_str_plain_tkinter_tksimpledialog ); Py_INCREF( const_str_plain_tkinter_tksimpledialog );
    PyTuple_SET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 1, const_str_plain_tkSimpleDialog ); Py_INCREF( const_str_plain_tkSimpleDialog );
    PyTuple_SET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 2, const_str_digest_98007d19004f11322e99f7f66acdf51d ); Py_INCREF( const_str_digest_98007d19004f11322e99f7f66acdf51d );
    const_str_digest_91987f05961643baf523130276babe51 = UNSTREAM_STRING( &constant_bin[ 1876074 ], 21, 0 );
    const_str_plain__add_module = UNSTREAM_STRING( &constant_bin[ 1876095 ], 11, 1 );
    const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 0, const_str_plain_HTTPDefaultErrorHandler ); Py_INCREF( const_str_plain_HTTPDefaultErrorHandler );
    PyTuple_SET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 0, const_str_plain_getcwd ); Py_INCREF( const_str_plain_getcwd );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 1, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 2, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 3, const_str_plain_getcwdu ); Py_INCREF( const_str_plain_getcwdu );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 4, const_str_plain_getcwd ); Py_INCREF( const_str_plain_getcwd );
    const_str_plain_Module_six_moves_urllib = UNSTREAM_STRING( &constant_bin[ 1874831 ], 23, 1 );
    const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 0, const_str_plain_email_mime_base ); Py_INCREF( const_str_plain_email_mime_base );
    PyTuple_SET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 1, const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9 ); Py_INCREF( const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9 );
    PyTuple_SET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 2, const_str_digest_8cc5006936e02b61706e4ff874fb2042 ); Py_INCREF( const_str_digest_8cc5006936e02b61706e4ff874fb2042 );
    const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 0, const_str_plain_urlopen ); Py_INCREF( const_str_plain_urlopen );
    PyTuple_SET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 0, const_str_plain__thread ); Py_INCREF( const_str_plain__thread );
    PyTuple_SET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 1, const_str_plain_thread ); Py_INCREF( const_str_plain_thread );
    PyTuple_SET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 2, const_str_plain__thread ); Py_INCREF( const_str_plain__thread );
    const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 0, const_str_plain_cPickle ); Py_INCREF( const_str_plain_cPickle );
    PyTuple_SET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 1, const_str_plain_cPickle ); Py_INCREF( const_str_plain_cPickle );
    PyTuple_SET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 2, const_str_plain_pickle ); Py_INCREF( const_str_plain_pickle );
    const_str_plain_remove_move = UNSTREAM_STRING( &constant_bin[ 1876106 ], 11, 1 );
    const_str_digest_bc859a90e4d9c0b4fce03f66d37f0cf6 = UNSTREAM_STRING( &constant_bin[ 1876117 ], 27, 0 );
    const_tuple_a766c17241115f6922b493dfd444b3b5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 0, const_str_plain_urlsplit ); Py_INCREF( const_str_plain_urlsplit );
    PyTuple_SET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_d573636f316e67f758ce3eddfc433d39_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 0, const_str_plain_splittag ); Py_INCREF( const_str_plain_splittag );
    PyTuple_SET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 0, const_str_plain_intern ); Py_INCREF( const_str_plain_intern );
    PyTuple_SET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 2, const_str_plain_sys ); Py_INCREF( const_str_plain_sys );
    const_tuple_983a57efce70dcb41da6c64e832b9120_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 0, const_str_plain_tkinter_tkfiledialog ); Py_INCREF( const_str_plain_tkinter_tkfiledialog );
    PyTuple_SET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 1, const_str_plain_tkFileDialog ); Py_INCREF( const_str_plain_tkFileDialog );
    PyTuple_SET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 2, const_str_digest_0f0322cacec3a164468e788b6cf4cba4 ); Py_INCREF( const_str_digest_0f0322cacec3a164468e788b6cf4cba4 );
    const_str_plain__import_module = UNSTREAM_STRING( &constant_bin[ 1876144 ], 14, 1 );
    const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 0, const_str_plain_tkinter_scrolledtext ); Py_INCREF( const_str_plain_tkinter_scrolledtext );
    PyTuple_SET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 1, const_str_plain_ScrolledText ); Py_INCREF( const_str_plain_ScrolledText );
    PyTuple_SET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 2, const_str_digest_0f169d7824efcd520f23c128909f68ee ); Py_INCREF( const_str_digest_0f169d7824efcd520f23c128909f68ee );
    const_str_plain_add_move = UNSTREAM_STRING( &constant_bin[ 1876158 ], 8, 1 );
    const_str_plain_SocketServer = UNSTREAM_STRING( &constant_bin[ 1876166 ], 12, 1 );
    const_str_plain__urllib_error_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1876178 ], 30, 1 );
    const_int_pos_9223372036854775807 = PyInt_FromLong( 9223372036854775807l );
    const_str_plain__SixMetaPathImporter = UNSTREAM_STRING( &constant_bin[ 1875111 ], 20, 1 );
    const_str_plain__resolve = UNSTREAM_STRING( &constant_bin[ 1876208 ], 8, 1 );
    const_tuple_str_plain_func_str_plain_obj_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_obj_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_obj_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple, 0, const_str_plain_socketserver ); Py_INCREF( const_str_plain_socketserver );
    PyTuple_SET_ITEM( const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple, 1, const_str_plain_SocketServer ); Py_INCREF( const_str_plain_SocketServer );
    const_tuple_5e662527879cefa60fbd95a7550cf311_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 0, const_str_plain_tkinter_dnd ); Py_INCREF( const_str_plain_tkinter_dnd );
    PyTuple_SET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 1, const_str_plain_Tkdnd ); Py_INCREF( const_str_plain_Tkdnd );
    PyTuple_SET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 2, const_str_digest_2f383546f01c636d68b29330ba99dcef ); Py_INCREF( const_str_digest_2f383546f01c636d68b29330ba99dcef );
    const_str_digest_b0187e473195d5f4e7f8d9079ea0b7b3 = UNSTREAM_STRING( &constant_bin[ 425977 ], 6, 0 );
    const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 0, const_str_plain_URLError ); Py_INCREF( const_str_plain_URLError );
    PyTuple_SET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple, 0, const_str_digest_666540d560c14e9851ed9be690845abf ); Py_INCREF( const_str_digest_666540d560c14e9851ed9be690845abf );
    const_tuple_str_plain___weakref___none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain___weakref___none_tuple, 0, const_str_plain___weakref__ ); Py_INCREF( const_str_plain___weakref__ );
    PyTuple_SET_ITEM( const_tuple_str_plain___weakref___none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple, 0, const_str_digest_a5f041d60ba724151c334293929df649 ); Py_INCREF( const_str_digest_a5f041d60ba724151c334293929df649 );
    const_str_digest_087d011e227804c37fa5a994ee918bbe = UNSTREAM_STRING( &constant_bin[ 1876216 ], 206, 0 );
    const_str_plain_Module_six_moves_urllib_robotparser = UNSTREAM_STRING( &constant_bin[ 1876422 ], 35, 1 );
    const_tuple_str_plain_keys_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_keys_tuple, 0, const_str_plain_keys ); Py_INCREF( const_str_plain_keys );
    const_str_plain_known_modules = UNSTREAM_STRING( &constant_bin[ 1876457 ], 13, 1 );
    const_tuple_15e64786f005915ad409681ea2752bf5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 0, const_str_plain_tkinter_ttk ); Py_INCREF( const_str_plain_tkinter_ttk );
    PyTuple_SET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 1, const_str_plain_ttk ); Py_INCREF( const_str_plain_ttk );
    PyTuple_SET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 2, const_str_digest_dde65581d0349b25365c94106df5eaa4 ); Py_INCREF( const_str_digest_dde65581d0349b25365c94106df5eaa4 );
    const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 0, const_str_plain_email_mime_text ); Py_INCREF( const_str_plain_email_mime_text );
    PyTuple_SET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 1, const_str_digest_4082068f02f117842a4eba60151ac8c5 ); Py_INCREF( const_str_digest_4082068f02f117842a4eba60151ac8c5 );
    PyTuple_SET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 2, const_str_digest_4f965162d0a8bf5d5b4136bee888b84b ); Py_INCREF( const_str_digest_4f965162d0a8bf5d5b4136bee888b84b );
    const_str_digest_f13c881fad34db50f71983f3aeb67682 = UNSTREAM_STRING( &constant_bin[ 1876470 ], 57, 0 );
    const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 0, const_str_plain_quote ); Py_INCREF( const_str_plain_quote );
    PyTuple_SET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_Module_six_moves_urllib_request = UNSTREAM_STRING( &constant_bin[ 1876527 ], 31, 1 );
    const_str_plain_print_ = UNSTREAM_STRING( &constant_bin[ 79239 ], 6, 1 );
    const_str_plain__urllib_parse_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1876558 ], 30, 1 );
    const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 0, const_str_plain_urlunparse ); Py_INCREF( const_str_plain_urlunparse );
    PyTuple_SET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain__urllib_robotparser_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1876588 ], 36, 1 );
    const_tuple_str_plain_self_str_plain_module_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_module_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_module_tuple, 1, const_str_plain_module ); Py_INCREF( const_str_plain_module );
    const_list_1c82cc17d8f54cff757731adfdff677e_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 0, const_str_plain_parse ); Py_INCREF( const_str_plain_parse );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 1, const_str_plain_error ); Py_INCREF( const_str_plain_error );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 2, const_str_plain_request ); Py_INCREF( const_str_plain_request );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 3, const_str_plain_response ); Py_INCREF( const_str_plain_response );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 4, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    const_tuple_str_plain_move_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_move_tuple, 0, const_str_plain_move ); Py_INCREF( const_str_plain_move );
    const_tuple_str_plain_buf_str_plain_i_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_str_plain_i_tuple, 0, const_str_plain_buf ); Py_INCREF( const_str_plain_buf );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_str_plain_i_tuple, 1, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_str_plain_unbound_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unbound_tuple, 0, const_str_plain_unbound ); Py_INCREF( const_str_plain_unbound );
    const_str_plain_create_bound_method = UNSTREAM_STRING( &constant_bin[ 1876624 ], 19, 1 );
    const_tuple_int_pos_3_int_pos_4_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_4_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_4_tuple, 1, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    const_tuple_int_pos_3_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_2_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 0, const_str_plain_tkinter_commondialog ); Py_INCREF( const_str_plain_tkinter_commondialog );
    PyTuple_SET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 1, const_str_plain_tkCommonDialog ); Py_INCREF( const_str_plain_tkCommonDialog );
    PyTuple_SET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 2, const_str_digest_af845b30b77af5531a80edf50d295161 ); Py_INCREF( const_str_digest_af845b30b77af5531a80edf50d295161 );
    const_str_digest_ebf751844f7678efef5423dab5acd577 = UNSTREAM_STRING( &constant_bin[ 1876643 ], 12, 0 );
    const_str_plain_assertItemsEqual = UNSTREAM_STRING( &constant_bin[ 1876655 ], 16, 1 );
    const_tuple_df925d4985bc969100774d9243b00230_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 0, const_str_plain_quote_plus ); Py_INCREF( const_str_plain_quote_plus );
    PyTuple_SET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 0, const_str_plain_tkinter_messagebox ); Py_INCREF( const_str_plain_tkinter_messagebox );
    PyTuple_SET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 1, const_str_plain_tkMessageBox ); Py_INCREF( const_str_plain_tkMessageBox );
    PyTuple_SET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 2, const_str_digest_dc51ca580cc759241b93115ce34bf24c ); Py_INCREF( const_str_digest_dc51ca580cc759241b93115ce34bf24c );
    const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 0, const_str_plain_RobotFileParser ); Py_INCREF( const_str_plain_RobotFileParser );
    PyTuple_SET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 1, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    PyTuple_SET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 2, const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a ); Py_INCREF( const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a );
    const_str_digest_c1940ed36d6c651776a6e3a34c7131e3 = UNSTREAM_STRING( &constant_bin[ 1876671 ], 49, 0 );
    const_str_plain_PY34 = UNSTREAM_STRING( &constant_bin[ 1876720 ], 4, 1 );
    const_tuple_str_plain_items_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_items_tuple, 0, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    const_tuple_097719e7086f8299513e74ca5958de16_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 0, const_str_plain_tkinter_tix ); Py_INCREF( const_str_plain_tkinter_tix );
    PyTuple_SET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 1, const_str_plain_Tix ); Py_INCREF( const_str_plain_Tix );
    PyTuple_SET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 2, const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b ); Py_INCREF( const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b );
    const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 0, const_str_plain_addclosehook ); Py_INCREF( const_str_plain_addclosehook );
    PyTuple_SET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_tuple_1ca2df1302c361039c60608fe3780090_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 0, const_str_plain_uses_params ); Py_INCREF( const_str_plain_uses_params );
    PyTuple_SET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_advance_iterator = UNSTREAM_STRING( &constant_bin[ 1876724 ], 16, 1 );
    const_tuple_str_plain_winreg_str_plain__winreg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_winreg_str_plain__winreg_tuple, 0, const_str_plain_winreg ); Py_INCREF( const_str_plain_winreg );
    PyTuple_SET_ITEM( const_tuple_str_plain_winreg_str_plain__winreg_tuple, 1, const_str_plain__winreg ); Py_INCREF( const_str_plain__winreg );
    const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 0, const_str_plain_FTPHandler ); Py_INCREF( const_str_plain_FTPHandler );
    PyTuple_SET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple, 0, const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd ); Py_INCREF( const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd );
    const_tuple_str_plain_queue_str_plain_Queue_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_queue_str_plain_Queue_tuple, 0, const_str_plain_queue ); Py_INCREF( const_str_plain_queue );
    PyTuple_SET_ITEM( const_tuple_str_plain_queue_str_plain_Queue_tuple, 1, const_str_plain_Queue ); Py_INCREF( const_str_plain_Queue );
    const_str_plain_Struct = UNSTREAM_STRING( &constant_bin[ 360012 ], 6, 1 );
    const_str_plain_assertCountEqual = UNSTREAM_STRING( &constant_bin[ 1874221 ], 16, 1 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_six( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_2206ae0613543d3ad66ceda2d90fa000;
static PyCodeObject *codeobj_91c5f8b3c8d0b34296485ad235996085;
static PyCodeObject *codeobj_2f524353ae2540a85fe1b2827ac07241;
static PyCodeObject *codeobj_6d50111f385f4eca5d0281d3e6da67eb;
static PyCodeObject *codeobj_235947d08ed3b8b4b89bed5eb8dd87db;
static PyCodeObject *codeobj_2da5dde6a06792f2971e30a6e0dd01b4;
static PyCodeObject *codeobj_a18b6ac774d635f91936c6b00daa9194;
static PyCodeObject *codeobj_fd69feb5b5a30ee48106f82ed0bafada;
static PyCodeObject *codeobj_953b3ca8266d122c397fa53071b749be;
static PyCodeObject *codeobj_937a2152c6a2def861d27b8be22ef50e;
static PyCodeObject *codeobj_dcd82329178a3bf251c264339c031e6b;
static PyCodeObject *codeobj_cff898e98eda698b4f9721a7c6d2122f;
static PyCodeObject *codeobj_09078a79ef400ba55fc7d9a893bb0ace;
static PyCodeObject *codeobj_a2bcef8fc17f44b677319cae6793cd11;
static PyCodeObject *codeobj_f4c8a2a871b61e904f5150a9a58db188;
static PyCodeObject *codeobj_1879b67836390ca8aa51ad9797580951;
static PyCodeObject *codeobj_486bf26b6457fee39f47550adda5f8b4;
static PyCodeObject *codeobj_fe142108b8accb027b3d981542dfecf3;
static PyCodeObject *codeobj_a2ceaaebbb5a1181489ba01c292c3eae;
static PyCodeObject *codeobj_50e3c17233a12e732e006097df792354;
static PyCodeObject *codeobj_4e559bde6955e4ababd99028cf5f124c;
static PyCodeObject *codeobj_61df429ae8e6fcdf99b8ca38fdbd6aaf;
static PyCodeObject *codeobj_db81a55aba0bf566ac74fd04fca440a5;
static PyCodeObject *codeobj_1dd9e56e06a65c382ced484eb0e6cb1c;
static PyCodeObject *codeobj_e4ad551028a5b81f14e9ae4683028fae;
static PyCodeObject *codeobj_429945730a002b60c240bccad47cb391;
static PyCodeObject *codeobj_c28850363f982d160e0d41190c41e8e9;
static PyCodeObject *codeobj_ff6127d7c348ae143bce61243642e268;
static PyCodeObject *codeobj_d6c48e8d9f427f376d7770b30072acee;
static PyCodeObject *codeobj_e9266a566dd788b4504ed7eacde8724b;
static PyCodeObject *codeobj_670dbb674640ca4ed512e39f81839cd2;
static PyCodeObject *codeobj_40766575ccede01e6a46230568a8183f;
static PyCodeObject *codeobj_abc111bbc2a6dc99923544ae3af2acd5;
static PyCodeObject *codeobj_ea52835eb05e27f6fb08e86513c938e3;
static PyCodeObject *codeobj_ac1497872096e9f06da68ef382dad2be;
static PyCodeObject *codeobj_098bfe5d6a028588fe64d1b1b6464ed8;
static PyCodeObject *codeobj_e5a5fbe8bb8dbf556a472d167c0d928e;
static PyCodeObject *codeobj_042edb99ca6f8745dd27690821f1da62;
static PyCodeObject *codeobj_d1789dcb4b4f0be329b80f4a81a3957a;
static PyCodeObject *codeobj_2683776b8d308d99f9ab67718a6509ba;
static PyCodeObject *codeobj_188d7be0536cdc9312e8f73fd97ed8ae;
static PyCodeObject *codeobj_285d7077923d99eecb6e4f6f92a3c5d7;
static PyCodeObject *codeobj_48b0c3be29ee8abdd036af037433ad7d;
static PyCodeObject *codeobj_47865f887ef55e3f40a9ac1642287238;
static PyCodeObject *codeobj_87a9a5bc14c32d8530a1882e6b68b2c5;
static PyCodeObject *codeobj_cf2b7ee2f5a7209d2fc33cf230a69753;
static PyCodeObject *codeobj_ac7bfa26c754096d80c3d8e861482174;
static PyCodeObject *codeobj_1802183182349c8fb884c72a76e6e21b;
static PyCodeObject *codeobj_85fb4a409f2293063c414195048210b3;
static PyCodeObject *codeobj_2bfafcdcd1e3bf0c2e6ad75b50c27b3a;
static PyCodeObject *codeobj_7bb38be49e0e434f2452ec6fe698726f;
static PyCodeObject *codeobj_e3d1dfd0f0e634bbf86432874f12aad6;
static PyCodeObject *codeobj_e652dfa6994986982aef5df3fc0d3c31;
static PyCodeObject *codeobj_536a85c8663f19f094b41c032ce8b21c;
static PyCodeObject *codeobj_0b0f5fddf7d0d7063c7600c702663140;
static PyCodeObject *codeobj_d138845141f5bececa75e88a3608c878;
static PyCodeObject *codeobj_a35381d5ada914d566553916304631d4;
static PyCodeObject *codeobj_fe9e03ef54044609383ee43a507e72d8;
static PyCodeObject *codeobj_b2e76750a3215c38028191120af51f63;
static PyCodeObject *codeobj_1c561dcb886843b29c115726eacaa98e;
static PyCodeObject *codeobj_2a3765dbbb7345284d145a6625761014;
static PyCodeObject *codeobj_4c000926996c4d2b7512eacd5410fc0c;
static PyCodeObject *codeobj_17f4712f0e98246912cd5624209e8556;
static PyCodeObject *codeobj_f390743f3074dea3f52c62d3d3850beb;
static PyCodeObject *codeobj_e5c21aea0fa1fd910169e6738c195174;
static PyCodeObject *codeobj_3c8c71e32fcc40e69f207f49f6c147d2;
static PyCodeObject *codeobj_6c8758b5439c494094054714513f564f;
static PyCodeObject *codeobj_6941f7c2c5b7727d47226fd2fcec2c6b;

static void createModuleCodeObjects(void)
{
    module_filename_obj = const_str_digest_07471a17cf805229414e895d873904c1;
    codeobj_2206ae0613543d3ad66ceda2d90fa000 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 532, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_tuple, 1, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_91c5f8b3c8d0b34296485ad235996085 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 532, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_tuple, 1, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2f524353ae2540a85fe1b2827ac07241 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 842, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6d50111f385f4eca5d0281d3e6da67eb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Module_six_moves_urllib, 469, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_235947d08ed3b8b4b89bed5eb8dd87db = MAKE_CODEOBJ( module_filename_obj, const_str_plain___dir__, 130, const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2da5dde6a06792f2971e30a6e0dd01b4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___dir__, 479, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_a18b6ac774d635f91936c6b00daa9194 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___get__, 91, const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_fd69feb5b5a30ee48106f82ed0bafada = MAKE_CODEOBJ( module_filename_obj, const_str_plain___get_module, 189, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_953b3ca8266d122c397fa53071b749be = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getattr__, 117, const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_937a2152c6a2def861d27b8be22ef50e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 88, const_tuple_str_plain_self_str_plain_name_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_dcd82329178a3bf251c264339c031e6b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 105, const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_cff898e98eda698b4f9721a7c6d2122f = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 126, const_tuple_str_plain_self_str_plain_name_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_09078a79ef400ba55fc7d9a893bb0ace = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 141, const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_a2bcef8fc17f44b677319cae6793cd11 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 173, const_tuple_str_plain_self_str_plain_six_module_name_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_f4c8a2a871b61e904f5150a9a58db188 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 62, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_1879b67836390ca8aa51ad9797580951 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___new__, 807, const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_486bf26b6457fee39f47550adda5f8b4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__add_doc, 75, const_tuple_str_plain_func_str_plain_doc_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_fe142108b8accb027b3d981542dfecf3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__add_module, 177, const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_a2ceaaebbb5a1181489ba01c292c3eae = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_module, 181, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_50e3c17233a12e732e006097df792354 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__import_module, 80, const_tuple_str_plain_name_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_4e559bde6955e4ababd99028cf5f124c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__resolve, 114, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_61df429ae8e6fcdf99b8ca38fdbd6aaf = MAKE_CODEOBJ( module_filename_obj, const_str_plain__resolve, 159, const_tuple_str_plain_self_str_plain_module_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_db81a55aba0bf566ac74fd04fca440a5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_metaclass, 812, const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_1dd9e56e06a65c382ced484eb0e6cb1c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_move, 486, const_tuple_str_plain_move_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e4ad551028a5b81f14e9ae4683028fae = MAKE_CODEOBJ( module_filename_obj, const_str_plain_advance_iterator, 523, const_tuple_str_plain_it_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_429945730a002b60c240bccad47cb391 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_assertCountEqual, 666, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_c28850363f982d160e0d41190c41e8e9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_assertRaisesRegex, 670, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ff6127d7c348ae143bce61243642e268 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_assertRegex, 674, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d6c48e8d9f427f376d7770b30072acee = MAKE_CODEOBJ( module_filename_obj, const_str_plain_b, 619, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e9266a566dd788b4504ed7eacde8724b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_b, 642, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_670dbb674640ca4ed512e39f81839cd2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_byte2int, 651, const_tuple_str_plain_bs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_40766575ccede01e6a46230568a8183f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_callable, 531, const_tuple_str_plain_obj_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_abc111bbc2a6dc99923544ae3af2acd5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_bound_method, 549, const_tuple_str_plain_func_str_plain_obj_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ea52835eb05e27f6fb08e86513c938e3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_unbound_method, 541, const_tuple_str_plain_func_str_plain_cls_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ac1497872096e9f06da68ef382dad2be = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_unbound_method, 552, const_tuple_str_plain_func_str_plain_cls_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_098bfe5d6a028588fe64d1b1b6464ed8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_exec_, 689, const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e5a5fbe8bb8dbf556a472d167c0d928e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_exec_, 689, const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_042edb99ca6f8745dd27690821f1da62 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find_module, 184, const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d1789dcb4b4f0be329b80f4a81a3957a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_code, 218, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2683776b8d308d99f9ab67718a6509ba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_unbound_function, 536, const_tuple_str_plain_unbound_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_188d7be0536cdc9312e8f73fd97ed8ae = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_unbound_function, 546, const_tuple_str_plain_unbound_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_285d7077923d99eecb6e4f6f92a3c5d7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_indexbytes, 654, const_tuple_str_plain_buf_str_plain_i_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_48b0c3be29ee8abdd036af037433ad7d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_is_package, 209, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_47865f887ef55e3f40a9ac1642287238 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iteritems, 580, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_87a9a5bc14c32d8530a1882e6b68b2c5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iteritems, 598, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_cf2b7ee2f5a7209d2fc33cf230a69753 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterkeys, 574, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ac7bfa26c754096d80c3d8e861482174 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterkeys, 592, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_1802183182349c8fb884c72a76e6e21b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterlists, 583, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_85fb4a409f2293063c414195048210b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterlists, 601, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2bfafcdcd1e3bf0c2e6ad75b50c27b3a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_itervalues, 577, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_7bb38be49e0e434f2452ec6fe698726f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_itervalues, 595, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e3d1dfd0f0e634bbf86432874f12aad6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_module, 195, const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e652dfa6994986982aef5df3fc0d3c31 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_metaclass, 805, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_536a85c8663f19f094b41c032ce8b21c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_next, 557, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_0b0f5fddf7d0d7063c7600c702663140 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_print_, 723, const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d138845141f5bececa75e88a3608c878 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_print_, 779, const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_a35381d5ada914d566553916304631d4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_2_unicode_compatible, 828, const_tuple_str_plain_klass_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_fe9e03ef54044609383ee43a507e72d8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_raise_from, 717, const_tuple_str_plain_value_str_plain_from_value_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_b2e76750a3215c38028191120af51f63 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_move, 491, const_tuple_str_plain_name_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_1c561dcb886843b29c115726eacaa98e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_reraise, 681, const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2a3765dbbb7345284d145a6625761014 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_six, 1, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_4c000926996c4d2b7512eacd5410fc0c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_u, 622, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_17f4712f0e98246912cd5624209e8556 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_u, 646, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_f390743f3074dea3f52c62d3d3850beb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_with_metaclass, 800, const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e5c21aea0fa1fd910169e6738c195174 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wrapper, 791, const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_3c8c71e32fcc40e69f207f49f6c147d2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wrapper, 814, const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6c8758b5439c494094054714513f564f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wraps, 789, const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6941f7c2c5b7727d47226fd2fcec2c6b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write, 729, const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_1_X( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_2__LazyDescr( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_3_MovedModule( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_4__LazyModule( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_5_MovedAttribute( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_6__SixMetaPathImporter( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_7__MovedItems( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_8_Module_six_moves_urllib_parse( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_9_Module_six_moves_urllib_error( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_10_Module_six_moves_urllib_request( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_11_Module_six_moves_urllib_response( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_12_Module_six_moves_urllib_robotparser( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_13_Module_six_moves_urllib( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$function_6_callable$$$function_1_genexpr( PyObject **python_pars );


static void six$$$function_6_callable$$$function_1_genexpr$$$genexpr_1_genexpr_context( Nuitka_GeneratorObject *generator );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_14_Iterator( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_six$$$function_35_with_metaclass$$$class_1_metaclass( PyObject **python_pars, PyCellObject *closure_bases, PyCellObject *closure_meta );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_10_complex_call_helper_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_six$$$class_13_Module_six_moves_urllib$$$function_1___dir__(  );


static PyObject *MAKE_FUNCTION_six$$$class_14_Iterator$$$function_1_next(  );


static PyObject *MAKE_FUNCTION_six$$$class_1_X$$$function_1___len__(  );


static PyObject *MAKE_FUNCTION_six$$$class_2__LazyDescr$$$function_1___init__(  );


static PyObject *MAKE_FUNCTION_six$$$class_2__LazyDescr$$$function_2___get__(  );


static PyObject *MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_1___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_2__resolve(  );


static PyObject *MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_3___getattr__(  );


static PyObject *MAKE_FUNCTION_six$$$class_4__LazyModule$$$function_1___init__(  );


static PyObject *MAKE_FUNCTION_six$$$class_4__LazyModule$$$function_2___dir__(  );


static PyObject *MAKE_FUNCTION_six$$$class_5_MovedAttribute$$$function_1___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$class_5_MovedAttribute$$$function_2__resolve(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_1___init__(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_2__add_module(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_3__get_module(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_4_find_module( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_5___get_module(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_6_load_module(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_7_is_package(  );


static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_8_get_code(  );


static PyObject *MAKE_FUNCTION_six$$$function_10_create_bound_method(  );


static PyObject *MAKE_FUNCTION_six$$$function_11_create_unbound_method(  );


static PyObject *MAKE_FUNCTION_six$$$function_12_iterkeys(  );


static PyObject *MAKE_FUNCTION_six$$$function_13_itervalues(  );


static PyObject *MAKE_FUNCTION_six$$$function_14_iteritems(  );


static PyObject *MAKE_FUNCTION_six$$$function_15_iterlists(  );


static PyObject *MAKE_FUNCTION_six$$$function_16_iterkeys(  );


static PyObject *MAKE_FUNCTION_six$$$function_17_itervalues(  );


static PyObject *MAKE_FUNCTION_six$$$function_18_iteritems(  );


static PyObject *MAKE_FUNCTION_six$$$function_19_iterlists(  );


static PyObject *MAKE_FUNCTION_six$$$function_1__add_doc(  );


static PyObject *MAKE_FUNCTION_six$$$function_20_b(  );


static PyObject *MAKE_FUNCTION_six$$$function_21_u(  );


static PyObject *MAKE_FUNCTION_six$$$function_22_b(  );


static PyObject *MAKE_FUNCTION_six$$$function_23_u(  );


static PyObject *MAKE_FUNCTION_six$$$function_24_byte2int(  );


static PyObject *MAKE_FUNCTION_six$$$function_25_indexbytes(  );


static PyObject *MAKE_FUNCTION_six$$$function_26_assertCountEqual(  );


static PyObject *MAKE_FUNCTION_six$$$function_27_assertRaisesRegex(  );


static PyObject *MAKE_FUNCTION_six$$$function_28_assertRegex(  );


static PyObject *MAKE_FUNCTION_six$$$function_29_reraise( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_2__import_module(  );


static PyObject *MAKE_FUNCTION_six$$$function_30_exec_( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_31_raise_from(  );


static PyObject *MAKE_FUNCTION_six$$$function_32_print_(  );


static PyObject *MAKE_FUNCTION_six$$$function_32_print_$$$function_1_write( PyCellObject *closure_fp );


static PyObject *MAKE_FUNCTION_six$$$function_33_print_(  );


static PyObject *MAKE_FUNCTION_six$$$function_34_wraps( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_34_wraps$$$function_1_wrapper( PyCellObject *closure_assigned, PyCellObject *closure_updated, PyCellObject *closure_wrapped );


static PyObject *MAKE_FUNCTION_six$$$function_35_with_metaclass(  );


static PyObject *MAKE_FUNCTION_six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__( PyCellObject *closure_bases, PyCellObject *closure_meta );


static PyObject *MAKE_FUNCTION_six$$$function_36_add_metaclass(  );


static PyObject *MAKE_FUNCTION_six$$$function_36_add_metaclass$$$function_1_wrapper( PyCellObject *closure_metaclass );


static PyObject *MAKE_FUNCTION_six$$$function_37_python_2_unicode_compatible(  );


static PyObject *MAKE_FUNCTION_six$$$function_37_python_2_unicode_compatible$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION_six$$$function_3_add_move(  );


static PyObject *MAKE_FUNCTION_six$$$function_4_remove_move(  );


static PyObject *MAKE_FUNCTION_six$$$function_5_advance_iterator(  );


static PyObject *MAKE_FUNCTION_six$$$function_6_callable(  );


static PyObject *MAKE_FUNCTION_six$$$function_7_get_unbound_function(  );


static PyObject *MAKE_FUNCTION_six$$$function_8_create_unbound_method(  );


static PyObject *MAKE_FUNCTION_six$$$function_9_get_unbound_function(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_1_X( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___len__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = MAKE_FUNCTION_six$$$class_1_X$$$function_1___len__(  );
    assert( var___len__ == NULL );
    var___len__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___len__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___len__,
            var___len__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_1_X );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___len__ );
    Py_DECREF( var___len__ );
    var___len__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___len__ );
    Py_DECREF( var___len__ );
    var___len__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_1_X );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_1_X$$$function_1___len__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = const_int_pos_2147483648;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_1_X$$$function_1___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_1_X$$$function_1___len__ );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_1__add_doc( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_doc = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_486bf26b6457fee39f47550adda5f8b4, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_doc;

    tmp_assattr_target_1 = par_func;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_func )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_func,
                    par_func
                );

                assert( res == 0 );
            }

            if ( par_doc )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_doc,
                    par_doc
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_1__add_doc );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_doc );
    Py_DECREF( par_doc );
    par_doc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_doc );
    Py_DECREF( par_doc );
    par_doc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_1__add_doc );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_2__import_module( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_name = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_fromlist_1;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_level_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_modulename_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_50e3c17233a12e732e006097df792354, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_modulename_1 = par_name;

    tmp_import_fromlist_1 = const_tuple_empty;
    tmp_import_level_1 = const_int_0;
    tmp_import_globals_1 = ((PyModuleObject *)module_six)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ( par_name )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_name,
            par_name
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 82;
    tmp_unused = IMPORT_MODULE( tmp_import_modulename_1, tmp_import_globals_1, tmp_import_locals_1, tmp_import_fromlist_1, tmp_import_level_1 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 83;
        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = par_name;

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_2__import_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_2__import_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_2__LazyDescr( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___init__ = NULL;
    PyObject *var___get__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = MAKE_FUNCTION_six$$$class_2__LazyDescr$$$function_1___init__(  );
    assert( var___init__ == NULL );
    var___init__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_six$$$class_2__LazyDescr$$$function_2___get__(  );
    assert( var___get__ == NULL );
    var___get__ = tmp_assign_source_3;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___init__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__
        );

        assert( res == 0 );
    }

    if ( var___get__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___get__,
            var___get__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var___get__ );
    Py_DECREF( var___get__ );
    var___get__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var___get__ );
    Py_DECREF( var___get__ );
    var___get__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_2__LazyDescr$$$function_1___init__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_937a2152c6a2def861d27b8be22ef50e, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_name;

    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 89;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_2__LazyDescr$$$function_2___get__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_obj = python_pars[ 1 ];
    PyObject *par_tp = python_pars[ 2 ];
    PyObject *var_result = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a18b6ac774d635f91936c6b00daa9194, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__resolve );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 92;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    assert( var_result == NULL );
    var_result = tmp_assign_source_1;

    tmp_setattr_target_1 = par_obj;

    tmp_source_name_2 = par_self;

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto frame_exception_exit_1;
    }
    tmp_setattr_value_1 = var_result;

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto frame_exception_exit_1;
    }
    // Tried code:
    tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_delattr );
    assert( tmp_called_name_2 != NULL );
    tmp_source_name_3 = par_obj;

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        goto try_except_handler_2;
    }
    tmp_source_name_4 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_name );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 97;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 97;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != -1 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_function, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr$$$function_2___get__ );
    return NULL;
    // End of try:
    try_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_obj )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_obj,
                    par_obj
                );

                assert( res == 0 );
            }

            if ( par_tp )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tp,
                    par_tp
                );

                assert( res == 0 );
            }

            if ( var_result )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_result,
                    var_result
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_result;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr$$$function_2___get__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    CHECK_OBJECT( (PyObject *)par_tp );
    Py_DECREF( par_tp );
    par_tp = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    CHECK_OBJECT( (PyObject *)par_tp );
    Py_DECREF( par_tp );
    par_tp = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_2__LazyDescr$$$function_2___get__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_3_MovedModule( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___init__ = NULL;
    PyObject *var__resolve = NULL;
    PyObject *var___getattr__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_defaults_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_2 = MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_1___init__( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    assert( var___init__ == NULL );
    var___init__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_2__resolve(  );
    assert( var__resolve == NULL );
    var__resolve = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_3___getattr__(  );
    assert( var___getattr__ == NULL );
    var___getattr__ = tmp_assign_source_4;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___init__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__
        );

        assert( res == 0 );
    }

    if ( var__resolve )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__resolve,
            var__resolve
        );

        assert( res == 0 );
    }

    if ( var___getattr__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___getattr__,
            var___getattr__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var__resolve );
    Py_DECREF( var__resolve );
    var__resolve = NULL;

    CHECK_OBJECT( (PyObject *)var___getattr__ );
    Py_DECREF( var___getattr__ );
    var___getattr__ = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_3_MovedModule$$$function_1___init__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_old = python_pars[ 2 ];
    PyObject *par_new = python_pars[ 3 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_dcd82329178a3bf251c264339c031e6b, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    tmp_source_name_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_name;

    frame_function->f_lineno = 106;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_new;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = par_name;

    {
        PyObject *old = par_new;
        assert( old != NULL );
        par_new = tmp_assign_source_1;
        Py_INCREF( par_new );
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_assattr_name_1 = par_new;

    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mod, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 110;
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_2 = par_old;

    tmp_assattr_target_2 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_mod, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }

            if ( par_old )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_old,
                    par_old
                );

                assert( res == 0 );
            }

            if ( par_new )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_new,
                    par_new
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    Py_XDECREF( par_new );
    par_new = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    Py_XDECREF( par_new );
    par_new = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_3_MovedModule$$$function_2__resolve( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4e559bde6955e4ababd99028cf5f124c, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__import_module );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_import_module" );
        exception_tb = NULL;

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self;

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mod );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 115;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule$$$function_2__resolve );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule$$$function_2__resolve );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_3_MovedModule$$$function_3___getattr__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_attr = python_pars[ 1 ];
    PyObject *var__module = NULL;
    PyObject *var_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_953b3ca8266d122c397fa53071b749be, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__resolve );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 118;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    assert( var__module == NULL );
    var__module = tmp_assign_source_1;

    tmp_getattr_target_1 = var__module;

    tmp_getattr_attr_1 = par_attr;

    tmp_assign_source_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    assert( var_value == NULL );
    var_value = tmp_assign_source_2;

    tmp_setattr_target_1 = par_self;

    tmp_setattr_attr_1 = par_attr;

    tmp_setattr_value_1 = var_value;

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 120;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_attr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_attr,
                    par_attr
                );

                assert( res == 0 );
            }

            if ( var__module )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain__module,
                    var__module
                );

                assert( res == 0 );
            }

            if ( var_value )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_value,
                    var_value
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_value;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule$$$function_3___getattr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attr );
    Py_DECREF( par_attr );
    par_attr = NULL;

    CHECK_OBJECT( (PyObject *)var__module );
    Py_DECREF( var__module );
    var__module = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attr );
    Py_DECREF( par_attr );
    par_attr = NULL;

    Py_XDECREF( var__module );
    var__module = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_3_MovedModule$$$function_3___getattr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_4__LazyModule( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___init__ = NULL;
    PyObject *var___dir__ = NULL;
    PyObject *var__moved_attributes = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = MAKE_FUNCTION_six$$$class_4__LazyModule$$$function_1___init__(  );
    assert( var___init__ == NULL );
    var___init__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_six$$$class_4__LazyModule$$$function_2___dir__(  );
    assert( var___dir__ == NULL );
    var___dir__ = tmp_assign_source_3;

    tmp_assign_source_4 = PyList_New( 0 );
    assert( var__moved_attributes == NULL );
    var__moved_attributes = tmp_assign_source_4;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___init__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__
        );

        assert( res == 0 );
    }

    if ( var___dir__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___dir__,
            var___dir__
        );

        assert( res == 0 );
    }

    if ( var__moved_attributes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__moved_attributes,
            var__moved_attributes
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var___dir__ );
    Py_DECREF( var___dir__ );
    var___dir__ = NULL;

    CHECK_OBJECT( (PyObject *)var__moved_attributes );
    Py_DECREF( var__moved_attributes );
    var__moved_attributes = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var___dir__ );
    Py_DECREF( var___dir__ );
    var___dir__ = NULL;

    CHECK_OBJECT( (PyObject *)var__moved_attributes );
    Py_DECREF( var__moved_attributes );
    var__moved_attributes = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_4__LazyModule$$$function_1___init__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_cff898e98eda698b4f9721a7c6d2122f, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    tmp_source_name_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_name;

    frame_function->f_lineno = 127;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = par_self;

    tmp_source_name_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_3 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___doc__ );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_4__LazyModule$$$function_2___dir__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_attrs = NULL;
    PyObject *var_attr = NULL;
    PyObject *tmp_list_contraction_1__$0 = NULL;
    PyObject *tmp_list_contraction_1__contraction_result = NULL;
    PyObject *tmp_list_contraction_1__iter_value_0 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_outline_return_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    tmp_assign_source_1 = LIST_COPY( const_list_str_plain___doc___str_plain___name___list );
    assert( var_attrs == NULL );
    var_attrs = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_235947d08ed3b8b4b89bed5eb8dd87db, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_left_name_1 = var_attrs;

    // Tried code:
    tmp_source_name_1 = par_self;

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__moved_attributes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto try_except_handler_2;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto try_except_handler_2;
    }
    assert( tmp_list_contraction_1__$0 == NULL );
    tmp_list_contraction_1__$0 = tmp_assign_source_3;

    tmp_assign_source_4 = PyList_New( 0 );
    assert( tmp_list_contraction_1__contraction_result == NULL );
    tmp_list_contraction_1__contraction_result = tmp_assign_source_4;

    loop_start_1:;
    tmp_next_source_1 = tmp_list_contraction_1__$0;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            PyThreadState_GET()->frame->f_lineno = 132;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_list_contraction_1__iter_value_0;
        tmp_list_contraction_1__iter_value_0 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_list_contraction_1__iter_value_0;

    {
        PyObject *old = var_attr;
        var_attr = tmp_assign_source_6;
        Py_INCREF( var_attr );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_list_contraction_1__contraction_result;

    tmp_source_name_2 = var_attr;

    tmp_append_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto try_except_handler_2;
    }
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_outline_return_value_1 = tmp_list_contraction_1__contraction_result;

    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule$$$function_2___dir__ );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__$0 );
    Py_DECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__contraction_result );
    Py_DECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    Py_XDECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule$$$function_2___dir__ );
    return NULL;
    outline_result_1:;
    tmp_right_name_1 = tmp_outline_return_value_1;
    tmp_result = BINARY_OPERATION_ADD_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
    tmp_assign_source_2 = tmp_left_name_1;
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    var_attrs = tmp_assign_source_2;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( var_attrs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_attrs,
                    var_attrs
                );

                assert( res == 0 );
            }

            if ( var_attr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_attr,
                    var_attr
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_attrs;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule$$$function_2___dir__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_attrs );
    Py_DECREF( var_attrs );
    var_attrs = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_attrs );
    Py_DECREF( var_attrs );
    var_attrs = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_4__LazyModule$$$function_2___dir__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_5_MovedAttribute( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___init__ = NULL;
    PyObject *var__resolve = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_defaults_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_defaults_1 = const_tuple_none_none_tuple;
    tmp_assign_source_2 = MAKE_FUNCTION_six$$$class_5_MovedAttribute$$$function_1___init__( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    assert( var___init__ == NULL );
    var___init__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_six$$$class_5_MovedAttribute$$$function_2__resolve(  );
    assert( var__resolve == NULL );
    var__resolve = tmp_assign_source_3;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___init__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__
        );

        assert( res == 0 );
    }

    if ( var__resolve )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__resolve,
            var__resolve
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_5_MovedAttribute );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var__resolve );
    Py_DECREF( var__resolve );
    var__resolve = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_5_MovedAttribute );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_5_MovedAttribute$$$function_1___init__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_old_mod = python_pars[ 2 ];
    PyObject *par_new_mod = python_pars[ 3 ];
    PyObject *par_old_attr = python_pars[ 4 ];
    PyObject *par_new_attr = python_pars[ 5 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    bool tmp_is_4;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_09078a79ef400ba55fc7d9a893bb0ace, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    tmp_source_name_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_name;

    frame_function->f_lineno = 142;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_new_mod;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = par_name;

    {
        PyObject *old = par_new_mod;
        assert( old != NULL );
        par_new_mod = tmp_assign_source_1;
        Py_INCREF( par_new_mod );
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_assattr_name_1 = par_new_mod;

    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mod, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_2 = par_new_attr;

    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_2 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compare_left_3 = par_old_attr;

    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_3 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_2 = par_name;

    {
        PyObject *old = par_new_attr;
        assert( old != NULL );
        par_new_attr = tmp_assign_source_2;
        Py_INCREF( par_new_attr );
        Py_DECREF( old );
    }

    goto branch_end_4;
    branch_no_4:;
    tmp_assign_source_3 = par_old_attr;

    {
        PyObject *old = par_new_attr;
        assert( old != NULL );
        par_new_attr = tmp_assign_source_3;
        Py_INCREF( par_new_attr );
        Py_DECREF( old );
    }

    branch_end_4:;
    branch_no_3:;
    tmp_assattr_name_2 = par_new_attr;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "new_attr" );
        exception_tb = NULL;

        exception_lineno = 152;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_attr, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_3 = par_old_mod;

    tmp_assattr_target_3 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_mod, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_4 = par_old_attr;

    tmp_compare_right_4 = Py_None;
    tmp_is_4 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if ( tmp_is_4 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_4 = par_name;

    {
        PyObject *old = par_old_attr;
        assert( old != NULL );
        par_old_attr = tmp_assign_source_4;
        Py_INCREF( par_old_attr );
        Py_DECREF( old );
    }

    branch_no_5:;
    tmp_assattr_name_4 = par_old_attr;

    tmp_assattr_target_4 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_attr, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }

            if ( par_old_mod )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_old_mod,
                    par_old_mod
                );

                assert( res == 0 );
            }

            if ( par_new_mod )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_new_mod,
                    par_new_mod
                );

                assert( res == 0 );
            }

            if ( par_old_attr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_old_attr,
                    par_old_attr
                );

                assert( res == 0 );
            }

            if ( par_new_attr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_new_attr,
                    par_new_attr
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_5_MovedAttribute$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old_mod );
    Py_DECREF( par_old_mod );
    par_old_mod = NULL;

    Py_XDECREF( par_new_mod );
    par_new_mod = NULL;

    Py_XDECREF( par_old_attr );
    par_old_attr = NULL;

    Py_XDECREF( par_new_attr );
    par_new_attr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old_mod );
    Py_DECREF( par_old_mod );
    par_old_mod = NULL;

    Py_XDECREF( par_new_mod );
    par_new_mod = NULL;

    Py_XDECREF( par_old_attr );
    par_old_attr = NULL;

    Py_XDECREF( par_new_attr );
    par_new_attr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_5_MovedAttribute$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_5_MovedAttribute$$$function_2__resolve( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_module = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_61df429ae8e6fcdf99b8ca38fdbd6aaf, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__import_module );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_import_module" );
        exception_tb = NULL;

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self;

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mod );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 160;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    assert( var_module == NULL );
    var_module = tmp_assign_source_1;

    tmp_getattr_target_1 = var_module;

    tmp_source_name_2 = par_self;

    tmp_getattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_attr );
    if ( tmp_getattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_attr_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( var_module )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_module,
                    var_module
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_5_MovedAttribute$$$function_2__resolve );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_module );
    Py_DECREF( var_module );
    var_module = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_module );
    var_module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_5_MovedAttribute$$$function_2__resolve );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_6__SixMetaPathImporter( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var___init__ = NULL;
    PyObject *var__add_module = NULL;
    PyObject *var__get_module = NULL;
    PyObject *var_find_module = NULL;
    PyObject *var__SixMetaPathImporter__get_module = NULL;
    PyObject *var_load_module = NULL;
    PyObject *var_is_package = NULL;
    PyObject *var_get_code = NULL;
    PyObject *var_get_source = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_defaults_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_087d011e227804c37fa5a994ee918bbe;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_1___init__(  );
    assert( var___init__ == NULL );
    var___init__ = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_2__add_module(  );
    assert( var__add_module == NULL );
    var__add_module = tmp_assign_source_4;

    tmp_assign_source_5 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_3__get_module(  );
    assert( var__get_module == NULL );
    var__get_module = tmp_assign_source_5;

    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_6 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_4_find_module( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    assert( var_find_module == NULL );
    var_find_module = tmp_assign_source_6;

    tmp_assign_source_7 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_5___get_module(  );
    assert( var__SixMetaPathImporter__get_module == NULL );
    var__SixMetaPathImporter__get_module = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_6_load_module(  );
    assert( var_load_module == NULL );
    var_load_module = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_7_is_package(  );
    assert( var_is_package == NULL );
    var_is_package = tmp_assign_source_9;

    tmp_assign_source_10 = MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_8_get_code(  );
    assert( var_get_code == NULL );
    var_get_code = tmp_assign_source_10;

    tmp_assign_source_11 = var_get_code;

    assert( var_get_source == NULL );
    Py_INCREF( tmp_assign_source_11 );
    var_get_source = tmp_assign_source_11;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var___init__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__
        );

        assert( res == 0 );
    }

    if ( var__add_module )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__add_module,
            var__add_module
        );

        assert( res == 0 );
    }

    if ( var__get_module )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__get_module,
            var__get_module
        );

        assert( res == 0 );
    }

    if ( var_find_module )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_find_module,
            var_find_module
        );

        assert( res == 0 );
    }

    if ( var__SixMetaPathImporter__get_module )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SixMetaPathImporter__get_module,
            var__SixMetaPathImporter__get_module
        );

        assert( res == 0 );
    }

    if ( var_load_module )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_load_module,
            var_load_module
        );

        assert( res == 0 );
    }

    if ( var_is_package )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_is_package,
            var_is_package
        );

        assert( res == 0 );
    }

    if ( var_get_code )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_get_code,
            var_get_code
        );

        assert( res == 0 );
    }

    if ( var_get_source )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_get_source,
            var_get_source
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var__add_module );
    Py_DECREF( var__add_module );
    var__add_module = NULL;

    CHECK_OBJECT( (PyObject *)var__get_module );
    Py_DECREF( var__get_module );
    var__get_module = NULL;

    CHECK_OBJECT( (PyObject *)var_find_module );
    Py_DECREF( var_find_module );
    var_find_module = NULL;

    CHECK_OBJECT( (PyObject *)var__SixMetaPathImporter__get_module );
    Py_DECREF( var__SixMetaPathImporter__get_module );
    var__SixMetaPathImporter__get_module = NULL;

    CHECK_OBJECT( (PyObject *)var_load_module );
    Py_DECREF( var_load_module );
    var_load_module = NULL;

    CHECK_OBJECT( (PyObject *)var_is_package );
    Py_DECREF( var_is_package );
    var_is_package = NULL;

    CHECK_OBJECT( (PyObject *)var_get_code );
    Py_DECREF( var_get_code );
    var_get_code = NULL;

    CHECK_OBJECT( (PyObject *)var_get_source );
    Py_DECREF( var_get_source );
    var_get_source = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_1___init__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_six_module_name = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a2bcef8fc17f44b677319cae6793cd11, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_six_module_name;

    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyDict_New();
    tmp_assattr_target_2 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_known_modules, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 175;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_six_module_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_six_module_name,
                    par_six_module_name
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_six_module_name );
    Py_DECREF( par_six_module_name );
    par_six_module_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_six_module_name );
    Py_DECREF( par_six_module_name );
    par_six_module_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_2__add_module( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_mod = python_pars[ 1 ];
    PyObject *par_fullnames = python_pars[ 2 ];
    PyObject *var_fullname = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_fe142108b8accb027b3d981542dfecf3, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_iter_arg_1 = par_fullnames;

    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 178;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 178;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_fullname;
        var_fullname = tmp_assign_source_3;
        Py_INCREF( var_fullname );
        Py_XDECREF( old );
    }

    tmp_ass_subvalue_1 = par_mod;

    tmp_source_name_1 = par_self;

    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;
        goto try_except_handler_2;
    }
    tmp_source_name_2 = par_self;

    tmp_left_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 179;
        goto try_except_handler_2;
    }
    tmp_right_name_1 = const_str_dot;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 179;
        goto try_except_handler_2;
    }
    tmp_right_name_2 = var_fullname;

    tmp_ass_subscript_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 179;
        goto try_except_handler_2;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 178;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_mod )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_mod,
                    par_mod
                );

                assert( res == 0 );
            }

            if ( par_fullnames )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullnames,
                    par_fullnames
                );

                assert( res == 0 );
            }

            if ( var_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    var_fullname
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_2__add_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mod );
    Py_DECREF( par_mod );
    par_mod = NULL;

    CHECK_OBJECT( (PyObject *)par_fullnames );
    Py_DECREF( par_fullnames );
    par_fullnames = NULL;

    Py_XDECREF( var_fullname );
    var_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mod );
    Py_DECREF( par_mod );
    par_mod = NULL;

    CHECK_OBJECT( (PyObject *)par_fullnames );
    Py_DECREF( par_fullnames );
    par_fullnames = NULL;

    Py_XDECREF( var_fullname );
    var_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_2__add_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_3__get_module( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a2ceaaebbb5a1181489ba01c292c3eae, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = par_self;

    tmp_left_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_str_dot;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_right_name_2 = par_fullname;

    tmp_subscript_name_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    par_fullname
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_3__get_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_3__get_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_4_find_module( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *par_path = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_042edb99ca6f8745dd27690821f1da62, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_fullname;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_self;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    par_fullname
                );

                assert( res == 0 );
            }

            if ( par_path )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_path,
                    par_path
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_4_find_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    CHECK_OBJECT( (PyObject *)par_path );
    Py_DECREF( par_path );
    par_path = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    CHECK_OBJECT( (PyObject *)par_path );
    Py_DECREF( par_path );
    par_path = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_4_find_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_5___get_module( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_fd69feb5b5a30ee48106f82ed0bafada, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_self;

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_fullname;

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_5___get_module );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != -1 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_function, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = const_str_digest_d082ba711c791809312af019a50cc3ce;
    tmp_right_name_1 = par_fullname;

    tmp_make_exception_arg_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 193;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ImportError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 193;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    par_fullname
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_5___get_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_5___get_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_6_load_module( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *var_mod = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e3d1dfd0f0e634bbf86432874f12aad6, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 198;
        goto try_except_handler_2;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_fullname;

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_6_load_module );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != -1 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_function, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_6_load_module );
    return NULL;
    // End of try:
    try_end_1:;
    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__SixMetaPathImporter__get_module );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_fullname;

    frame_function->f_lineno = 201;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        goto frame_exception_exit_1;
    }
    assert( var_mod == NULL );
    var_mod = tmp_assign_source_1;

    tmp_isinstance_inst_1 = var_mod;

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 202;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = var_mod;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__resolve );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 203;
    tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_mod;
        assert( old != NULL );
        var_mod = tmp_assign_source_2;
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_assattr_name_1 = par_self;

    tmp_assattr_target_1 = var_mod;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___loader__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    tmp_ass_subvalue_1 = var_mod;

    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_modules );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = par_fullname;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 206;
        goto frame_exception_exit_1;
    }

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    par_fullname
                );

                assert( res == 0 );
            }

            if ( var_mod )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_mod,
                    var_mod
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_mod;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_6_load_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    Py_XDECREF( var_mod );
    var_mod = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    Py_XDECREF( var_mod );
    var_mod = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_6_load_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_7_is_package( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_48b0c3be29ee8abdd036af037433ad7d, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__SixMetaPathImporter__get_module );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_fullname;

    frame_function->f_lineno = 216;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_hasattr_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_hasattr_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        goto frame_exception_exit_1;
    }
    tmp_hasattr_attr_1 = const_str_plain___path__;
    tmp_return_value = BUILTIN_HASATTR( tmp_hasattr_value_1, tmp_hasattr_attr_1 );
    Py_DECREF( tmp_hasattr_value_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    par_fullname
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_7_is_package );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_7_is_package );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_6__SixMetaPathImporter$$$function_8_get_code( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_d1789dcb4b4f0be329b80f4a81a3957a, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__SixMetaPathImporter__get_module );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_fullname;

    frame_function->f_lineno = 222;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_fullname )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fullname,
                    par_fullname
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_8_get_code );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_6__SixMetaPathImporter$$$function_8_get_code );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_7__MovedItems( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var___path__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_fa9629ad3e56524d94051e9d7ab9b735;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = PyList_New( 0 );
    assert( var___path__ == NULL );
    var___path__ = tmp_assign_source_3;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var___path__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___path__,
            var___path__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_7__MovedItems );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var___path__ );
    Py_DECREF( var___path__ );
    var___path__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var___path__ );
    Py_DECREF( var___path__ );
    var___path__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_7__MovedItems );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_8_Module_six_moves_urllib_parse( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_12251381889b9eebcd7998baa486eb86;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_8_Module_six_moves_urllib_parse );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_8_Module_six_moves_urllib_parse );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_9_Module_six_moves_urllib_error( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_53317e6be879446851f4fe6f94b546e7;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_9_Module_six_moves_urllib_error );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_9_Module_six_moves_urllib_error );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_10_Module_six_moves_urllib_request( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_f13c881fad34db50f71983f3aeb67682;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_10_Module_six_moves_urllib_request );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_10_Module_six_moves_urllib_request );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_11_Module_six_moves_urllib_response( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_89029d2dedfd3a97fd4d41a1b57a375b;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_11_Module_six_moves_urllib_response );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_11_Module_six_moves_urllib_response );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_12_Module_six_moves_urllib_robotparser( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_36bd400ddf45050462a62a66cdace7eb;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_12_Module_six_moves_urllib_robotparser );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_12_Module_six_moves_urllib_robotparser );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_13_Module_six_moves_urllib( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var___path__ = NULL;
    PyObject *var_parse = NULL;
    PyObject *var_error = NULL;
    PyObject *var_request = NULL;
    PyObject *var_response = NULL;
    PyObject *var_robotparser = NULL;
    PyObject *var___dir__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_digest_b136a150499b95c9a0929c5fba6642cb;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = PyList_New( 0 );
    assert( var___path__ == NULL );
    var___path__ = tmp_assign_source_3;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6d50111f385f4eca5d0281d3e6da67eb, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 473;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__get_module );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 473;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        goto frame_exception_exit_1;
    }
    assert( var_parse == NULL );
    var_parse = tmp_assign_source_4;

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 474;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__get_module );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 474;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 474;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple, 0 ) );

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 474;
        goto frame_exception_exit_1;
    }
    assert( var_error == NULL );
    var_error = tmp_assign_source_5;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__get_module );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 475;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple, 0 ) );

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    assert( var_request == NULL );
    var_request = tmp_assign_source_6;

    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 476;
        goto frame_exception_exit_1;
    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__get_module );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 476;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple, 0 ) );

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto frame_exception_exit_1;
    }
    assert( var_response == NULL );
    var_response = tmp_assign_source_7;

    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 477;
        goto frame_exception_exit_1;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__get_module );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 477;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple, 0 ) );

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto frame_exception_exit_1;
    }
    assert( var_robotparser == NULL );
    var_robotparser = tmp_assign_source_8;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( var___module__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

                assert( res == 0 );
            }

            if ( var___doc__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___doc__,
                    var___doc__
                );

                assert( res == 0 );
            }

            if ( var___path__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___path__,
                    var___path__
                );

                assert( res == 0 );
            }

            if ( var_parse )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_parse,
                    var_parse
                );

                assert( res == 0 );
            }

            if ( var_error )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_error,
                    var_error
                );

                assert( res == 0 );
            }

            if ( var_request )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_request,
                    var_request
                );

                assert( res == 0 );
            }

            if ( var_response )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_response,
                    var_response
                );

                assert( res == 0 );
            }

            if ( var_robotparser )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_robotparser,
                    var_robotparser
                );

                assert( res == 0 );
            }

            if ( var___dir__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___dir__,
                    var___dir__
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_assign_source_9 = MAKE_FUNCTION_six$$$class_13_Module_six_moves_urllib$$$function_1___dir__(  );
    assert( var___dir__ == NULL );
    var___dir__ = tmp_assign_source_9;

    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var___path__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___path__,
            var___path__
        );

        assert( res == 0 );
    }

    if ( var_parse )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_parse,
            var_parse
        );

        assert( res == 0 );
    }

    if ( var_error )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_error,
            var_error
        );

        assert( res == 0 );
    }

    if ( var_request )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_request,
            var_request
        );

        assert( res == 0 );
    }

    if ( var_response )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_response,
            var_response
        );

        assert( res == 0 );
    }

    if ( var_robotparser )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_robotparser,
            var_robotparser
        );

        assert( res == 0 );
    }

    if ( var___dir__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___dir__,
            var___dir__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_13_Module_six_moves_urllib );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var___path__ );
    Py_DECREF( var___path__ );
    var___path__ = NULL;

    CHECK_OBJECT( (PyObject *)var_parse );
    Py_DECREF( var_parse );
    var_parse = NULL;

    CHECK_OBJECT( (PyObject *)var_error );
    Py_DECREF( var_error );
    var_error = NULL;

    CHECK_OBJECT( (PyObject *)var_request );
    Py_DECREF( var_request );
    var_request = NULL;

    CHECK_OBJECT( (PyObject *)var_response );
    Py_DECREF( var_response );
    var_response = NULL;

    CHECK_OBJECT( (PyObject *)var_robotparser );
    Py_DECREF( var_robotparser );
    var_robotparser = NULL;

    CHECK_OBJECT( (PyObject *)var___dir__ );
    Py_DECREF( var___dir__ );
    var___dir__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var___path__ );
    Py_DECREF( var___path__ );
    var___path__ = NULL;

    Py_XDECREF( var_parse );
    var_parse = NULL;

    Py_XDECREF( var_error );
    var_error = NULL;

    Py_XDECREF( var_request );
    var_request = NULL;

    Py_XDECREF( var_response );
    var_response = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_13_Module_six_moves_urllib );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_13_Module_six_moves_urllib$$$function_1___dir__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = LIST_COPY( const_list_1c82cc17d8f54cff757731adfdff677e_list );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_13_Module_six_moves_urllib$$$function_1___dir__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_13_Module_six_moves_urllib$$$function_1___dir__ );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_3_add_move( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_move = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1dd9e56e06a65c382ced484eb0e6cb1c, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_setattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_setattr_target_1 == NULL ))
    {
        tmp_setattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 488;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_move;

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 488;
        goto frame_exception_exit_1;
    }
    tmp_setattr_value_1 = par_move;

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 488;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_move )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_move,
                    par_move
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_3_add_move );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_move );
    Py_DECREF( par_move );
    par_move = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_move );
    Py_DECREF( par_move );
    par_move = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_3_add_move );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_4_remove_move( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_name = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b2e76750a3215c38028191120af51f63, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_delattr );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_args_element_name_1 == NULL ))
    {
        tmp_args_element_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_args_element_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = par_name;

    frame_function->f_lineno = 494;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != -1 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_function, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 497;
        goto try_except_handler_3;
    }

    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        goto try_except_handler_3;
    }
    tmp_delsubscr_subscript_1 = par_name;

    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        goto try_except_handler_3;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != -1 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_function, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_KeyError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 498;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_left_name_1 = const_str_digest_dc2910a6e816441d866e674df51d57ac;
    tmp_right_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_name;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 499;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AttributeError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 499;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_2:;
    // End of try:
    try_end_2:;
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_4_remove_move );
    return NULL;
    // End of try:
    try_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_4_remove_move );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_4_remove_move );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_5_advance_iterator( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_it = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e4ad551028a5b81f14e9ae4683028fae, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_it;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_next );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 524;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 524;
    tmp_return_value = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 524;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_it )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_it,
                    par_it
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_5_advance_iterator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_it );
    Py_DECREF( par_it );
    par_it = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_it );
    Py_DECREF( par_it );
    par_it = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_5_advance_iterator );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_6_callable( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_obj = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_arg_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_40766575ccede01e6a46230568a8183f, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_any );
    assert( tmp_called_name_1 != NULL );
    tmp_type_arg_1 = par_obj;

    tmp_source_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_source_name_1 != NULL );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___mro__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto frame_exception_exit_1;
    }

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
        tmp_args_element_name_1 = impl_six$$$function_6_callable$$$function_1_genexpr( dir_call_args );
    }
    assert( tmp_args_element_name_1 != NULL );
    frame_function->f_lineno = 532;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_obj )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_obj,
                    par_obj
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_6_callable );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_6_callable );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$function_6_callable$$$function_1_genexpr( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyCellObject *par_$0 = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    {
        PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
        closure[0] = par_$0;
        Py_INCREF( closure[0] );

        tmp_return_value = Nuitka_Generator_New(
            six$$$function_6_callable$$$function_1_genexpr$$$genexpr_1_genexpr_context,
            const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
            NULL,
#endif
            codeobj_91c5f8b3c8d0b34296485ad235996085,
            closure,
            1
        );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_6_callable$$$function_1_genexpr );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_$0 );
    Py_DECREF( par_$0 );
    par_$0 = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_$0 );
    Py_DECREF( par_$0 );
    par_$0 = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_6_callable$$$function_1_genexpr );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static void six$$$function_6_callable$$$function_1_genexpr$$$genexpr_1_genexpr_context( Nuitka_GeneratorObject *generator )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_klass = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_generator = NULL;


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_2206ae0613543d3ad66ceda2d90fa000, module_six );
    generator->m_frame = cache_frame_generator;
    Py_INCREF( generator->m_frame );

#if PYTHON_VERSION >= 340
    generator->m_frame->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;
    Py_INCREF( generator->m_frame );

#if PYTHON_VERSION >= 340
    generator->m_frame->f_executing += 1;
#endif

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->f_exc_type == Py_None ) generator->m_frame->f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->f_exc_type );
    generator->m_frame->f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->f_exc_value );
    generator->m_frame->f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    // Throwing into not started generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            exception_lineno = 532;
            goto try_except_handler_2;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    loop_start_1:;
    tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );

    if ( tmp_next_source_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", ".0" );
        exception_tb = NULL;

        exception_lineno = 532;
        goto try_except_handler_2;
    }

    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            generator->m_frame->f_lineno = 532;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    {
        PyObject *old = var_klass;
        var_klass = tmp_assign_source_2;
        Py_INCREF( var_klass );
        Py_XDECREF( old );
    }

    tmp_compexpr_left_1 = const_str_plain___call__;
    tmp_source_name_1 = var_klass;

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto try_except_handler_2;
    }
    tmp_expression_name_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto try_except_handler_2;
    }
    tmp_unused = YIELD( generator, INCREASE_REFCOUNT( tmp_expression_name_1 ) );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if PYTHON_VERSION >= 340
    generator->m_frame->f_executing -= 1;
#endif

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->f_exc_type );
    Py_CLEAR( generator->m_frame->f_exc_value );
    Py_CLEAR( generator->m_frame->f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        int needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_tb->tb_frame != generator->m_frame )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( generator->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_digest_b9c4baf879ebd882d40843df3a4dead7,
                    generator->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }

            if ( var_klass )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_klass,
                    var_klass
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->f_exc_type );
    Py_CLEAR( generator->m_frame->f_exc_value );
    Py_CLEAR( generator->m_frame->f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var_klass );
    var_klass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_klass );
    var_klass = NULL;


    RESTORE_ERROR_OCCURRED( PyExc_StopIteration, NULL, NULL );
    Py_INCREF( PyExc_StopIteration );

    generator->m_yielded = NULL;
    return;

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    generator->m_yielded = NULL;
    return;

}


static PyObject *impl_six$$$function_7_get_unbound_function( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_unbound = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_unbound;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_7_get_unbound_function );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_unbound );
    Py_DECREF( par_unbound );
    par_unbound = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_7_get_unbound_function );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_8_create_unbound_method( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_cls = python_pars[ 1 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_func;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_8_create_unbound_method );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_8_create_unbound_method );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_9_get_unbound_function( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_unbound = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_188d7be0536cdc9312e8f73fd97ed8ae, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_unbound;

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_im_func );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 547;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_unbound )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_unbound,
                    par_unbound
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_9_get_unbound_function );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_unbound );
    Py_DECREF( par_unbound );
    par_unbound = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_unbound );
    Py_DECREF( par_unbound );
    par_unbound = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_9_get_unbound_function );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_10_create_bound_method( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_obj = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_abc111bbc2a6dc99923544ae3af2acd5, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_MethodType );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 550;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_func;

    tmp_args_element_name_2 = par_obj;

    tmp_source_name_2 = par_obj;

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 550;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 550;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 550;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_func )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_func,
                    par_func
                );

                assert( res == 0 );
            }

            if ( par_obj )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_obj,
                    par_obj
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_10_create_bound_method );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_10_create_bound_method );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_11_create_unbound_method( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_cls = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ac1497872096e9f06da68ef382dad2be, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 553;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_MethodType );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 553;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_func;

    tmp_args_element_name_2 = Py_None;
    tmp_args_element_name_3 = par_cls;

    frame_function->f_lineno = 553;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 553;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_func )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_func,
                    par_func
                );

                assert( res == 0 );
            }

            if ( par_cls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cls,
                    par_cls
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_11_create_unbound_method );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_11_create_unbound_method );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$class_14_Iterator( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var_next = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = MAKE_FUNCTION_six$$$class_14_Iterator$$$function_1_next(  );
    assert( var_next == NULL );
    var_next = tmp_assign_source_2;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var_next )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_next,
            var_next
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_14_Iterator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var_next );
    Py_DECREF( var_next );
    var_next = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var_next );
    Py_DECREF( var_next );
    var_next = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_14_Iterator );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$class_14_Iterator$$$function_1_next( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_arg_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_536a85c8663f19f094b41c032ce8b21c, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_type_arg_1 = par_self;

    tmp_source_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_source_name_1 != NULL );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___next__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 558;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_self;

    frame_function->f_lineno = 558;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 558;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$class_14_Iterator$$$function_1_next );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$class_14_Iterator$$$function_1_next );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_12_iterkeys( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_cf2b7ee2f5a7209d2fc33cf230a69753, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_keys );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_12_iterkeys );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_12_iterkeys );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_13_itervalues( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2bfafcdcd1e3bf0c2e6ad75b50c27b3a, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_values );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_13_itervalues );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_13_itervalues );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_14_iteritems( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_47865f887ef55e3f40a9ac1642287238, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_14_iteritems );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_14_iteritems );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_15_iterlists( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1802183182349c8fb884c72a76e6e21b, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_lists );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_15_iterlists );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_15_iterlists );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_16_iterkeys( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ac7bfa26c754096d80c3d8e861482174, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iterkeys );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_16_iterkeys );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_16_iterkeys );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_17_itervalues( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7bb38be49e0e434f2452ec6fe698726f, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_itervalues );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 596;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 596;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_17_itervalues );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_17_itervalues );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_18_iteritems( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_87a9a5bc14c32d8530a1882e6b68b2c5, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iteritems );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_18_iteritems );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_18_iteritems );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_19_iterlists( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_85fb4a409f2293063c414195048210b3, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iterlists );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 602;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_10_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 602;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( par_kw )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kw,
                    par_kw
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_19_iterlists );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_19_iterlists );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_20_b( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_d6c48e8d9f427f376d7770b30072acee, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_s;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encode );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 620;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 620;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 620;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_s )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_s,
                    par_s
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_20_b );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_20_b );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_21_u( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_s;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_21_u );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_21_u );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_22_b( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_s;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_22_b );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_22_b );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_23_u( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_unicode_arg_1;
    PyObject *tmp_unicode_encoding_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_17f4712f0e98246912cd5624209e8556, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_s;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_replace );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 647;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 647;
    tmp_unicode_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unicode_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 647;
        goto frame_exception_exit_1;
    }
    tmp_unicode_encoding_1 = const_str_plain_unicode_escape;
    tmp_return_value = TO_UNICODE3( tmp_unicode_arg_1, tmp_unicode_encoding_1, NULL );
    Py_DECREF( tmp_unicode_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 647;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_s )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_s,
                    par_s
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_23_u );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_23_u );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_24_byte2int( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_bs = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_670dbb674640ca4ed512e39f81839cd2, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_subscribed_name_1 = par_bs;

    tmp_subscript_name_1 = const_int_0;
    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 652;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 652;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_bs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_bs,
                    par_bs
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_24_byte2int );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_bs );
    Py_DECREF( par_bs );
    par_bs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_bs );
    Py_DECREF( par_bs );
    par_bs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_24_byte2int );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_25_indexbytes( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_buf = python_pars[ 0 ];
    PyObject *par_i = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_285d7077923d99eecb6e4f6f92a3c5d7, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_subscribed_name_1 = par_buf;

    tmp_subscript_name_1 = par_i;

    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_buf )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_buf,
                    par_buf
                );

                assert( res == 0 );
            }

            if ( par_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    par_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_25_indexbytes );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_buf );
    Py_DECREF( par_buf );
    par_buf = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_buf );
    Py_DECREF( par_buf );
    par_buf = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_25_indexbytes );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_26_assertCountEqual( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_429945730a002b60c240bccad47cb391, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_getattr_target_1 = par_self;

    tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertCountEqual );

    if (unlikely( tmp_getattr_attr_1 == NULL ))
    {
        tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__assertCountEqual );
    }

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_assertCountEqual" );
        exception_tb = NULL;

        exception_lineno = 667;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 667;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    tmp_dircall_arg3_1 = par_kwargs;

    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 667;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_args )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_args,
                    par_args
                );

                assert( res == 0 );
            }

            if ( par_kwargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kwargs,
                    par_kwargs
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_26_assertCountEqual );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_26_assertCountEqual );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_27_assertRaisesRegex( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c28850363f982d160e0d41190c41e8e9, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_getattr_target_1 = par_self;

    tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex );

    if (unlikely( tmp_getattr_attr_1 == NULL ))
    {
        tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex );
    }

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_assertRaisesRegex" );
        exception_tb = NULL;

        exception_lineno = 671;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    tmp_dircall_arg3_1 = par_kwargs;

    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_args )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_args,
                    par_args
                );

                assert( res == 0 );
            }

            if ( par_kwargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kwargs,
                    par_kwargs
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_27_assertRaisesRegex );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_27_assertRaisesRegex );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_28_assertRegex( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ff6127d7c348ae143bce61243642e268, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_getattr_target_1 = par_self;

    tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex );

    if (unlikely( tmp_getattr_attr_1 == NULL ))
    {
        tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__assertRegex );
    }

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_assertRegex" );
        exception_tb = NULL;

        exception_lineno = 675;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 675;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    tmp_dircall_arg3_1 = par_kwargs;

    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 675;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_args )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_args,
                    par_args
                );

                assert( res == 0 );
            }

            if ( par_kwargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kwargs,
                    par_kwargs
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_28_assertRegex );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_28_assertRegex );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_29_reraise( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_tp = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *par_tb = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_isnot_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1c561dcb886843b29c115726eacaa98e, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_value;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = par_tp;

    frame_function->f_lineno = 683;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 683;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_value;
        assert( old != NULL );
        par_value = tmp_assign_source_1;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_source_name_1 = par_value;

    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___traceback__ );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 684;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = par_tb;

    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = par_value;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_with_traceback );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 685;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_tb;

    frame_function->f_lineno = 685;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 685;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 685;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_raise_type_2 = par_value;

    exception_type = tmp_raise_type_2;
    Py_INCREF( tmp_raise_type_2 );
    exception_lineno = 686;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_tp )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tp,
                    par_tp
                );

                assert( res == 0 );
            }

            if ( par_value )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_value,
                    par_value
                );

                assert( res == 0 );
            }

            if ( par_tb )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tb,
                    par_tb
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_29_reraise );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_tp );
    Py_DECREF( par_tp );
    par_tp = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_tb );
    Py_DECREF( par_tb );
    par_tb = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_29_reraise );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_six$$$function_30_exec_( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *par__code_ = python_pars[ 0 ];
    PyObject *par__globs_ = python_pars[ 1 ];
    PyObject *par__locs_ = python_pars[ 2 ];
    PyObject *var_frame = NULL;
    PyObject *tmp_exec_1__globals = NULL;
    PyObject *tmp_exec_1__locals = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_eval_globals_1;
    PyObject *tmp_eval_locals_1;
    PyObject *tmp_eval_locals_2;
    PyObject *tmp_eval_locals_3;
    PyObject *tmp_eval_source_1;
    PyObject *tmp_exec_compiled_1;
    PyObject *tmp_exec_result_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_locals_value;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_098bfe5d6a028588fe64d1b1b6464ed8, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par__globs_;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_sys );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
            exception_tb = NULL;

            exception_lineno = 692;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__getframe );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 692;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;
        goto frame_exception_exit_1;
    }
    assert( var_frame == NULL );
    var_frame = tmp_assign_source_1;

    tmp_source_name_2 = var_frame;

    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f_globals );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 693;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par__globs_;
        assert( old != NULL );
        par__globs_ = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_compare_left_2 = par__locs_;

    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_2 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = var_frame;

    tmp_assign_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f_locals );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 695;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par__locs_;
        assert( old != NULL );
        par__locs_ = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_2:;
    CHECK_OBJECT( var_frame );
    Py_DECREF( var_frame );
    var_frame = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_3 = par__locs_;

    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_3 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_4 = par__globs_;

    {
        PyObject *old = par__locs_;
        assert( old != NULL );
        par__locs_ = tmp_assign_source_4;
        Py_INCREF( par__locs_ );
        Py_DECREF( old );
    }

    branch_no_3:;
    branch_end_1:;
    tmp_assign_source_5 = ((PyModuleObject *)module_six)->md_dict;
    assert( tmp_exec_1__globals == NULL );
    Py_INCREF( tmp_assign_source_5 );
    tmp_exec_1__globals = tmp_assign_source_5;

    tmp_assign_source_6 = locals_dict;
    Py_INCREF( locals_dict );
    DICT_SYNC_FROM_VARIABLE(
        tmp_assign_source_6,
        const_str_plain__code_,
        par__code_
    );

    DICT_SYNC_FROM_VARIABLE(
        tmp_assign_source_6,
        const_str_plain__globs_,
        par__globs_
    );

    DICT_SYNC_FROM_VARIABLE(
        tmp_assign_source_6,
        const_str_plain__locs_,
        par__locs_
    );

    DICT_SYNC_FROM_VARIABLE(
        tmp_assign_source_6,
        const_str_plain_frame,
        var_frame
    );

    assert( tmp_exec_1__locals == NULL );
    tmp_exec_1__locals = tmp_assign_source_6;

    // Tried code:
    // Tried code:
    tmp_eval_source_1 = const_str_digest_70a0120f28d7311f633323a6bfb46104;
    tmp_eval_globals_1 = tmp_exec_1__globals;

    tmp_eval_locals_1 = tmp_exec_1__locals;

    tmp_exec_compiled_1 = COMPILE_CODE( tmp_eval_source_1, const_str_angle_string, const_str_plain_exec, NULL, NULL );
    if ( tmp_exec_compiled_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        goto try_except_handler_3;
    }
    tmp_exec_result_1 = EVAL_CODE( tmp_exec_compiled_1, tmp_eval_globals_1, tmp_eval_locals_1 );
    Py_DECREF( tmp_exec_compiled_1 );
    if ( tmp_exec_result_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_exec_result_1 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    tmp_eval_locals_2 = tmp_exec_1__locals;

    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_2, const_str_plain__code_ );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        Py_DECREF( exception_keeper_type_1 );
        Py_XDECREF( exception_keeper_value_1 );
        Py_XDECREF( exception_keeper_tb_1 );


        goto try_except_handler_2;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__code_;
        par__code_ = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_2, const_str_plain__globs_ );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        Py_DECREF( exception_keeper_type_1 );
        Py_XDECREF( exception_keeper_value_1 );
        Py_XDECREF( exception_keeper_tb_1 );


        goto try_except_handler_2;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__globs_;
        par__globs_ = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_2, const_str_plain__locs_ );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        Py_DECREF( exception_keeper_type_1 );
        Py_XDECREF( exception_keeper_value_1 );
        Py_XDECREF( exception_keeper_tb_1 );


        goto try_except_handler_2;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__locs_;
        par__locs_ = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_2, const_str_plain_frame );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        Py_DECREF( exception_keeper_type_1 );
        Py_XDECREF( exception_keeper_value_1 );
        Py_XDECREF( exception_keeper_tb_1 );


        goto try_except_handler_2;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = var_frame;
        var_frame = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_exec_1__globals );
    tmp_exec_1__globals = NULL;

    Py_XDECREF( tmp_exec_1__locals );
    tmp_exec_1__locals = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            DICT_SYNC_FROM_VARIABLE(
                tmp_frame_locals,
                const_str_plain__code_,
                par__code_
            );

            DICT_SYNC_FROM_VARIABLE(
                tmp_frame_locals,
                const_str_plain__globs_,
                par__globs_
            );

            DICT_SYNC_FROM_VARIABLE(
                tmp_frame_locals,
                const_str_plain__locs_,
                par__locs_
            );

            DICT_SYNC_FROM_VARIABLE(
                tmp_frame_locals,
                const_str_plain_frame,
                var_frame
            );



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_eval_locals_3 = tmp_exec_1__locals;

    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_3, const_str_plain__code_ );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__code_;
        par__code_ = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_3, const_str_plain__globs_ );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__globs_;
        par__globs_ = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_3, const_str_plain__locs_ );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__locs_;
        par__locs_ = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyObject_GetItem( tmp_eval_locals_3, const_str_plain_frame );
    if ( tmp_locals_value == NULL && !EXCEPTION_MATCH_BOOL_SINGLE( GET_ERROR_OCCURRED(), PyExc_KeyError ) )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    CLEAR_ERROR_OCCURRED();
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = var_frame;
        var_frame = tmp_locals_value;
        Py_XDECREF( old );
    }

    }
    Py_XDECREF( tmp_exec_1__globals );
    tmp_exec_1__globals = NULL;

    Py_XDECREF( tmp_exec_1__locals );
    tmp_exec_1__locals = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_30_exec_ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par__code_ );
    Py_DECREF( par__code_ );
    par__code_ = NULL;

    Py_XDECREF( par__globs_ );
    par__globs_ = NULL;

    Py_XDECREF( par__locs_ );
    par__locs_ = NULL;

    Py_XDECREF( var_frame );
    var_frame = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par__code_ );
    Py_DECREF( par__code_ );
    par__code_ = NULL;

    Py_XDECREF( par__globs_ );
    par__globs_ = NULL;

    Py_XDECREF( par__locs_ );
    par__locs_ = NULL;

    Py_XDECREF( var_frame );
    var_frame = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_30_exec_ );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_31_raise_from( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *par_from_value = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_raise_type_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_fe9e03ef54044609383ee43a507e72d8, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_raise_type_1 = par_value;

    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_lineno = 718;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_value )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_value,
                    par_value
                );

                assert( res == 0 );
            }

            if ( par_from_value )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_from_value,
                    par_from_value
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_31_raise_from );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_from_value );
    Py_DECREF( par_from_value );
    par_from_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_31_raise_from );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_six$$$function_32_print_( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    PyCellObject *var_fp = PyCell_EMPTY();
    PyObject *var_write = NULL;
    PyObject *var_want_unicode = NULL;
    PyObject *var_sep = NULL;
    PyObject *var_end = NULL;
    PyObject *var_arg = NULL;
    PyObject *var_newline = NULL;
    PyObject *var_space = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0b0f5fddf7d0d7063c7600c702663140, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_kwargs;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_pop );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_str_plain_file;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stdout );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 725;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 725;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( var_fp );
        PyCell_SET( var_fp, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = PyCell_GET( var_fp );

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "fp" );
        exception_tb = NULL;

        exception_lineno = 726;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_2 = MAKE_FUNCTION_six$$$function_32_print_$$$function_1_write( var_fp );
    assert( var_write == NULL );
    var_write = tmp_assign_source_2;

    tmp_assign_source_3 = Py_False;
    assert( var_want_unicode == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_want_unicode = tmp_assign_source_3;

    tmp_source_name_3 = par_kwargs;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pop );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 742;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 742;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_plain_sep_none_tuple, 0 ) );

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 742;
        goto frame_exception_exit_1;
    }
    assert( var_sep == NULL );
    var_sep = tmp_assign_source_4;

    tmp_compare_left_2 = var_sep;

    tmp_compare_right_2 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_isinstance_inst_1 = var_sep;

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_unicode );
    assert( tmp_isinstance_cls_1 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_5 = Py_True;
    {
        PyObject *old = var_want_unicode;
        assert( old != NULL );
        var_want_unicode = tmp_assign_source_5;
        Py_INCREF( var_want_unicode );
        Py_DECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_isinstance_inst_2 = var_sep;

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_isinstance_cls_2 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 746;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    tmp_make_exception_arg_1 = const_str_digest_a13035c59d0f0e8c04a4feacc0004cd7;
    frame_function->f_lineno = 747;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 747;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_4:;
    branch_end_3:;
    branch_no_2:;
    tmp_source_name_4 = par_kwargs;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_pop );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 748;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 748;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_str_plain_end_none_tuple, 0 ) );

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 748;
        goto frame_exception_exit_1;
    }
    assert( var_end == NULL );
    var_end = tmp_assign_source_6;

    tmp_compare_left_3 = var_end;

    tmp_compare_right_3 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_3 != tmp_compare_right_3 );
    if ( tmp_isnot_2 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_isinstance_inst_3 = var_end;

    tmp_isinstance_cls_3 = LOOKUP_BUILTIN( const_str_plain_unicode );
    assert( tmp_isinstance_cls_3 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 750;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_7 = Py_True;
    {
        PyObject *old = var_want_unicode;
        var_want_unicode = tmp_assign_source_7;
        Py_INCREF( var_want_unicode );
        Py_XDECREF( old );
    }

    goto branch_end_6;
    branch_no_6:;
    tmp_isinstance_inst_4 = var_end;

    tmp_isinstance_cls_4 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_isinstance_cls_4 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 752;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_7;
    }
    else
    {
        goto branch_yes_7;
    }
    branch_yes_7:;
    tmp_make_exception_arg_2 = const_str_digest_7e4f7e7d87a44d0e81f11f08170c9bf6;
    frame_function->f_lineno = 753;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 753;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_7:;
    branch_end_6:;
    branch_no_5:;
    tmp_cond_value_1 = par_kwargs;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 754;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_make_exception_arg_3 = const_str_digest_6fdf710e7d63e48e68391e1f587ae0a5;
    frame_function->f_lineno = 755;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_3 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_3 != NULL );
    exception_type = tmp_raise_type_3;
    exception_lineno = 755;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_8:;
    tmp_cond_value_2 = var_want_unicode;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "want_unicode" );
        exception_tb = NULL;

        exception_lineno = 756;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 756;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_no_9;
    }
    else
    {
        goto branch_yes_9;
    }
    branch_yes_9:;
    tmp_iter_arg_1 = par_args;

    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 757;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_arg;
        var_arg = tmp_assign_source_10;
        Py_INCREF( var_arg );
        Py_XDECREF( old );
    }

    tmp_isinstance_inst_5 = var_arg;

    tmp_isinstance_cls_5 = LOOKUP_BUILTIN( const_str_plain_unicode );
    assert( tmp_isinstance_cls_5 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 758;
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_11 = Py_True;
    {
        PyObject *old = var_want_unicode;
        var_want_unicode = tmp_assign_source_11;
        Py_INCREF( var_want_unicode );
        Py_XDECREF( old );
    }

    goto loop_end_1;
    branch_no_10:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_9:;
    tmp_cond_value_3 = var_want_unicode;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "want_unicode" );
        exception_tb = NULL;

        exception_lineno = 761;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 761;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_12 = const_unicode_newline;
    assert( var_newline == NULL );
    Py_INCREF( tmp_assign_source_12 );
    var_newline = tmp_assign_source_12;

    tmp_assign_source_13 = const_unicode_space;
    assert( var_space == NULL );
    Py_INCREF( tmp_assign_source_13 );
    var_space = tmp_assign_source_13;

    goto branch_end_11;
    branch_no_11:;
    tmp_assign_source_14 = const_str_newline;
    assert( var_newline == NULL );
    Py_INCREF( tmp_assign_source_14 );
    var_newline = tmp_assign_source_14;

    tmp_assign_source_15 = const_str_space;
    assert( var_space == NULL );
    Py_INCREF( tmp_assign_source_15 );
    var_space = tmp_assign_source_15;

    branch_end_11:;
    tmp_compare_left_4 = var_sep;

    tmp_compare_right_4 = Py_None;
    tmp_is_2 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if ( tmp_is_2 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_16 = var_space;

    {
        PyObject *old = var_sep;
        assert( old != NULL );
        var_sep = tmp_assign_source_16;
        Py_INCREF( var_sep );
        Py_DECREF( old );
    }

    branch_no_12:;
    tmp_compare_left_5 = var_end;

    tmp_compare_right_5 = Py_None;
    tmp_is_3 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if ( tmp_is_3 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_17 = var_newline;

    {
        PyObject *old = var_end;
        assert( old != NULL );
        var_end = tmp_assign_source_17;
        Py_INCREF( var_end );
        Py_DECREF( old );
    }

    branch_no_13:;
    tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    assert( tmp_called_name_4 != NULL );
    tmp_args_element_name_3 = par_args;

    frame_function->f_lineno = 771;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_18;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_19 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 771;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_3 = tmp_for_loop_2__iter_value;

    tmp_assign_source_20 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_21 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 771;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 771;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_4;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    tmp_assign_source_23 = tmp_tuple_unpack_1__element_1;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_23;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_assign_source_24 = tmp_tuple_unpack_1__element_2;

    {
        PyObject *old = var_arg;
        var_arg = tmp_assign_source_24;
        Py_INCREF( var_arg );
        Py_XDECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_1 );
    Py_DECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_2 );
    Py_DECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_cond_value_4 = var_i;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 772;
        goto try_except_handler_3;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_called_name_5 = var_write;

    tmp_args_element_name_4 = var_sep;

    frame_function->f_lineno = 773;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 773;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    branch_no_14:;
    tmp_called_name_6 = var_write;

    tmp_args_element_name_5 = var_arg;

    frame_function->f_lineno = 774;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 774;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_called_name_7 = var_write;

    tmp_args_element_name_6 = var_end;

    frame_function->f_lineno = 775;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 775;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_args )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_args,
                    par_args
                );

                assert( res == 0 );
            }

            if ( par_kwargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kwargs,
                    par_kwargs
                );

                assert( res == 0 );
            }

            if ( var_fp->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fp,
                    var_fp->ob_ref
                );

                assert( res == 0 );
            }

            if ( var_write )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_write,
                    var_write
                );

                assert( res == 0 );
            }

            if ( var_want_unicode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_want_unicode,
                    var_want_unicode
                );

                assert( res == 0 );
            }

            if ( var_sep )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_sep,
                    var_sep
                );

                assert( res == 0 );
            }

            if ( var_end )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_end,
                    var_end
                );

                assert( res == 0 );
            }

            if ( var_arg )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_arg,
                    var_arg
                );

                assert( res == 0 );
            }

            if ( var_newline )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_newline,
                    var_newline
                );

                assert( res == 0 );
            }

            if ( var_space )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_space,
                    var_space
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_32_print_ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_write );
    var_write = NULL;

    Py_XDECREF( var_want_unicode );
    var_want_unicode = NULL;

    Py_XDECREF( var_sep );
    var_sep = NULL;

    Py_XDECREF( var_end );
    var_end = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_newline );
    var_newline = NULL;

    Py_XDECREF( var_space );
    var_space = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_write );
    var_write = NULL;

    Py_XDECREF( var_want_unicode );
    var_want_unicode = NULL;

    Py_XDECREF( var_sep );
    var_sep = NULL;

    Py_XDECREF( var_end );
    var_end = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_newline );
    var_newline = NULL;

    Py_XDECREF( var_space );
    var_space = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_32_print_ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_32_print_$$$function_1_write( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_data = python_pars[ 0 ];
    PyObject *var_errors = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_str_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6941f7c2c5b7727d47226fd2fcec2c6b, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_isinstance_inst_1 = par_data;

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_basestring );
    assert( tmp_isinstance_cls_1 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_str_arg_1 = par_data;

    tmp_assign_source_1 = PyObject_Str( tmp_str_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_data;
        assert( old != NULL );
        par_data = tmp_assign_source_1;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_isinstance_inst_2 = PyCell_GET( self->m_closure[0] );

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 733;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_file );
    assert( tmp_isinstance_cls_2 != NULL );
    tmp_and_left_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_isinstance_inst_3 = par_data;

    tmp_isinstance_cls_3 = LOOKUP_BUILTIN( const_str_plain_unicode );
    assert( tmp_isinstance_cls_3 != NULL );
    tmp_and_left_value_2 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_source_name_1 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 735;
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encoding );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = Py_None;
    tmp_and_right_value_2 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    tmp_and_right_value_1 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_and_right_value_1 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_getattr_target_1 = PyCell_GET( self->m_closure[0] );

    if ( tmp_getattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 736;
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_1 = const_str_plain_errors;
    tmp_getattr_default_1 = Py_None;
    tmp_assign_source_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 736;
        goto frame_exception_exit_1;
    }
    assert( var_errors == NULL );
    var_errors = tmp_assign_source_2;

    tmp_compare_left_1 = var_errors;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_3 = const_str_plain_strict;
    {
        PyObject *old = var_errors;
        assert( old != NULL );
        var_errors = tmp_assign_source_3;
        Py_INCREF( var_errors );
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_source_name_2 = par_data;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_encode );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 739;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 739;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_encoding );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 739;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = var_errors;

    frame_function->f_lineno = 739;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 739;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_data;
        assert( old != NULL );
        par_data = tmp_assign_source_4;
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_source_name_4 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 740;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_data;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "data" );
        exception_tb = NULL;

        exception_lineno = 740;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 740;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_data )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_data,
                    par_data
                );

                assert( res == 0 );
            }

            if ( var_errors )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_errors,
                    var_errors
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fp,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_32_print_$$$function_1_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_data );
    par_data = NULL;

    Py_XDECREF( var_errors );
    var_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_data );
    par_data = NULL;

    Py_XDECREF( var_errors );
    var_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_32_print_$$$function_1_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_33_print_( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    PyObject *var_fp = NULL;
    PyObject *var_flush = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_d138845141f5bececa75e88a3608c878, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_kwargs;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_str_plain_file;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 780;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stdout );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 780;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 780;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        goto frame_exception_exit_1;
    }
    assert( var_fp == NULL );
    var_fp = tmp_assign_source_1;

    tmp_source_name_3 = par_kwargs;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pop );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 781;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 781;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_plain_flush_false_tuple, 0 ) );

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 781;
        goto frame_exception_exit_1;
    }
    assert( var_flush == NULL );
    var_flush = tmp_assign_source_2;

    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__print );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__print );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_print" );
        exception_tb = NULL;

        exception_lineno = 782;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = par_args;

    tmp_dircall_arg3_1 = par_kwargs;

    Py_INCREF( tmp_dircall_arg1_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_unused = impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 782;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_and_left_value_1 = var_flush;

    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_compexpr_left_1 = var_fp;

    tmp_compexpr_right_1 = Py_None;
    tmp_and_right_value_1 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_4 = var_fp;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_flush );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 784;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    Py_DECREF( tmp_called_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_args )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_args,
                    par_args
                );

                assert( res == 0 );
            }

            if ( par_kwargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kwargs,
                    par_kwargs
                );

                assert( res == 0 );
            }

            if ( var_fp )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fp,
                    var_fp
                );

                assert( res == 0 );
            }

            if ( var_flush )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_flush,
                    var_flush
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_33_print_ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    CHECK_OBJECT( (PyObject *)var_flush );
    Py_DECREF( var_flush );
    var_flush = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_flush );
    var_flush = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_33_print_ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_34_wraps( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_wrapped = PyCell_NEW1( python_pars[ 0 ] );
    PyCellObject *par_assigned = PyCell_NEW1( python_pars[ 1 ] );
    PyCellObject *par_updated = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *var_wrapper = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_six$$$function_34_wraps$$$function_1_wrapper( par_assigned, par_updated, par_wrapped );
    assert( var_wrapper == NULL );
    var_wrapper = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_wrapper;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_34_wraps );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_wrapped );
    Py_DECREF( par_wrapped );
    par_wrapped = NULL;

    CHECK_OBJECT( (PyObject *)par_assigned );
    Py_DECREF( par_assigned );
    par_assigned = NULL;

    CHECK_OBJECT( (PyObject *)par_updated );
    Py_DECREF( par_updated );
    par_updated = NULL;

    CHECK_OBJECT( (PyObject *)var_wrapper );
    Py_DECREF( var_wrapper );
    var_wrapper = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_34_wraps );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_34_wraps$$$function_1_wrapper( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_f = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e5c21aea0fa1fd910169e6738c195174, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 792;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_wraps );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = PyCell_GET( self->m_closure[2] );

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "wrapped" );
        exception_tb = NULL;

        exception_lineno = 792;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = PyCell_GET( self->m_closure[0] );

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "assigned" );
        exception_tb = NULL;

        exception_lineno = 792;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = PyCell_GET( self->m_closure[1] );

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "updated" );
        exception_tb = NULL;

        exception_lineno = 792;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 792;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_called_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_f;

    frame_function->f_lineno = 792;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_f;
        assert( old != NULL );
        par_f = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_assattr_name_1 = PyCell_GET( self->m_closure[2] );

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "wrapped" );
        exception_tb = NULL;

        exception_lineno = 793;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_f;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___wrapped__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 793;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_f )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_f,
                    par_f
                );

                assert( res == 0 );
            }

            if ( self->m_closure[2]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_wrapped,
                    self->m_closure[2]->ob_ref
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_assigned,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }

            if ( self->m_closure[1]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_updated,
                    self->m_closure[1]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_f;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_34_wraps$$$function_1_wrapper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_f );
    Py_DECREF( par_f );
    par_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_f );
    Py_DECREF( par_f );
    par_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_34_wraps$$$function_1_wrapper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_35_with_metaclass( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_meta = PyCell_NEW1( python_pars[ 0 ] );
    PyCellObject *par_bases = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *var_metaclass = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_key_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = PyCell_GET( par_meta );

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "meta" );
        exception_tb = NULL;


        goto function_exception_exit;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_1, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f390743f3074dea3f52c62d3d3850beb, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code:
    tmp_assign_source_2 = impl_six$$$function_35_with_metaclass$$$class_1_metaclass( NULL, par_bases, par_meta );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto try_except_handler_2;
    }
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_2;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_3 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto try_except_handler_2;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_bases_name_1 = tmp_class_creation_1__bases;

    tmp_assign_source_3 = SELECT_METACLASS( tmp_bases_name_1, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_3;

    tmp_called_name_1 = tmp_class_creation_1__metaclass;

    tmp_args_element_name_1 = const_str_plain_metaclass;
    tmp_args_element_name_2 = tmp_class_creation_1__bases;

    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    frame_function->f_lineno = 805;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto try_except_handler_2;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_4;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_5 = tmp_class_creation_1__class;

    assert( var_metaclass == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_metaclass = tmp_assign_source_5;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    tmp_source_name_1 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_source_name_1 != NULL );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___new__ );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_4 = var_metaclass;

    tmp_args_element_name_5 = const_str_plain_temporary_class;
    tmp_args_element_name_6 = const_tuple_empty;
    tmp_args_element_name_7 = PyDict_New();
    frame_function->f_lineno = 809;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 809;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_meta->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_meta,
                    par_meta->ob_ref
                );

                assert( res == 0 );
            }

            if ( par_bases->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_bases,
                    par_bases->ob_ref
                );

                assert( res == 0 );
            }

            if ( var_metaclass )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_metaclass,
                    var_metaclass
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_35_with_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_meta );
    Py_DECREF( par_meta );
    par_meta = NULL;

    CHECK_OBJECT( (PyObject *)par_bases );
    Py_DECREF( par_bases );
    par_bases = NULL;

    CHECK_OBJECT( (PyObject *)var_metaclass );
    Py_DECREF( var_metaclass );
    var_metaclass = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_meta );
    Py_DECREF( par_meta );
    par_meta = NULL;

    CHECK_OBJECT( (PyObject *)par_bases );
    Py_DECREF( par_bases );
    par_bases = NULL;

    Py_XDECREF( var_metaclass );
    var_metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_35_with_metaclass );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_six$$$function_35_with_metaclass$$$class_1_metaclass( PyObject **python_pars, PyCellObject *closure_bases, PyCellObject *closure_meta )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___new__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e652dfa6994986982aef5df3fc0d3c31, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_staticmethod );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = MAKE_FUNCTION_six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__( closure_bases, closure_meta );
    frame_function->f_lineno = 807;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 807;
        goto frame_exception_exit_1;
    }
    assert( var___new__ == NULL );
    var___new__ = tmp_assign_source_2;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( var___module__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

                assert( res == 0 );
            }

            if ( var___new__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___new__,
                    var___new__
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___new__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___new__,
            var___new__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_35_with_metaclass$$$class_1_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___new__ );
    Py_DECREF( var___new__ );
    var___new__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_35_with_metaclass$$$class_1_metaclass );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_this_bases = python_pars[ 2 ];
    PyObject *par_d = python_pars[ 3 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1879b67836390ca8aa51ad9797580951, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = PyCell_GET( self->m_closure[1] );

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "meta" );
        exception_tb = NULL;

        exception_lineno = 808;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_name;

    tmp_args_element_name_2 = PyCell_GET( self->m_closure[0] );

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "bases" );
        exception_tb = NULL;

        exception_lineno = 808;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_d;

    frame_function->f_lineno = 808;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 808;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_cls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cls,
                    par_cls
                );

                assert( res == 0 );
            }

            if ( par_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    par_name
                );

                assert( res == 0 );
            }

            if ( par_this_bases )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_this_bases,
                    par_this_bases
                );

                assert( res == 0 );
            }

            if ( par_d )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_d,
                    par_d
                );

                assert( res == 0 );
            }

            if ( self->m_closure[1]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_meta,
                    self->m_closure[1]->ob_ref
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_bases,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_this_bases );
    Py_DECREF( par_this_bases );
    par_this_bases = NULL;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_this_bases );
    Py_DECREF( par_this_bases );
    par_this_bases = NULL;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_36_add_metaclass( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_metaclass = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_wrapper = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_six$$$function_36_add_metaclass$$$function_1_wrapper( par_metaclass );
    assert( var_wrapper == NULL );
    var_wrapper = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_wrapper;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_36_add_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_metaclass );
    Py_DECREF( par_metaclass );
    par_metaclass = NULL;

    CHECK_OBJECT( (PyObject *)var_wrapper );
    Py_DECREF( var_wrapper );
    var_wrapper = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_36_add_metaclass );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_36_add_metaclass$$$function_1_wrapper( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *var_orig_vars = NULL;
    PyObject *var_slots = NULL;
    PyObject *var_slots_var = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_3c8c71e32fcc40e69f207f49f6c147d2, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = par_cls;

    tmp_source_name_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_copy );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 815;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        goto frame_exception_exit_1;
    }
    assert( var_orig_vars == NULL );
    var_orig_vars = tmp_assign_source_1;

    tmp_source_name_3 = var_orig_vars;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 816;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 816;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_plain___slots___tuple, 0 ) );

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 816;
        goto frame_exception_exit_1;
    }
    assert( var_slots == NULL );
    var_slots = tmp_assign_source_2;

    tmp_compare_left_1 = var_slots;

    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_isinstance_inst_1 = var_slots;

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_isinstance_cls_1 != NULL );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 818;
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_3 = PyList_New( 1 );
    tmp_list_element_1 = var_slots;

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_3, 0, tmp_list_element_1 );
    {
        PyObject *old = var_slots;
        assert( old != NULL );
        var_slots = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_iter_arg_1 = var_slots;

    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 820;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_slots_var;
        var_slots_var = tmp_assign_source_6;
        Py_INCREF( var_slots_var );
        Py_XDECREF( old );
    }

    tmp_source_name_4 = var_orig_vars;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_pop );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 821;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = var_slots_var;

    frame_function->f_lineno = 821;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 821;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_1:;
    tmp_source_name_5 = var_orig_vars;

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_pop );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 822;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_plain___dict___none_tuple, 0 ) );

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_6 = var_orig_vars;

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pop );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 823;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 823;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_str_plain___weakref___none_tuple, 0 ) );

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 823;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_6 = PyCell_GET( self->m_closure[0] );

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "metaclass" );
        exception_tb = NULL;

        exception_lineno = 824;
        goto frame_exception_exit_1;
    }

    tmp_source_name_7 = par_cls;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___name__ );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = par_cls;

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___bases__ );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = var_orig_vars;

    frame_function->f_lineno = 824;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 824;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_cls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cls,
                    par_cls
                );

                assert( res == 0 );
            }

            if ( var_orig_vars )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_orig_vars,
                    var_orig_vars
                );

                assert( res == 0 );
            }

            if ( var_slots )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_slots,
                    var_slots
                );

                assert( res == 0 );
            }

            if ( var_slots_var )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_slots_var,
                    var_slots_var
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_metaclass,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_36_add_metaclass$$$function_1_wrapper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)var_orig_vars );
    Py_DECREF( var_orig_vars );
    var_orig_vars = NULL;

    Py_XDECREF( var_slots );
    var_slots = NULL;

    Py_XDECREF( var_slots_var );
    var_slots_var = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    Py_XDECREF( var_orig_vars );
    var_orig_vars = NULL;

    Py_XDECREF( var_slots );
    var_slots = NULL;

    Py_XDECREF( var_slots_var );
    var_slots_var = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_36_add_metaclass$$$function_1_wrapper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_37_python_2_unicode_compatible( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_klass = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a35381d5ada914d566553916304631d4, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY2 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY2 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY2" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 836;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = const_str_plain___str__;
    tmp_source_name_1 = par_klass;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 837;
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_left_name_1 = const_str_digest_4c46721e9886c5db124415a36253d572;
    tmp_source_name_2 = par_klass;

    tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___name__ );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 840;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 838;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 840;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_source_name_3 = par_klass;

    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___str__ );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_klass;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___unicode__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 841;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    tmp_assattr_name_2 = MAKE_FUNCTION_six$$$function_37_python_2_unicode_compatible$$$function_1_lambda(  );
    tmp_assattr_target_2 = par_klass;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain___str__, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 842;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_klass )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_klass,
                    par_klass
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_klass;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_37_python_2_unicode_compatible );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_klass );
    Py_DECREF( par_klass );
    par_klass = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_klass );
    Py_DECREF( par_klass );
    par_klass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_37_python_2_unicode_compatible );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_37_python_2_unicode_compatible$$$function_1_lambda( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2f524353ae2540a85fe1b2827ac07241, module_six );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = par_self;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___unicode__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 842;
    tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    Py_DECREF( tmp_called_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encode );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 842;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_37_python_2_unicode_compatible$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_37_python_2_unicode_compatible$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_six$$$class_13_Module_six_moves_urllib$$$function_1___dir__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_13_Module_six_moves_urllib$$$function_1___dir__,
        const_str_plain___dir__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2da5dde6a06792f2971e30a6e0dd01b4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_14_Iterator$$$function_1_next(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_14_Iterator$$$function_1_next,
        const_str_plain_next,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_536a85c8663f19f094b41c032ce8b21c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_1_X$$$function_1___len__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_1_X$$$function_1___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f4c8a2a871b61e904f5150a9a58db188,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_2__LazyDescr$$$function_1___init__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_2__LazyDescr$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_937a2152c6a2def861d27b8be22ef50e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_2__LazyDescr$$$function_2___get__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_2__LazyDescr$$$function_2___get__,
        const_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a18b6ac774d635f91936c6b00daa9194,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_1___init__( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_3_MovedModule$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_dcd82329178a3bf251c264339c031e6b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_2__resolve(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_3_MovedModule$$$function_2__resolve,
        const_str_plain__resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4e559bde6955e4ababd99028cf5f124c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_3_MovedModule$$$function_3___getattr__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_3_MovedModule$$$function_3___getattr__,
        const_str_plain___getattr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_953b3ca8266d122c397fa53071b749be,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_4__LazyModule$$$function_1___init__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_4__LazyModule$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cff898e98eda698b4f9721a7c6d2122f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_4__LazyModule$$$function_2___dir__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_4__LazyModule$$$function_2___dir__,
        const_str_plain___dir__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_235947d08ed3b8b4b89bed5eb8dd87db,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_5_MovedAttribute$$$function_1___init__( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_5_MovedAttribute$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_09078a79ef400ba55fc7d9a893bb0ace,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_5_MovedAttribute$$$function_2__resolve(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_5_MovedAttribute$$$function_2__resolve,
        const_str_plain__resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_61df429ae8e6fcdf99b8ca38fdbd6aaf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_1___init__(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a2bcef8fc17f44b677319cae6793cd11,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_2__add_module(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_2__add_module,
        const_str_plain__add_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fe142108b8accb027b3d981542dfecf3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_3__get_module(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_3__get_module,
        const_str_plain__get_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a2ceaaebbb5a1181489ba01c292c3eae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_4_find_module( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_4_find_module,
        const_str_plain_find_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_042edb99ca6f8745dd27690821f1da62,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_5___get_module(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_5___get_module,
        const_str_plain___get_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fd69feb5b5a30ee48106f82ed0bafada,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_6_load_module(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_6_load_module,
        const_str_plain_load_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e3d1dfd0f0e634bbf86432874f12aad6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_7_is_package(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_7_is_package,
        const_str_plain_is_package,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_48b0c3be29ee8abdd036af037433ad7d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_7cd96a434c5e7c2d0afa70c5bbed7be7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$class_6__SixMetaPathImporter$$$function_8_get_code(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$class_6__SixMetaPathImporter$$$function_8_get_code,
        const_str_plain_get_code,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d1789dcb4b4f0be329b80f4a81a3957a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_36b48fae7858438c9796c3d30c76579f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_10_create_bound_method(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_10_create_bound_method,
        const_str_plain_create_bound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_abc111bbc2a6dc99923544ae3af2acd5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_11_create_unbound_method(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_11_create_unbound_method,
        const_str_plain_create_unbound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac1497872096e9f06da68ef382dad2be,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_12_iterkeys(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_12_iterkeys,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cf2b7ee2f5a7209d2fc33cf230a69753,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_13_itervalues(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_13_itervalues,
        const_str_plain_itervalues,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2bfafcdcd1e3bf0c2e6ad75b50c27b3a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_14_iteritems(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_14_iteritems,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_47865f887ef55e3f40a9ac1642287238,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_15_iterlists(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_15_iterlists,
        const_str_plain_iterlists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1802183182349c8fb884c72a76e6e21b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_16_iterkeys(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_16_iterkeys,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac7bfa26c754096d80c3d8e861482174,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_17_itervalues(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_17_itervalues,
        const_str_plain_itervalues,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7bb38be49e0e434f2452ec6fe698726f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_18_iteritems(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_18_iteritems,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_87a9a5bc14c32d8530a1882e6b68b2c5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_19_iterlists(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_19_iterlists,
        const_str_plain_iterlists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_85fb4a409f2293063c414195048210b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_1__add_doc(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_1__add_doc,
        const_str_plain__add_doc,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_486bf26b6457fee39f47550adda5f8b4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_cce73c34157ad7a21f7265310a153ec1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_20_b(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_20_b,
        const_str_plain_b,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d6c48e8d9f427f376d7770b30072acee,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_21_u(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_21_u,
        const_str_plain_u,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4c000926996c4d2b7512eacd5410fc0c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_22_b(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_22_b,
        const_str_plain_b,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e9266a566dd788b4504ed7eacde8724b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_23_u(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_23_u,
        const_str_plain_u,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_17f4712f0e98246912cd5624209e8556,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_24_byte2int(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_24_byte2int,
        const_str_plain_byte2int,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_670dbb674640ca4ed512e39f81839cd2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_25_indexbytes(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_25_indexbytes,
        const_str_plain_indexbytes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_285d7077923d99eecb6e4f6f92a3c5d7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_26_assertCountEqual(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_26_assertCountEqual,
        const_str_plain_assertCountEqual,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_429945730a002b60c240bccad47cb391,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_27_assertRaisesRegex(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_27_assertRaisesRegex,
        const_str_plain_assertRaisesRegex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c28850363f982d160e0d41190c41e8e9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_28_assertRegex(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_28_assertRegex,
        const_str_plain_assertRegex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ff6127d7c348ae143bce61243642e268,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_29_reraise( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_29_reraise,
        const_str_plain_reraise,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1c561dcb886843b29c115726eacaa98e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_2__import_module(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_2__import_module,
        const_str_plain__import_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_50e3c17233a12e732e006097df792354,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_1e91aab42d00f04e391d84545f09e2f5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_30_exec_( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_30_exec_,
        const_str_plain_exec_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e5a5fbe8bb8dbf556a472d167c0d928e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_52da6974eceb6e05255f92901fc2e2f2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_31_raise_from(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_31_raise_from,
        const_str_plain_raise_from,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fe9e03ef54044609383ee43a507e72d8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_32_print_(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_32_print_,
        const_str_plain_print_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0b0f5fddf7d0d7063c7600c702663140,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_0e7fae28a2f47cf9bbe813dcd6d34e25
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_32_print_$$$function_1_write( PyCellObject *closure_fp )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
    closure[0] = closure_fp;
    Py_INCREF( closure[0] );


    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_32_print_$$$function_1_write,
        const_str_plain_write,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6941f7c2c5b7727d47226fd2fcec2c6b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        closure,
        1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_33_print_(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_33_print_,
        const_str_plain_print_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d138845141f5bececa75e88a3608c878,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_34_wraps( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_34_wraps,
        const_str_plain_wraps,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6c8758b5439c494094054714513f564f,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_34_wraps$$$function_1_wrapper( PyCellObject *closure_assigned, PyCellObject *closure_updated, PyCellObject *closure_wrapped )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(3 * sizeof(PyCellObject *));
    closure[0] = closure_assigned;
    Py_INCREF( closure[0] );
    closure[1] = closure_updated;
    Py_INCREF( closure[1] );
    closure[2] = closure_wrapped;
    Py_INCREF( closure[2] );


    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_34_wraps$$$function_1_wrapper,
        const_str_plain_wrapper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e5c21aea0fa1fd910169e6738c195174,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        closure,
        3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_35_with_metaclass(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_35_with_metaclass,
        const_str_plain_with_metaclass,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f390743f3074dea3f52c62d3d3850beb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_1d2e267f2ccdeb84fbf4cb4191414e9f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__( PyCellObject *closure_bases, PyCellObject *closure_meta )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(2 * sizeof(PyCellObject *));
    closure[0] = closure_bases;
    Py_INCREF( closure[0] );
    closure[1] = closure_meta;
    Py_INCREF( closure[1] );


    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_35_with_metaclass$$$class_1_metaclass$$$function_1___new__,
        const_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1879b67836390ca8aa51ad9797580951,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        closure,
        2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_36_add_metaclass(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_36_add_metaclass,
        const_str_plain_add_metaclass,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_db81a55aba0bf566ac74fd04fca440a5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_af06de2d225df4407b0a0ba06a331ccf
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_36_add_metaclass$$$function_1_wrapper( PyCellObject *closure_metaclass )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
    closure[0] = closure_metaclass;
    Py_INCREF( closure[0] );


    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_36_add_metaclass$$$function_1_wrapper,
        const_str_plain_wrapper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3c8c71e32fcc40e69f207f49f6c147d2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        closure,
        1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_37_python_2_unicode_compatible(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_37_python_2_unicode_compatible,
        const_str_plain_python_2_unicode_compatible,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a35381d5ada914d566553916304631d4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_62c17ddfba14b5f942749b77083b82bc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_37_python_2_unicode_compatible$$$function_1_lambda(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_37_python_2_unicode_compatible$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2f524353ae2540a85fe1b2827ac07241,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_3_add_move(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_3_add_move,
        const_str_plain_add_move,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1dd9e56e06a65c382ced484eb0e6cb1c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_122cdcc1600da4a884855d78ecd7756a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_4_remove_move(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_4_remove_move,
        const_str_plain_remove_move,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b2e76750a3215c38028191120af51f63,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_bc859a90e4d9c0b4fce03f66d37f0cf6
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_5_advance_iterator(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_5_advance_iterator,
        const_str_plain_advance_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e4ad551028a5b81f14e9ae4683028fae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_6_callable(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_6_callable,
        const_str_plain_callable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_40766575ccede01e6a46230568a8183f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_7_get_unbound_function(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_7_get_unbound_function,
        const_str_plain_get_unbound_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2683776b8d308d99f9ab67718a6509ba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_8_create_unbound_method(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_8_create_unbound_method,
        const_str_plain_create_unbound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ea52835eb05e27f6fb08e86513c938e3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_six$$$function_9_get_unbound_function(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_six$$$function_9_get_unbound_function,
        const_str_plain_get_unbound_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_188d7be0536cdc9312e8f73fd97ed8ae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_six =
{
    PyModuleDef_HEAD_INIT,
    "six",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( six )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_six );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION >= 350
    PyType_Ready( &Nuitka_Coroutine_Type );
    PyType_Ready( &Nuitka_CoroutineWrapper_Type );
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    createModuleConstants();
    createModuleCodeObjects();

    // puts( "in initsix" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_six = Py_InitModule4(
        "six",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_six = PyModule_Create( &mdef_six );
#endif

    moduledict_six = (PyDictObject *)((PyModuleObject *)module_six)->md_dict;

    CHECK_OBJECT( module_six );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_plain_six, module_six );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_six );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_try_except_1__unhandled_indicator = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__class = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__class = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__class = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__class = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__class = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__class = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__class_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__class = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__class_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__class = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__class_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__class = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__class_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__class = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__class_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__class = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__class_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__class = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__class_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__class = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_element_name_73;
    PyObject *tmp_args_element_name_74;
    PyObject *tmp_args_element_name_75;
    PyObject *tmp_args_element_name_76;
    PyObject *tmp_args_element_name_77;
    PyObject *tmp_args_element_name_78;
    PyObject *tmp_args_element_name_79;
    PyObject *tmp_args_element_name_80;
    PyObject *tmp_args_element_name_81;
    PyObject *tmp_args_element_name_82;
    PyObject *tmp_args_element_name_83;
    PyObject *tmp_args_element_name_84;
    PyObject *tmp_args_element_name_85;
    PyObject *tmp_args_element_name_86;
    PyObject *tmp_args_element_name_87;
    PyObject *tmp_args_element_name_88;
    PyObject *tmp_args_element_name_89;
    PyObject *tmp_args_element_name_90;
    PyObject *tmp_args_element_name_91;
    PyObject *tmp_args_element_name_92;
    PyObject *tmp_args_element_name_93;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_name_7;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assattr_target_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_bases_name_2;
    PyObject *tmp_bases_name_3;
    PyObject *tmp_bases_name_4;
    PyObject *tmp_bases_name_5;
    PyObject *tmp_bases_name_6;
    PyObject *tmp_bases_name_7;
    PyObject *tmp_bases_name_8;
    PyObject *tmp_bases_name_9;
    PyObject *tmp_bases_name_10;
    PyObject *tmp_bases_name_11;
    PyObject *tmp_bases_name_12;
    PyObject *tmp_bases_name_13;
    PyObject *tmp_bases_name_14;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    PyObject *tmp_called_name_83;
    PyObject *tmp_called_name_84;
    PyObject *tmp_called_name_85;
    PyObject *tmp_called_name_86;
    PyObject *tmp_called_name_87;
    PyObject *tmp_called_name_88;
    PyObject *tmp_called_name_89;
    PyObject *tmp_called_name_90;
    PyObject *tmp_called_name_91;
    PyObject *tmp_called_name_92;
    PyObject *tmp_called_name_93;
    PyObject *tmp_called_name_94;
    PyObject *tmp_called_name_95;
    PyObject *tmp_called_name_96;
    PyObject *tmp_called_name_97;
    PyObject *tmp_called_name_98;
    PyObject *tmp_called_name_99;
    PyObject *tmp_called_name_100;
    PyObject *tmp_called_name_101;
    PyObject *tmp_called_name_102;
    PyObject *tmp_called_name_103;
    PyObject *tmp_called_name_104;
    PyObject *tmp_called_name_105;
    PyObject *tmp_called_name_106;
    PyObject *tmp_called_name_107;
    PyObject *tmp_called_name_108;
    PyObject *tmp_called_name_109;
    PyObject *tmp_called_name_110;
    PyObject *tmp_called_name_111;
    PyObject *tmp_called_name_112;
    PyObject *tmp_called_name_113;
    PyObject *tmp_called_name_114;
    PyObject *tmp_called_name_115;
    PyObject *tmp_called_name_116;
    PyObject *tmp_called_name_117;
    PyObject *tmp_called_name_118;
    PyObject *tmp_called_name_119;
    PyObject *tmp_called_name_120;
    PyObject *tmp_called_name_121;
    PyObject *tmp_called_name_122;
    PyObject *tmp_called_name_123;
    PyObject *tmp_called_name_124;
    PyObject *tmp_called_name_125;
    PyObject *tmp_called_name_126;
    PyObject *tmp_called_name_127;
    PyObject *tmp_called_name_128;
    PyObject *tmp_called_name_129;
    PyObject *tmp_called_name_130;
    PyObject *tmp_called_name_131;
    PyObject *tmp_called_name_132;
    PyObject *tmp_called_name_133;
    PyObject *tmp_called_name_134;
    PyObject *tmp_called_name_135;
    PyObject *tmp_called_name_136;
    PyObject *tmp_called_name_137;
    PyObject *tmp_called_name_138;
    PyObject *tmp_called_name_139;
    PyObject *tmp_called_name_140;
    PyObject *tmp_called_name_141;
    PyObject *tmp_called_name_142;
    PyObject *tmp_called_name_143;
    PyObject *tmp_called_name_144;
    PyObject *tmp_called_name_145;
    PyObject *tmp_called_name_146;
    PyObject *tmp_called_name_147;
    PyObject *tmp_called_name_148;
    PyObject *tmp_called_name_149;
    PyObject *tmp_called_name_150;
    PyObject *tmp_called_name_151;
    PyObject *tmp_called_name_152;
    PyObject *tmp_called_name_153;
    PyObject *tmp_called_name_154;
    PyObject *tmp_called_name_155;
    PyObject *tmp_called_name_156;
    PyObject *tmp_called_name_157;
    PyObject *tmp_called_name_158;
    PyObject *tmp_called_name_159;
    PyObject *tmp_called_name_160;
    PyObject *tmp_called_name_161;
    PyObject *tmp_called_name_162;
    PyObject *tmp_called_name_163;
    PyObject *tmp_called_name_164;
    PyObject *tmp_called_name_165;
    PyObject *tmp_called_name_166;
    PyObject *tmp_called_name_167;
    PyObject *tmp_called_name_168;
    PyObject *tmp_called_name_169;
    PyObject *tmp_called_name_170;
    PyObject *tmp_called_name_171;
    PyObject *tmp_called_name_172;
    PyObject *tmp_called_name_173;
    PyObject *tmp_called_name_174;
    PyObject *tmp_called_name_175;
    PyObject *tmp_called_name_176;
    PyObject *tmp_called_name_177;
    PyObject *tmp_called_name_178;
    PyObject *tmp_called_name_179;
    PyObject *tmp_called_name_180;
    PyObject *tmp_called_name_181;
    PyObject *tmp_called_name_182;
    PyObject *tmp_called_name_183;
    PyObject *tmp_called_name_184;
    PyObject *tmp_called_name_185;
    PyObject *tmp_called_name_186;
    PyObject *tmp_called_name_187;
    PyObject *tmp_called_name_188;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Gt_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_Lt_1;
    int tmp_cmp_Lt_2;
    int tmp_cmp_LtE_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_name_2;
    PyObject *tmp_dict_name_3;
    PyObject *tmp_dict_name_4;
    PyObject *tmp_dict_name_5;
    PyObject *tmp_dict_name_6;
    PyObject *tmp_dict_name_7;
    PyObject *tmp_dict_name_8;
    PyObject *tmp_dict_name_9;
    PyObject *tmp_dict_name_10;
    PyObject *tmp_dict_name_11;
    PyObject *tmp_dict_name_12;
    PyObject *tmp_dict_name_13;
    PyObject *tmp_dict_name_14;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_attr_2;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_getattr_target_2;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    bool tmp_is_1;
    bool tmp_is_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_key_name_1;
    PyObject *tmp_key_name_2;
    PyObject *tmp_key_name_3;
    PyObject *tmp_key_name_4;
    PyObject *tmp_key_name_5;
    PyObject *tmp_key_name_6;
    PyObject *tmp_key_name_7;
    PyObject *tmp_key_name_8;
    PyObject *tmp_key_name_9;
    PyObject *tmp_key_name_10;
    PyObject *tmp_key_name_11;
    PyObject *tmp_key_name_12;
    PyObject *tmp_key_name_13;
    PyObject *tmp_key_name_14;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_list_element_7;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_attr_2;
    PyObject *tmp_setattr_attr_3;
    PyObject *tmp_setattr_attr_4;
    PyObject *tmp_setattr_attr_5;
    PyObject *tmp_setattr_attr_6;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_target_2;
    PyObject *tmp_setattr_target_3;
    PyObject *tmp_setattr_target_4;
    PyObject *tmp_setattr_target_5;
    PyObject *tmp_setattr_target_6;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_setattr_value_2;
    PyObject *tmp_setattr_value_3;
    PyObject *tmp_setattr_value_4;
    PyObject *tmp_setattr_value_5;
    PyObject *tmp_setattr_value_6;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = const_str_digest_97d8b3849ccb4841962c7ac18f0af059;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_07471a17cf805229414e895d873904c1;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = PyObject_GetAttrString(PyImport_ImportModule("__future__"), "absolute_import");
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_3 );
    // Frame without reuse.
    frame_module = MAKE_MODULE_FRAME( codeobj_2a3765dbbb7345284d145a6625761014, module_six );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 25;
    tmp_assign_source_4 = IMPORT_MODULE( const_str_plain_functools, tmp_import_globals_1, tmp_import_globals_1, Py_None, const_int_0 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools, tmp_assign_source_4 );
    tmp_import_globals_2 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 26;
    tmp_assign_source_5 = IMPORT_MODULE( const_str_plain_itertools, tmp_import_globals_2, tmp_import_globals_2, Py_None, const_int_0 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_5 );
    tmp_import_globals_3 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 27;
    tmp_assign_source_6 = IMPORT_MODULE( const_str_plain_operator, tmp_import_globals_3, tmp_import_globals_3, Py_None, const_int_0 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 27;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator, tmp_assign_source_6 );
    tmp_import_globals_4 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 28;
    tmp_assign_source_7 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_4, tmp_import_globals_4, Py_None, const_int_0 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_7 );
    tmp_import_globals_5 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 29;
    tmp_assign_source_8 = IMPORT_MODULE( const_str_plain_types, tmp_import_globals_5, tmp_import_globals_5, Py_None, const_int_0 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 29;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_types, tmp_assign_source_8 );
    tmp_assign_source_9 = const_str_digest_8f714300b54df1f07c5ea6ab3e1ef1e0;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___author__, tmp_assign_source_9 );
    tmp_assign_source_10 = const_str_digest_b0187e473195d5f4e7f8d9079ea0b7b3;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_10 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 36;
        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_int_0;
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_int_pos_2;
    tmp_assign_source_11 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY2, tmp_assign_source_11 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 37;
        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_version_info );
    if ( tmp_subscribed_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_2 = const_int_0;
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscribed_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_2 = const_int_pos_3;
    tmp_assign_source_12 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3, tmp_assign_source_12 );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 2;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 38;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_version_info );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_3 = const_tuple_int_pos_3_int_pos_4_tuple;
    tmp_assign_source_13 = RICH_COMPARE_GE( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY34, tmp_assign_source_13 );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 40;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 40;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_14 = PyTuple_New( 1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_tuple_element_1 != NULL );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_14, 0, tmp_tuple_element_1 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_string_types, tmp_assign_source_14 );
    tmp_assign_source_15 = PyTuple_New( 1 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_int );
    assert( tmp_tuple_element_2 != NULL );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_15, 0, tmp_tuple_element_2 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_integer_types, tmp_assign_source_15 );
    tmp_assign_source_16 = PyTuple_New( 1 );
    tmp_tuple_element_3 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_tuple_element_3 != NULL );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_assign_source_16, 0, tmp_tuple_element_3 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_class_types, tmp_assign_source_16 );
    tmp_assign_source_17 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_assign_source_17 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_17 );
    tmp_assign_source_18 = LOOKUP_BUILTIN( const_str_plain_bytes );
    assert( tmp_assign_source_18 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_binary_type, tmp_assign_source_18 );
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_19 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_maxsize );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_19 );
    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_20 = PyTuple_New( 1 );
    tmp_tuple_element_4 = LOOKUP_BUILTIN( const_str_plain_basestring );
    assert( tmp_tuple_element_4 != NULL );
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_assign_source_20, 0, tmp_tuple_element_4 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_string_types, tmp_assign_source_20 );
    tmp_assign_source_21 = PyTuple_New( 2 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_int );
    assert( tmp_tuple_element_5 != NULL );
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_21, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_long );
    assert( tmp_tuple_element_5 != NULL );
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_21, 1, tmp_tuple_element_5 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_integer_types, tmp_assign_source_21 );
    tmp_assign_source_22 = PyTuple_New( 2 );
    tmp_tuple_element_6 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_tuple_element_6 != NULL );
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_assign_source_22, 0, tmp_tuple_element_6 );
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_22 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 51;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_ClassType );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_22 );

        exception_lineno = 51;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_22, 1, tmp_tuple_element_6 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_class_types, tmp_assign_source_22 );
    tmp_assign_source_23 = LOOKUP_BUILTIN( const_str_plain_unicode );
    assert( tmp_assign_source_23 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_23 );
    tmp_assign_source_24 = LOOKUP_BUILTIN( const_str_plain_str );
    assert( tmp_assign_source_24 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_binary_type, tmp_assign_source_24 );
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 55;
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_platform );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_startswith );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 55;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_plain_java_tuple, 0 ) );

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 55;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_25 = const_int_pos_2147483647;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_25 );
    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_26 = PyTuple_New( 1 );
    tmp_tuple_element_7 = LOOKUP_BUILTIN( const_str_plain_object );
    assert( tmp_tuple_element_7 != NULL );
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_26, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_26;

    tmp_assign_source_27 = impl_six$$$class_1_X( NULL );
    assert( tmp_assign_source_27 != NULL );
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_27;

    // Tried code:
    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_28 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto try_except_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_bases_name_1 = tmp_class_creation_1__bases;

    tmp_assign_source_28 = SELECT_METACLASS( tmp_bases_name_1, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_28;

    tmp_called_name_2 = tmp_class_creation_1__metaclass;

    tmp_args_element_name_1 = const_str_plain_X;
    tmp_args_element_name_2 = tmp_class_creation_1__bases;

    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    frame_module->f_lineno = 60;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_29 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto try_except_handler_1;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_29;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_30 = tmp_class_creation_1__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_X, tmp_assign_source_30 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    tmp_assign_source_31 = Py_True;
    assert( tmp_try_except_1__unhandled_indicator == NULL );
    Py_INCREF( tmp_assign_source_31 );
    tmp_try_except_1__unhandled_indicator = tmp_assign_source_31;

    // Tried code:
    // Tried code:
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_X );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "X" );
        exception_tb = NULL;

        exception_lineno = 65;
        goto try_except_handler_3;
    }

    frame_module->f_lineno = 65;
    tmp_len_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_3;
    }
    tmp_unused = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    tmp_assign_source_32 = Py_False;
    {
        PyObject *old = tmp_try_except_1__unhandled_indicator;
        assert( old != NULL );
        tmp_try_except_1__unhandled_indicator = tmp_assign_source_32;
        Py_INCREF( tmp_try_except_1__unhandled_indicator );
        Py_DECREF( old );
    }

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_module, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != -1 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_module, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_OverflowError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 66;
        goto try_except_handler_2;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_33 = const_int_pos_2147483647;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_33 );
    goto branch_end_3;
    branch_no_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_module) frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_except_handler_2;
    branch_end_3:;
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    tmp_compare_left_3 = tmp_try_except_1__unhandled_indicator;

    tmp_compare_right_3 = Py_True;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_34 = const_int_pos_9223372036854775807;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_34 );
    branch_no_4:;
    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_X );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1779 ], 23, 0 );
        exception_tb = NULL;

        exception_lineno = 72;
        goto frame_exception_exit_1;
    }

    branch_end_2:;
    branch_end_1:;
    tmp_assign_source_35 = MAKE_FUNCTION_six$$$function_1__add_doc(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc, tmp_assign_source_35 );
    tmp_assign_source_36 = MAKE_FUNCTION_six$$$function_2__import_module(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module, tmp_assign_source_36 );
    tmp_assign_source_37 = PyTuple_New( 1 );
    tmp_tuple_element_8 = LOOKUP_BUILTIN( const_str_plain_object );
    assert( tmp_tuple_element_8 != NULL );
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_assign_source_37, 0, tmp_tuple_element_8 );
    assert( tmp_class_creation_2__bases == NULL );
    tmp_class_creation_2__bases = tmp_assign_source_37;

    tmp_assign_source_38 = impl_six$$$class_2__LazyDescr( NULL );
    assert( tmp_assign_source_38 != NULL );
    assert( tmp_class_creation_2__class_dict == NULL );
    tmp_class_creation_2__class_dict = tmp_assign_source_38;

    // Tried code:
    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_2__class_dict;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dict_name_2 = tmp_class_creation_2__class_dict;

    tmp_key_name_2 = const_str_plain___metaclass__;
    tmp_assign_source_39 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_4;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_bases_name_2 = tmp_class_creation_2__bases;

    tmp_assign_source_39 = SELECT_METACLASS( tmp_bases_name_2, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass == NULL );
    tmp_class_creation_2__metaclass = tmp_assign_source_39;

    tmp_called_name_4 = tmp_class_creation_2__metaclass;

    tmp_args_element_name_4 = const_str_plain__LazyDescr;
    tmp_args_element_name_5 = tmp_class_creation_2__bases;

    tmp_args_element_name_6 = tmp_class_creation_2__class_dict;

    frame_module->f_lineno = 86;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_4;
    }
    assert( tmp_class_creation_2__class == NULL );
    tmp_class_creation_2__class = tmp_assign_source_40;

    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    tmp_assign_source_41 = tmp_class_creation_2__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr, tmp_assign_source_41 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class );
    Py_DECREF( tmp_class_creation_2__class );
    tmp_class_creation_2__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Tried code:
    tmp_assign_source_42 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyDescr );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_42 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyDescr" );
        exception_tb = NULL;

        exception_lineno = 103;
        goto try_except_handler_5;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_42, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_3__bases == NULL );
    tmp_class_creation_3__bases = tmp_assign_source_42;

    tmp_assign_source_43 = impl_six$$$class_3_MovedModule( NULL );
    assert( tmp_assign_source_43 != NULL );
    assert( tmp_class_creation_3__class_dict == NULL );
    tmp_class_creation_3__class_dict = tmp_assign_source_43;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_3__class_dict;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dict_name_3 = tmp_class_creation_3__class_dict;

    tmp_key_name_3 = const_str_plain___metaclass__;
    tmp_assign_source_44 = DICT_GET_ITEM( tmp_dict_name_3, tmp_key_name_3 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_5;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_bases_name_3 = tmp_class_creation_3__bases;

    tmp_assign_source_44 = SELECT_METACLASS( tmp_bases_name_3, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_3:;
    assert( tmp_class_creation_3__metaclass == NULL );
    tmp_class_creation_3__metaclass = tmp_assign_source_44;

    tmp_called_name_5 = tmp_class_creation_3__metaclass;

    tmp_args_element_name_7 = const_str_plain_MovedModule;
    tmp_args_element_name_8 = tmp_class_creation_3__bases;

    tmp_args_element_name_9 = tmp_class_creation_3__class_dict;

    frame_module->f_lineno = 103;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_assign_source_45 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_5;
    }
    assert( tmp_class_creation_3__class == NULL );
    tmp_class_creation_3__class = tmp_assign_source_45;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    tmp_assign_source_46 = tmp_class_creation_3__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule, tmp_assign_source_46 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class );
    Py_DECREF( tmp_class_creation_3__class );
    tmp_class_creation_3__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_dict );
    Py_DECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Tried code:
    tmp_assign_source_47 = PyTuple_New( 1 );
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_47 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 124;
        goto try_except_handler_6;
    }

    tmp_tuple_element_10 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_ModuleType );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_47 );

        exception_lineno = 124;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_assign_source_47, 0, tmp_tuple_element_10 );
    assert( tmp_class_creation_4__bases == NULL );
    tmp_class_creation_4__bases = tmp_assign_source_47;

    tmp_assign_source_48 = impl_six$$$class_4__LazyModule( NULL );
    assert( tmp_assign_source_48 != NULL );
    assert( tmp_class_creation_4__class_dict == NULL );
    tmp_class_creation_4__class_dict = tmp_assign_source_48;

    tmp_compare_left_6 = const_str_plain___metaclass__;
    tmp_compare_right_6 = tmp_class_creation_4__class_dict;

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dict_name_4 = tmp_class_creation_4__class_dict;

    tmp_key_name_4 = const_str_plain___metaclass__;
    tmp_assign_source_49 = DICT_GET_ITEM( tmp_dict_name_4, tmp_key_name_4 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;
        goto try_except_handler_6;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_bases_name_4 = tmp_class_creation_4__bases;

    tmp_assign_source_49 = SELECT_METACLASS( tmp_bases_name_4, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_4:;
    assert( tmp_class_creation_4__metaclass == NULL );
    tmp_class_creation_4__metaclass = tmp_assign_source_49;

    tmp_called_name_6 = tmp_class_creation_4__metaclass;

    tmp_args_element_name_10 = const_str_plain__LazyModule;
    tmp_args_element_name_11 = tmp_class_creation_4__bases;

    tmp_args_element_name_12 = tmp_class_creation_4__class_dict;

    frame_module->f_lineno = 124;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;
        goto try_except_handler_6;
    }
    assert( tmp_class_creation_4__class == NULL );
    tmp_class_creation_4__class = tmp_assign_source_50;

    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    tmp_assign_source_51 = tmp_class_creation_4__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule, tmp_assign_source_51 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class );
    Py_DECREF( tmp_class_creation_4__class );
    tmp_class_creation_4__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_dict );
    Py_DECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Tried code:
    tmp_assign_source_52 = PyTuple_New( 1 );
    tmp_tuple_element_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr );

    if (unlikely( tmp_tuple_element_11 == NULL ))
    {
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyDescr );
    }

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_52 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyDescr" );
        exception_tb = NULL;

        exception_lineno = 139;
        goto try_except_handler_7;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_assign_source_52, 0, tmp_tuple_element_11 );
    assert( tmp_class_creation_5__bases == NULL );
    tmp_class_creation_5__bases = tmp_assign_source_52;

    tmp_assign_source_53 = impl_six$$$class_5_MovedAttribute( NULL );
    assert( tmp_assign_source_53 != NULL );
    assert( tmp_class_creation_5__class_dict == NULL );
    tmp_class_creation_5__class_dict = tmp_assign_source_53;

    tmp_compare_left_7 = const_str_plain___metaclass__;
    tmp_compare_right_7 = tmp_class_creation_5__class_dict;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_dict_name_5 = tmp_class_creation_5__class_dict;

    tmp_key_name_5 = const_str_plain___metaclass__;
    tmp_assign_source_54 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        goto try_except_handler_7;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_bases_name_5 = tmp_class_creation_5__bases;

    tmp_assign_source_54 = SELECT_METACLASS( tmp_bases_name_5, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_5:;
    assert( tmp_class_creation_5__metaclass == NULL );
    tmp_class_creation_5__metaclass = tmp_assign_source_54;

    tmp_called_name_7 = tmp_class_creation_5__metaclass;

    tmp_args_element_name_13 = const_str_plain_MovedAttribute;
    tmp_args_element_name_14 = tmp_class_creation_5__bases;

    tmp_args_element_name_15 = tmp_class_creation_5__class_dict;

    frame_module->f_lineno = 139;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
    }

    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        goto try_except_handler_7;
    }
    assert( tmp_class_creation_5__class == NULL );
    tmp_class_creation_5__class = tmp_assign_source_55;

    goto try_end_7;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    tmp_assign_source_56 = tmp_class_creation_5__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute, tmp_assign_source_56 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class );
    Py_DECREF( tmp_class_creation_5__class );
    tmp_class_creation_5__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_dict );
    Py_DECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    tmp_assign_source_57 = PyTuple_New( 1 );
    tmp_tuple_element_12 = LOOKUP_BUILTIN( const_str_plain_object );
    assert( tmp_tuple_element_12 != NULL );
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_assign_source_57, 0, tmp_tuple_element_12 );
    assert( tmp_class_creation_6__bases == NULL );
    tmp_class_creation_6__bases = tmp_assign_source_57;

    tmp_assign_source_58 = impl_six$$$class_6__SixMetaPathImporter( NULL );
    assert( tmp_assign_source_58 != NULL );
    assert( tmp_class_creation_6__class_dict == NULL );
    tmp_class_creation_6__class_dict = tmp_assign_source_58;

    // Tried code:
    tmp_compare_left_8 = const_str_plain___metaclass__;
    tmp_compare_right_8 = tmp_class_creation_6__class_dict;

    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_dict_name_6 = tmp_class_creation_6__class_dict;

    tmp_key_name_6 = const_str_plain___metaclass__;
    tmp_assign_source_59 = DICT_GET_ITEM( tmp_dict_name_6, tmp_key_name_6 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;
        goto try_except_handler_8;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_bases_name_6 = tmp_class_creation_6__bases;

    tmp_assign_source_59 = SELECT_METACLASS( tmp_bases_name_6, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_6:;
    assert( tmp_class_creation_6__metaclass == NULL );
    tmp_class_creation_6__metaclass = tmp_assign_source_59;

    tmp_called_name_8 = tmp_class_creation_6__metaclass;

    tmp_args_element_name_16 = const_str_plain__SixMetaPathImporter;
    tmp_args_element_name_17 = tmp_class_creation_6__bases;

    tmp_args_element_name_18 = tmp_class_creation_6__class_dict;

    frame_module->f_lineno = 164;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
        tmp_assign_source_60 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, call_args );
    }

    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;
        goto try_except_handler_8;
    }
    assert( tmp_class_creation_6__class == NULL );
    tmp_class_creation_6__class = tmp_assign_source_60;

    goto try_end_8;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    tmp_assign_source_61 = tmp_class_creation_6__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter, tmp_assign_source_61 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class );
    Py_DECREF( tmp_class_creation_6__class );
    tmp_class_creation_6__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter );
    }

    if ( tmp_called_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_SixMetaPathImporter" );
        exception_tb = NULL;

        exception_lineno = 226;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 226;
    tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_str_plain_six_tuple, 0 ) );

    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer, tmp_assign_source_62 );
    // Tried code:
    tmp_assign_source_63 = PyTuple_New( 1 );
    tmp_tuple_element_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_13 == NULL ))
    {
        tmp_tuple_element_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 229;
        goto try_except_handler_9;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_assign_source_63, 0, tmp_tuple_element_13 );
    assert( tmp_class_creation_7__bases == NULL );
    tmp_class_creation_7__bases = tmp_assign_source_63;

    tmp_assign_source_64 = impl_six$$$class_7__MovedItems( NULL );
    assert( tmp_assign_source_64 != NULL );
    assert( tmp_class_creation_7__class_dict == NULL );
    tmp_class_creation_7__class_dict = tmp_assign_source_64;

    tmp_compare_left_9 = const_str_plain___metaclass__;
    tmp_compare_right_9 = tmp_class_creation_7__class_dict;

    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dict_name_7 = tmp_class_creation_7__class_dict;

    tmp_key_name_7 = const_str_plain___metaclass__;
    tmp_assign_source_65 = DICT_GET_ITEM( tmp_dict_name_7, tmp_key_name_7 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;
        goto try_except_handler_9;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_bases_name_7 = tmp_class_creation_7__bases;

    tmp_assign_source_65 = SELECT_METACLASS( tmp_bases_name_7, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_7:;
    assert( tmp_class_creation_7__metaclass == NULL );
    tmp_class_creation_7__metaclass = tmp_assign_source_65;

    tmp_called_name_10 = tmp_class_creation_7__metaclass;

    tmp_args_element_name_19 = const_str_plain__MovedItems;
    tmp_args_element_name_20 = tmp_class_creation_7__bases;

    tmp_args_element_name_21 = tmp_class_creation_7__class_dict;

    frame_module->f_lineno = 229;
    {
        PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21 };
        tmp_assign_source_66 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_10, call_args );
    }

    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;
        goto try_except_handler_9;
    }
    assert( tmp_class_creation_7__class == NULL );
    tmp_class_creation_7__class = tmp_assign_source_66;

    goto try_end_9;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    tmp_assign_source_67 = tmp_class_creation_7__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems, tmp_assign_source_67 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class );
    Py_DECREF( tmp_class_creation_7__class );
    tmp_class_creation_7__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_dict );
    Py_DECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    tmp_assign_source_68 = PyList_New( 62 );
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 236;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 236;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 0, tmp_list_element_1 );
    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 237;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 1, tmp_list_element_1 );
    tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_13 == NULL ))
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 238;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 238;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_13, &PyTuple_GET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 238;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 2, tmp_list_element_1 );
    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 239;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 239;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 239;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 3, tmp_list_element_1 );
    tmp_called_name_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_15 == NULL ))
    {
        tmp_called_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 240;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 240;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 240;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 4, tmp_list_element_1 );
    tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_16 == NULL ))
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 241;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 241;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_16, &PyTuple_GET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 5, tmp_list_element_1 );
    tmp_called_name_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_17 == NULL ))
    {
        tmp_called_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 242;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_17, &PyTuple_GET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 6, tmp_list_element_1 );
    tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_18 == NULL ))
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 243;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 243;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_18, &PyTuple_GET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 243;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 7, tmp_list_element_1 );
    tmp_called_name_19 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_19 == NULL ))
    {
        tmp_called_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 244;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 244;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_19, &PyTuple_GET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 244;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 8, tmp_list_element_1 );
    tmp_called_name_20 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_20 == NULL ))
    {
        tmp_called_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_22 = const_str_plain_reload_module;
    tmp_args_element_name_23 = const_str_plain___builtin__;
    tmp_cond_value_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY34 );

    if (unlikely( tmp_cond_value_3 == NULL ))
    {
        tmp_cond_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY34 );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY34" );
        exception_tb = NULL;

        exception_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 245;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_args_element_name_24 = const_str_plain_importlib;
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_args_element_name_24 = const_str_plain_imp;
    condexpr_end_8:;
    tmp_args_element_name_25 = const_str_plain_reload;
    frame_module->f_lineno = 245;
    {
        PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_20, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 245;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 9, tmp_list_element_1 );
    tmp_called_name_21 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_21 == NULL ))
    {
        tmp_called_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 246;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 246;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_21, &PyTuple_GET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 246;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 10, tmp_list_element_1 );
    tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_22 == NULL ))
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 247;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_22, &PyTuple_GET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 11, tmp_list_element_1 );
    tmp_called_name_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_23 == NULL ))
    {
        tmp_called_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 248;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 248;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_23, &PyTuple_GET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 248;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 12, tmp_list_element_1 );
    tmp_called_name_24 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_24 == NULL ))
    {
        tmp_called_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 249;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 249;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_24, &PyTuple_GET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 249;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 13, tmp_list_element_1 );
    tmp_called_name_25 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_25 == NULL ))
    {
        tmp_called_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 250;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 250;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_25, &PyTuple_GET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 250;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 14, tmp_list_element_1 );
    tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_26 == NULL ))
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 251;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 251;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_26, &PyTuple_GET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 251;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 15, tmp_list_element_1 );
    tmp_called_name_27 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_27 == NULL ))
    {
        tmp_called_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 252;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_27, &PyTuple_GET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 16, tmp_list_element_1 );
    tmp_called_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_28 == NULL ))
    {
        tmp_called_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 253;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_28, &PyTuple_GET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 17, tmp_list_element_1 );
    tmp_called_name_29 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_29 == NULL ))
    {
        tmp_called_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 254;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 254;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_29, &PyTuple_GET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 254;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 18, tmp_list_element_1 );
    tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_30 == NULL ))
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 255;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 255;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_30, &PyTuple_GET_ITEM( const_tuple_str_plain_builtins_str_plain___builtin___tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 255;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 19, tmp_list_element_1 );
    tmp_called_name_31 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_31 == NULL ))
    {
        tmp_called_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 256;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 256;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_31, &PyTuple_GET_ITEM( const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 256;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 20, tmp_list_element_1 );
    tmp_called_name_32 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_32 == NULL ))
    {
        tmp_called_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 257;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_32, &PyTuple_GET_ITEM( const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 21, tmp_list_element_1 );
    tmp_called_name_33 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_33 == NULL ))
    {
        tmp_called_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 258;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_33, &PyTuple_GET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 22, tmp_list_element_1 );
    tmp_called_name_34 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_34 == NULL ))
    {
        tmp_called_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 259;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 259;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_34, &PyTuple_GET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 259;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 23, tmp_list_element_1 );
    tmp_called_name_35 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_35 == NULL ))
    {
        tmp_called_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 260;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_35, &PyTuple_GET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 260;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 24, tmp_list_element_1 );
    tmp_called_name_36 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_36 == NULL ))
    {
        tmp_called_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 261;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 261;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_36, &PyTuple_GET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 25, tmp_list_element_1 );
    tmp_called_name_37 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_37 == NULL ))
    {
        tmp_called_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 262;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 262;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_37, &PyTuple_GET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 262;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 26, tmp_list_element_1 );
    tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_38 == NULL ))
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 263;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 263;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_38, &PyTuple_GET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 27, tmp_list_element_1 );
    tmp_called_name_39 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_39 == NULL ))
    {
        tmp_called_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_39 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 264;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 264;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_39, &PyTuple_GET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 28, tmp_list_element_1 );
    tmp_called_name_40 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_40 == NULL ))
    {
        tmp_called_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 265;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 265;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_40, &PyTuple_GET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 265;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 29, tmp_list_element_1 );
    tmp_called_name_41 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_41 == NULL ))
    {
        tmp_called_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_41 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 266;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_41, &PyTuple_GET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 30, tmp_list_element_1 );
    tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_42 == NULL ))
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 267;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 267;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_42, &PyTuple_GET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 267;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 31, tmp_list_element_1 );
    tmp_called_name_43 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_43 == NULL ))
    {
        tmp_called_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 268;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 268;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_43, &PyTuple_GET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 268;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 32, tmp_list_element_1 );
    tmp_called_name_44 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_44 == NULL ))
    {
        tmp_called_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_44 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 269;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_44, &PyTuple_GET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 33, tmp_list_element_1 );
    tmp_called_name_45 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_45 == NULL ))
    {
        tmp_called_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 270;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 270;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_45, &PyTuple_GET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 270;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 34, tmp_list_element_1 );
    tmp_called_name_46 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_46 == NULL ))
    {
        tmp_called_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 271;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 271;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_46, &PyTuple_GET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 271;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 35, tmp_list_element_1 );
    tmp_called_name_47 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_47 == NULL ))
    {
        tmp_called_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_47 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 272;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 272;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_47, &PyTuple_GET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 272;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 36, tmp_list_element_1 );
    tmp_called_name_48 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_48 == NULL ))
    {
        tmp_called_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 273;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_48, &PyTuple_GET_ITEM( const_tuple_str_plain_queue_str_plain_Queue_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 37, tmp_list_element_1 );
    tmp_called_name_49 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_49 == NULL ))
    {
        tmp_called_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 274;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 274;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_49, &PyTuple_GET_ITEM( const_tuple_str_plain_reprlib_str_plain_repr_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 274;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 38, tmp_list_element_1 );
    tmp_called_name_50 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_50 == NULL ))
    {
        tmp_called_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_50 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 275;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 275;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_50, &PyTuple_GET_ITEM( const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 275;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 39, tmp_list_element_1 );
    tmp_called_name_51 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_51 == NULL ))
    {
        tmp_called_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 276;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 276;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_51, &PyTuple_GET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 276;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 40, tmp_list_element_1 );
    tmp_called_name_52 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_52 == NULL ))
    {
        tmp_called_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 277;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 277;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_52, &PyTuple_GET_ITEM( const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 277;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 41, tmp_list_element_1 );
    tmp_called_name_53 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_53 == NULL ))
    {
        tmp_called_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_53 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 278;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_53, &PyTuple_GET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 42, tmp_list_element_1 );
    tmp_called_name_54 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_54 == NULL ))
    {
        tmp_called_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 279;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_54, &PyTuple_GET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 279;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 43, tmp_list_element_1 );
    tmp_called_name_55 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_55 == NULL ))
    {
        tmp_called_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 280;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 280;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_55, &PyTuple_GET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 44, tmp_list_element_1 );
    tmp_called_name_56 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_56 == NULL ))
    {
        tmp_called_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_56 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 281;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 281;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_56, &PyTuple_GET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 281;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 45, tmp_list_element_1 );
    tmp_called_name_57 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_57 == NULL ))
    {
        tmp_called_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 282;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 282;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_57, &PyTuple_GET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 282;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 46, tmp_list_element_1 );
    tmp_called_name_58 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_58 == NULL ))
    {
        tmp_called_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 283;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 283;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_58, &PyTuple_GET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 283;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 47, tmp_list_element_1 );
    tmp_called_name_59 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_59 == NULL ))
    {
        tmp_called_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_59 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 284;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 284;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_59, &PyTuple_GET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 284;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 48, tmp_list_element_1 );
    tmp_called_name_60 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_60 == NULL ))
    {
        tmp_called_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 285;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 285;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_60, &PyTuple_GET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 285;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 49, tmp_list_element_1 );
    tmp_called_name_61 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_61 == NULL ))
    {
        tmp_called_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 287;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_61, &PyTuple_GET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 50, tmp_list_element_1 );
    tmp_called_name_62 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_62 == NULL ))
    {
        tmp_called_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_62 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 289;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_62, &PyTuple_GET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 289;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 51, tmp_list_element_1 );
    tmp_called_name_63 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_63 == NULL ))
    {
        tmp_called_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 290;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 290;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_63, &PyTuple_GET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 290;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 52, tmp_list_element_1 );
    tmp_called_name_64 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_64 == NULL ))
    {
        tmp_called_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 291;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_64, &PyTuple_GET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 53, tmp_list_element_1 );
    tmp_called_name_65 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_65 == NULL ))
    {
        tmp_called_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_65 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 292;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_65, &PyTuple_GET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 54, tmp_list_element_1 );
    tmp_called_name_66 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_66 == NULL ))
    {
        tmp_called_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 293;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 294;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_66, &PyTuple_GET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 294;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 55, tmp_list_element_1 );
    tmp_called_name_67 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_67 == NULL ))
    {
        tmp_called_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 295;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 295;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_67, &PyTuple_GET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 295;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 56, tmp_list_element_1 );
    tmp_called_name_68 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_68 == NULL ))
    {
        tmp_called_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_68 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 296;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 296;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_68, &PyTuple_GET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 296;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 57, tmp_list_element_1 );
    tmp_called_name_69 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_69 == NULL ))
    {
        tmp_called_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 297;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 297;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_69, &PyTuple_GET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 58, tmp_list_element_1 );
    tmp_called_name_70 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_70 == NULL ))
    {
        tmp_called_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_70 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 298;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 298;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_70, &PyTuple_GET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 298;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 59, tmp_list_element_1 );
    tmp_called_name_71 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_71 == NULL ))
    {
        tmp_called_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_71 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 299;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 299;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_71, &PyTuple_GET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 299;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 60, tmp_list_element_1 );
    tmp_called_name_72 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_72 == NULL ))
    {
        tmp_called_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_72 == NULL )
    {
        Py_DECREF( tmp_assign_source_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 300;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_72, &PyTuple_GET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_68 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_68, 61, tmp_list_element_1 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes, tmp_assign_source_68 );
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_10 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_platform );
    if ( tmp_compare_left_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_10 = const_str_plain_win32;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_10 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_10 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_left_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_left_name_1 == NULL ))
    {
        tmp_left_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_left_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 304;
        goto frame_exception_exit_1;
    }

    tmp_right_name_1 = PyList_New( 1 );
    tmp_called_name_73 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_73 == NULL ))
    {
        tmp_called_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_73 == NULL )
    {
        Py_DECREF( tmp_right_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 305;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_73, &PyTuple_GET_ITEM( const_tuple_str_plain_winreg_str_plain__winreg_tuple, 0 ) );

    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_right_name_1, 0, tmp_list_element_2 );
    tmp_assign_source_69 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes, tmp_assign_source_69 );
    branch_no_5:;
    tmp_iter_arg_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_iter_arg_1 == NULL ))
    {
        tmp_iter_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_70 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_70;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_71 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_71 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 308;
            goto try_except_handler_10;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_71;
        Py_XDECREF( old );
    }

    tmp_assign_source_72 = tmp_for_loop_1__iter_value;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_72 );
    tmp_setattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_setattr_target_1 == NULL ))
    {
        tmp_setattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 309;
        goto try_except_handler_10;
    }

    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 309;
        goto try_except_handler_10;
    }

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_10;
    }
    tmp_setattr_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_1 == NULL ))
    {
        tmp_setattr_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_1 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 309;
        goto try_except_handler_10;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_10;
    }
    tmp_isinstance_inst_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_isinstance_inst_1 == NULL ))
    {
        tmp_isinstance_inst_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 310;
        goto try_except_handler_10;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 310;
        goto try_except_handler_10;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        goto try_except_handler_10;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 311;
        goto try_except_handler_10;
    }

    tmp_called_name_74 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__add_module );
    if ( tmp_called_name_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 311;
        goto try_except_handler_10;
    }
    tmp_args_element_name_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_args_element_name_26 == NULL ))
    {
        tmp_args_element_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_args_element_name_26 == NULL )
    {
        Py_DECREF( tmp_called_name_74 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 311;
        goto try_except_handler_10;
    }

    tmp_left_name_2 = const_str_digest_13baab1dc3d5588a95d9291b1530e6c0;
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_74 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 311;
        goto try_except_handler_10;
    }

    tmp_right_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_name );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_74 );

        exception_lineno = 311;
        goto try_except_handler_10;
    }
    tmp_args_element_name_27 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_74 );

        exception_lineno = 311;
        goto try_except_handler_10;
    }
    frame_module->f_lineno = 311;
    {
        PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_74, call_args );
    }

    Py_DECREF( tmp_called_name_74 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 311;
        goto try_except_handler_10;
    }
    Py_DECREF( tmp_unused );
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;
        goto try_except_handler_10;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1802 ], 26, 0 );
        exception_tb = NULL;

        exception_lineno = 312;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_assattr_name_1 == NULL ))
    {
        tmp_assattr_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 314;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 314;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__moved_attributes, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto frame_exception_exit_1;
    }
    tmp_called_name_75 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_called_name_75 == NULL ))
    {
        tmp_called_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_called_name_75 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 316;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 316;
    tmp_assign_source_73 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_75, &PyTuple_GET_ITEM( const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple, 0 ) );

    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 316;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves, tmp_assign_source_73 );
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }

    tmp_called_name_76 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__add_module );
    if ( tmp_called_name_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_args_element_name_28 == NULL ))
    {
        tmp_args_element_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_args_element_name_28 == NULL )
    {
        Py_DECREF( tmp_called_name_76 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_29 = const_str_plain_moves;
    frame_module->f_lineno = 317;
    {
        PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_76, call_args );
    }

    Py_DECREF( tmp_called_name_76 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_74 = PyTuple_New( 1 );
    tmp_tuple_element_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_14 == NULL ))
    {
        tmp_tuple_element_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_74 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 320;
        goto try_except_handler_11;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_assign_source_74, 0, tmp_tuple_element_14 );
    assert( tmp_class_creation_8__bases == NULL );
    tmp_class_creation_8__bases = tmp_assign_source_74;

    tmp_assign_source_75 = impl_six$$$class_8_Module_six_moves_urllib_parse( NULL );
    assert( tmp_assign_source_75 != NULL );
    assert( tmp_class_creation_8__class_dict == NULL );
    tmp_class_creation_8__class_dict = tmp_assign_source_75;

    tmp_compare_left_11 = const_str_plain___metaclass__;
    tmp_compare_right_11 = tmp_class_creation_8__class_dict;

    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_dict_name_8 = tmp_class_creation_8__class_dict;

    tmp_key_name_8 = const_str_plain___metaclass__;
    tmp_assign_source_76 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;
        goto try_except_handler_11;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_bases_name_8 = tmp_class_creation_8__bases;

    tmp_assign_source_76 = SELECT_METACLASS( tmp_bases_name_8, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_9:;
    assert( tmp_class_creation_8__metaclass == NULL );
    tmp_class_creation_8__metaclass = tmp_assign_source_76;

    tmp_called_name_77 = tmp_class_creation_8__metaclass;

    tmp_args_element_name_30 = const_str_plain_Module_six_moves_urllib_parse;
    tmp_args_element_name_31 = tmp_class_creation_8__bases;

    tmp_args_element_name_32 = tmp_class_creation_8__class_dict;

    frame_module->f_lineno = 320;
    {
        PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32 };
        tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_77, call_args );
    }

    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;
        goto try_except_handler_11;
    }
    assert( tmp_class_creation_8__class == NULL );
    tmp_class_creation_8__class = tmp_assign_source_77;

    goto try_end_11;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    tmp_assign_source_78 = tmp_class_creation_8__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse, tmp_assign_source_78 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class );
    Py_DECREF( tmp_class_creation_8__class );
    tmp_class_creation_8__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases );
    Py_DECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class_dict );
    Py_DECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__metaclass );
    Py_DECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    tmp_assign_source_79 = PyList_New( 23 );
    tmp_called_name_78 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_78 == NULL ))
    {
        tmp_called_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 326;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 326;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_78, &PyTuple_GET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 326;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 0, tmp_list_element_3 );
    tmp_called_name_79 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_79 == NULL ))
    {
        tmp_called_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 327;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 327;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_79, &PyTuple_GET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 327;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 1, tmp_list_element_3 );
    tmp_called_name_80 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_80 == NULL ))
    {
        tmp_called_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_80 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 328;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 328;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_80, &PyTuple_GET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 328;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 2, tmp_list_element_3 );
    tmp_called_name_81 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_81 == NULL ))
    {
        tmp_called_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 329;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 329;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_81, &PyTuple_GET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 329;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 3, tmp_list_element_3 );
    tmp_called_name_82 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_82 == NULL ))
    {
        tmp_called_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 330;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 330;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_82, &PyTuple_GET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 330;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 4, tmp_list_element_3 );
    tmp_called_name_83 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_83 == NULL ))
    {
        tmp_called_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 331;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 331;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_83, &PyTuple_GET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 331;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 5, tmp_list_element_3 );
    tmp_called_name_84 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_84 == NULL ))
    {
        tmp_called_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 332;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 332;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_84, &PyTuple_GET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 332;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 6, tmp_list_element_3 );
    tmp_called_name_85 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_85 == NULL ))
    {
        tmp_called_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 333;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_85, &PyTuple_GET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 333;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 7, tmp_list_element_3 );
    tmp_called_name_86 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_86 == NULL ))
    {
        tmp_called_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 334;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 334;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_86, &PyTuple_GET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 334;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 8, tmp_list_element_3 );
    tmp_called_name_87 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_87 == NULL ))
    {
        tmp_called_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 335;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 335;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_87, &PyTuple_GET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 335;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 9, tmp_list_element_3 );
    tmp_called_name_88 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_88 == NULL ))
    {
        tmp_called_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 336;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 336;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_88, &PyTuple_GET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 336;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 10, tmp_list_element_3 );
    tmp_called_name_89 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_89 == NULL ))
    {
        tmp_called_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_89 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 337;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 337;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_89, &PyTuple_GET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 337;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 11, tmp_list_element_3 );
    tmp_called_name_90 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_90 == NULL ))
    {
        tmp_called_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_90 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 338;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 338;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_90, &PyTuple_GET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 338;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 12, tmp_list_element_3 );
    tmp_called_name_91 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_91 == NULL ))
    {
        tmp_called_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 339;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_91, &PyTuple_GET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 339;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 13, tmp_list_element_3 );
    tmp_called_name_92 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_92 == NULL ))
    {
        tmp_called_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 340;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_92, &PyTuple_GET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 340;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 14, tmp_list_element_3 );
    tmp_called_name_93 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_93 == NULL ))
    {
        tmp_called_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 341;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 341;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_93, &PyTuple_GET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 341;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 15, tmp_list_element_3 );
    tmp_called_name_94 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_94 == NULL ))
    {
        tmp_called_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 342;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 342;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_94, &PyTuple_GET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 342;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 16, tmp_list_element_3 );
    tmp_called_name_95 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_95 == NULL ))
    {
        tmp_called_name_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_95 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 343;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 343;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_95, &PyTuple_GET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 343;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 17, tmp_list_element_3 );
    tmp_called_name_96 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_96 == NULL ))
    {
        tmp_called_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_96 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 344;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 344;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_96, &PyTuple_GET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 344;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 18, tmp_list_element_3 );
    tmp_called_name_97 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_97 == NULL ))
    {
        tmp_called_name_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_97 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 345;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 345;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_97, &PyTuple_GET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 345;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 19, tmp_list_element_3 );
    tmp_called_name_98 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_98 == NULL ))
    {
        tmp_called_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 346;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 346;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_98, &PyTuple_GET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 346;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 20, tmp_list_element_3 );
    tmp_called_name_99 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_99 == NULL ))
    {
        tmp_called_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 347;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 347;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_99, &PyTuple_GET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 347;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 21, tmp_list_element_3 );
    tmp_called_name_100 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_100 == NULL ))
    {
        tmp_called_name_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 348;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 348;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_100, &PyTuple_GET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_79 );

        exception_lineno = 348;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_79, 22, tmp_list_element_3 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes, tmp_assign_source_79 );
    tmp_iter_arg_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );

    if (unlikely( tmp_iter_arg_2 == NULL ))
    {
        tmp_iter_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );
    }

    if ( tmp_iter_arg_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_parse_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 350;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_80 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 350;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_80;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_81 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_81 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 350;
            goto try_except_handler_12;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_81;
        Py_XDECREF( old );
    }

    tmp_assign_source_82 = tmp_for_loop_2__iter_value;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_82 );
    tmp_setattr_target_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_setattr_target_2 == NULL ))
    {
        tmp_setattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_setattr_target_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_parse" );
        exception_tb = NULL;

        exception_lineno = 351;
        goto try_except_handler_12;
    }

    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 351;
        goto try_except_handler_12;
    }

    tmp_setattr_attr_2 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_name );
    if ( tmp_setattr_attr_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 351;
        goto try_except_handler_12;
    }
    tmp_setattr_value_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_2 == NULL ))
    {
        tmp_setattr_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_2 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 351;
        goto try_except_handler_12;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_2, tmp_setattr_attr_2, tmp_setattr_value_2 );
    Py_DECREF( tmp_setattr_attr_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 351;
        goto try_except_handler_12;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 350;
        goto try_except_handler_12;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1802 ], 26, 0 );
        exception_tb = NULL;

        exception_lineno = 352;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );

    if (unlikely( tmp_assattr_name_2 == NULL ))
    {
        tmp_assattr_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );
    }

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_parse_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 354;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_assattr_target_2 == NULL ))
    {
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_parse" );
        exception_tb = NULL;

        exception_lineno = 354;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__moved_attributes, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    tmp_called_name_101 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__add_module );
    if ( tmp_called_name_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 356;
        goto frame_exception_exit_1;
    }
    tmp_called_name_102 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_called_name_102 == NULL ))
    {
        tmp_called_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_called_name_102 == NULL )
    {
        Py_DECREF( tmp_called_name_101 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_parse" );
        exception_tb = NULL;

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 356;
    tmp_args_element_name_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_102, &PyTuple_GET_ITEM( const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple, 0 ) );

    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_101 );

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_34 = const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd;
    tmp_args_element_name_35 = const_str_digest_1a36329ae97c46a5978110ca53f2f5e7;
    frame_module->f_lineno = 357;
    {
        PyObject *call_args[] = { tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_101, call_args );
    }

    Py_DECREF( tmp_called_name_101 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 357;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_83 = PyTuple_New( 1 );
    tmp_tuple_element_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_15 == NULL ))
    {
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_83 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 360;
        goto try_except_handler_13;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_assign_source_83, 0, tmp_tuple_element_15 );
    assert( tmp_class_creation_9__bases == NULL );
    tmp_class_creation_9__bases = tmp_assign_source_83;

    tmp_assign_source_84 = impl_six$$$class_9_Module_six_moves_urllib_error( NULL );
    assert( tmp_assign_source_84 != NULL );
    assert( tmp_class_creation_9__class_dict == NULL );
    tmp_class_creation_9__class_dict = tmp_assign_source_84;

    tmp_compare_left_12 = const_str_plain___metaclass__;
    tmp_compare_right_12 = tmp_class_creation_9__class_dict;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dict_name_9 = tmp_class_creation_9__class_dict;

    tmp_key_name_9 = const_str_plain___metaclass__;
    tmp_assign_source_85 = DICT_GET_ITEM( tmp_dict_name_9, tmp_key_name_9 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 360;
        goto try_except_handler_13;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_bases_name_9 = tmp_class_creation_9__bases;

    tmp_assign_source_85 = SELECT_METACLASS( tmp_bases_name_9, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_10:;
    assert( tmp_class_creation_9__metaclass == NULL );
    tmp_class_creation_9__metaclass = tmp_assign_source_85;

    tmp_called_name_103 = tmp_class_creation_9__metaclass;

    tmp_args_element_name_36 = const_str_plain_Module_six_moves_urllib_error;
    tmp_args_element_name_37 = tmp_class_creation_9__bases;

    tmp_args_element_name_38 = tmp_class_creation_9__class_dict;

    frame_module->f_lineno = 360;
    {
        PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38 };
        tmp_assign_source_86 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_103, call_args );
    }

    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 360;
        goto try_except_handler_13;
    }
    assert( tmp_class_creation_9__class == NULL );
    tmp_class_creation_9__class = tmp_assign_source_86;

    goto try_end_13;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    tmp_assign_source_87 = tmp_class_creation_9__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error, tmp_assign_source_87 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class );
    Py_DECREF( tmp_class_creation_9__class );
    tmp_class_creation_9__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases );
    Py_DECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class_dict );
    Py_DECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__metaclass );
    Py_DECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    tmp_assign_source_88 = PyList_New( 3 );
    tmp_called_name_104 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_104 == NULL ))
    {
        tmp_called_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_104 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 366;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 366;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_104, &PyTuple_GET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 0 ) );

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 366;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_88, 0, tmp_list_element_4 );
    tmp_called_name_105 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_105 == NULL ))
    {
        tmp_called_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 367;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 367;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_105, &PyTuple_GET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 0 ) );

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 367;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_88, 1, tmp_list_element_4 );
    tmp_called_name_106 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_106 == NULL ))
    {
        tmp_called_name_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 368;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 368;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_106, &PyTuple_GET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 0 ) );

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_88 );

        exception_lineno = 368;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_88, 2, tmp_list_element_4 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes, tmp_assign_source_88 );
    tmp_iter_arg_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );

    if (unlikely( tmp_iter_arg_3 == NULL ))
    {
        tmp_iter_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );
    }

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_error_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 370;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_89 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_89;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_90 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_90 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 370;
            goto try_except_handler_14;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_90;
        Py_XDECREF( old );
    }

    tmp_assign_source_91 = tmp_for_loop_3__iter_value;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_91 );
    tmp_setattr_target_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_setattr_target_3 == NULL ))
    {
        tmp_setattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_setattr_target_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_error" );
        exception_tb = NULL;

        exception_lineno = 371;
        goto try_except_handler_14;
    }

    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 371;
        goto try_except_handler_14;
    }

    tmp_setattr_attr_3 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_name );
    if ( tmp_setattr_attr_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        goto try_except_handler_14;
    }
    tmp_setattr_value_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_3 == NULL ))
    {
        tmp_setattr_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_3 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 371;
        goto try_except_handler_14;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_3, tmp_setattr_attr_3, tmp_setattr_value_3 );
    Py_DECREF( tmp_setattr_attr_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        goto try_except_handler_14;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;
        goto try_except_handler_14;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1802 ], 26, 0 );
        exception_tb = NULL;

        exception_lineno = 372;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );

    if (unlikely( tmp_assattr_name_3 == NULL ))
    {
        tmp_assattr_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );
    }

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_error_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 374;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_assattr_target_3 == NULL ))
    {
        tmp_assattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_error" );
        exception_tb = NULL;

        exception_lineno = 374;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__moved_attributes, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 374;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 376;
        goto frame_exception_exit_1;
    }

    tmp_called_name_107 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__add_module );
    if ( tmp_called_name_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 376;
        goto frame_exception_exit_1;
    }
    tmp_called_name_108 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_called_name_108 == NULL ))
    {
        tmp_called_name_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_called_name_108 == NULL )
    {
        Py_DECREF( tmp_called_name_107 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_error" );
        exception_tb = NULL;

        exception_lineno = 376;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 376;
    tmp_args_element_name_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_108, &PyTuple_GET_ITEM( const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple, 0 ) );

    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_107 );

        exception_lineno = 376;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_40 = const_str_digest_cc1200855d2ddc077676ac963b3ffc09;
    tmp_args_element_name_41 = const_str_digest_836236e827883e9923f3b043ffe4640d;
    frame_module->f_lineno = 377;
    {
        PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40, tmp_args_element_name_41 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_107, call_args );
    }

    Py_DECREF( tmp_called_name_107 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 377;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_92 = PyTuple_New( 1 );
    tmp_tuple_element_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_16 == NULL ))
    {
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_92 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 380;
        goto try_except_handler_15;
    }

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_assign_source_92, 0, tmp_tuple_element_16 );
    assert( tmp_class_creation_10__bases == NULL );
    tmp_class_creation_10__bases = tmp_assign_source_92;

    tmp_assign_source_93 = impl_six$$$class_10_Module_six_moves_urllib_request( NULL );
    assert( tmp_assign_source_93 != NULL );
    assert( tmp_class_creation_10__class_dict == NULL );
    tmp_class_creation_10__class_dict = tmp_assign_source_93;

    tmp_compare_left_13 = const_str_plain___metaclass__;
    tmp_compare_right_13 = tmp_class_creation_10__class_dict;

    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_dict_name_10 = tmp_class_creation_10__class_dict;

    tmp_key_name_10 = const_str_plain___metaclass__;
    tmp_assign_source_94 = DICT_GET_ITEM( tmp_dict_name_10, tmp_key_name_10 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;
        goto try_except_handler_15;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_bases_name_10 = tmp_class_creation_10__bases;

    tmp_assign_source_94 = SELECT_METACLASS( tmp_bases_name_10, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_11:;
    assert( tmp_class_creation_10__metaclass == NULL );
    tmp_class_creation_10__metaclass = tmp_assign_source_94;

    tmp_called_name_109 = tmp_class_creation_10__metaclass;

    tmp_args_element_name_42 = const_str_plain_Module_six_moves_urllib_request;
    tmp_args_element_name_43 = tmp_class_creation_10__bases;

    tmp_args_element_name_44 = tmp_class_creation_10__class_dict;

    frame_module->f_lineno = 380;
    {
        PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43, tmp_args_element_name_44 };
        tmp_assign_source_95 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_109, call_args );
    }

    if ( tmp_assign_source_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;
        goto try_except_handler_15;
    }
    assert( tmp_class_creation_10__class == NULL );
    tmp_class_creation_10__class = tmp_assign_source_95;

    goto try_end_15;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    tmp_assign_source_96 = tmp_class_creation_10__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request, tmp_assign_source_96 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class );
    Py_DECREF( tmp_class_creation_10__class );
    tmp_class_creation_10__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases );
    Py_DECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class_dict );
    Py_DECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__metaclass );
    Py_DECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    tmp_assign_source_97 = PyList_New( 33 );
    tmp_called_name_110 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_110 == NULL ))
    {
        tmp_called_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_110 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 386;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 386;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_110, &PyTuple_GET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 386;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 0, tmp_list_element_5 );
    tmp_called_name_111 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_111 == NULL ))
    {
        tmp_called_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 387;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 387;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_111, &PyTuple_GET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 387;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 1, tmp_list_element_5 );
    tmp_called_name_112 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_112 == NULL ))
    {
        tmp_called_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_112 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 388;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 388;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_112, &PyTuple_GET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 388;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 2, tmp_list_element_5 );
    tmp_called_name_113 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_113 == NULL ))
    {
        tmp_called_name_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_113 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 389;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_113, &PyTuple_GET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 389;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 3, tmp_list_element_5 );
    tmp_called_name_114 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_114 == NULL ))
    {
        tmp_called_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 390;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 390;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_114, &PyTuple_GET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 390;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 4, tmp_list_element_5 );
    tmp_called_name_115 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_115 == NULL ))
    {
        tmp_called_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_115 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 391;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 391;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_115, &PyTuple_GET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 391;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 5, tmp_list_element_5 );
    tmp_called_name_116 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_116 == NULL ))
    {
        tmp_called_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 392;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 392;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_116, &PyTuple_GET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 392;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 6, tmp_list_element_5 );
    tmp_called_name_117 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_117 == NULL ))
    {
        tmp_called_name_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 393;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 393;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_117, &PyTuple_GET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 393;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 7, tmp_list_element_5 );
    tmp_called_name_118 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_118 == NULL ))
    {
        tmp_called_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_118 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 394;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 394;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_118, &PyTuple_GET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 394;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 8, tmp_list_element_5 );
    tmp_called_name_119 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_119 == NULL ))
    {
        tmp_called_name_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_119 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 395;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 395;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_119, &PyTuple_GET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 395;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 9, tmp_list_element_5 );
    tmp_called_name_120 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_120 == NULL ))
    {
        tmp_called_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 396;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_120, &PyTuple_GET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 396;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 10, tmp_list_element_5 );
    tmp_called_name_121 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_121 == NULL ))
    {
        tmp_called_name_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 397;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 397;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_121, &PyTuple_GET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 397;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 11, tmp_list_element_5 );
    tmp_called_name_122 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_122 == NULL ))
    {
        tmp_called_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 398;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 398;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_122, &PyTuple_GET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 398;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 12, tmp_list_element_5 );
    tmp_called_name_123 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_123 == NULL ))
    {
        tmp_called_name_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 399;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 399;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_123, &PyTuple_GET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 399;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 13, tmp_list_element_5 );
    tmp_called_name_124 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_124 == NULL ))
    {
        tmp_called_name_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 400;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 400;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_124, &PyTuple_GET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 400;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 14, tmp_list_element_5 );
    tmp_called_name_125 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_125 == NULL ))
    {
        tmp_called_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 401;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 401;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_125, &PyTuple_GET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 401;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 15, tmp_list_element_5 );
    tmp_called_name_126 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_126 == NULL ))
    {
        tmp_called_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 402;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_126, &PyTuple_GET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 402;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 16, tmp_list_element_5 );
    tmp_called_name_127 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_127 == NULL ))
    {
        tmp_called_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 403;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_127, &PyTuple_GET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 403;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 17, tmp_list_element_5 );
    tmp_called_name_128 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_128 == NULL ))
    {
        tmp_called_name_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_128 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 404;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 404;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_128, &PyTuple_GET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 404;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 18, tmp_list_element_5 );
    tmp_called_name_129 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_129 == NULL ))
    {
        tmp_called_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 405;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 405;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_129, &PyTuple_GET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 405;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 19, tmp_list_element_5 );
    tmp_called_name_130 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_130 == NULL ))
    {
        tmp_called_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 406;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 406;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_130, &PyTuple_GET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 406;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 20, tmp_list_element_5 );
    tmp_called_name_131 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_131 == NULL ))
    {
        tmp_called_name_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 407;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_131, &PyTuple_GET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 21, tmp_list_element_5 );
    tmp_called_name_132 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_132 == NULL ))
    {
        tmp_called_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_132 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 408;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_132, &PyTuple_GET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 408;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 22, tmp_list_element_5 );
    tmp_called_name_133 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_133 == NULL ))
    {
        tmp_called_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_133 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 409;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_133, &PyTuple_GET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 409;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 23, tmp_list_element_5 );
    tmp_called_name_134 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_134 == NULL ))
    {
        tmp_called_name_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 410;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 410;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_134, &PyTuple_GET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 410;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 24, tmp_list_element_5 );
    tmp_called_name_135 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_135 == NULL ))
    {
        tmp_called_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 411;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_135, &PyTuple_GET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 411;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 25, tmp_list_element_5 );
    tmp_called_name_136 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_136 == NULL ))
    {
        tmp_called_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_136 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 412;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 412;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_136, &PyTuple_GET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 412;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 26, tmp_list_element_5 );
    tmp_called_name_137 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_137 == NULL ))
    {
        tmp_called_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 413;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 413;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_137, &PyTuple_GET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 413;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 27, tmp_list_element_5 );
    tmp_called_name_138 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_138 == NULL ))
    {
        tmp_called_name_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_138 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 414;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 414;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_138, &PyTuple_GET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 414;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 28, tmp_list_element_5 );
    tmp_called_name_139 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_139 == NULL ))
    {
        tmp_called_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_139 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 415;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_139, &PyTuple_GET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 415;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 29, tmp_list_element_5 );
    tmp_called_name_140 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_140 == NULL ))
    {
        tmp_called_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 416;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 416;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_140, &PyTuple_GET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 416;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 30, tmp_list_element_5 );
    tmp_called_name_141 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_141 == NULL ))
    {
        tmp_called_name_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 417;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 417;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_141, &PyTuple_GET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 417;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 31, tmp_list_element_5 );
    tmp_called_name_142 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_142 == NULL ))
    {
        tmp_called_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 418;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 418;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_142, &PyTuple_GET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_97 );

        exception_lineno = 418;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_97, 32, tmp_list_element_5 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes, tmp_assign_source_97 );
    tmp_iter_arg_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );

    if (unlikely( tmp_iter_arg_4 == NULL ))
    {
        tmp_iter_arg_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );
    }

    if ( tmp_iter_arg_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_request_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 420;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_98 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 420;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_98;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_99 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_99 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 420;
            goto try_except_handler_16;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_99;
        Py_XDECREF( old );
    }

    tmp_assign_source_100 = tmp_for_loop_4__iter_value;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_100 );
    tmp_setattr_target_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_setattr_target_4 == NULL ))
    {
        tmp_setattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_setattr_target_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_request" );
        exception_tb = NULL;

        exception_lineno = 421;
        goto try_except_handler_16;
    }

    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 421;
        goto try_except_handler_16;
    }

    tmp_setattr_attr_4 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_name );
    if ( tmp_setattr_attr_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 421;
        goto try_except_handler_16;
    }
    tmp_setattr_value_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_4 == NULL ))
    {
        tmp_setattr_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_4 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 421;
        goto try_except_handler_16;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_4, tmp_setattr_attr_4, tmp_setattr_value_4 );
    Py_DECREF( tmp_setattr_attr_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 421;
        goto try_except_handler_16;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 420;
        goto try_except_handler_16;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_16;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1802 ], 26, 0 );
        exception_tb = NULL;

        exception_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );

    if (unlikely( tmp_assattr_name_4 == NULL ))
    {
        tmp_assattr_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );
    }

    if ( tmp_assattr_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_request_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 424;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_assattr_target_4 == NULL ))
    {
        tmp_assattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_request" );
        exception_tb = NULL;

        exception_lineno = 424;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__moved_attributes, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 424;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 426;
        goto frame_exception_exit_1;
    }

    tmp_called_name_143 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__add_module );
    if ( tmp_called_name_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 426;
        goto frame_exception_exit_1;
    }
    tmp_called_name_144 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_called_name_144 == NULL ))
    {
        tmp_called_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_called_name_144 == NULL )
    {
        Py_DECREF( tmp_called_name_143 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_request" );
        exception_tb = NULL;

        exception_lineno = 426;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 426;
    tmp_args_element_name_45 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_144, &PyTuple_GET_ITEM( const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple, 0 ) );

    if ( tmp_args_element_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_143 );

        exception_lineno = 426;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_46 = const_str_digest_44b5a94106b8a7650b1be1b19e45a62a;
    tmp_args_element_name_47 = const_str_digest_0796df54888fe073ef078d402adc4fc3;
    frame_module->f_lineno = 427;
    {
        PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46, tmp_args_element_name_47 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_143, call_args );
    }

    Py_DECREF( tmp_called_name_143 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 427;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_101 = PyTuple_New( 1 );
    tmp_tuple_element_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_17 == NULL ))
    {
        tmp_tuple_element_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_101 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 430;
        goto try_except_handler_17;
    }

    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_assign_source_101, 0, tmp_tuple_element_17 );
    assert( tmp_class_creation_11__bases == NULL );
    tmp_class_creation_11__bases = tmp_assign_source_101;

    tmp_assign_source_102 = impl_six$$$class_11_Module_six_moves_urllib_response( NULL );
    assert( tmp_assign_source_102 != NULL );
    assert( tmp_class_creation_11__class_dict == NULL );
    tmp_class_creation_11__class_dict = tmp_assign_source_102;

    tmp_compare_left_14 = const_str_plain___metaclass__;
    tmp_compare_right_14 = tmp_class_creation_11__class_dict;

    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_dict_name_11 = tmp_class_creation_11__class_dict;

    tmp_key_name_11 = const_str_plain___metaclass__;
    tmp_assign_source_103 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
    if ( tmp_assign_source_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;
        goto try_except_handler_17;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_bases_name_11 = tmp_class_creation_11__bases;

    tmp_assign_source_103 = SELECT_METACLASS( tmp_bases_name_11, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_12:;
    assert( tmp_class_creation_11__metaclass == NULL );
    tmp_class_creation_11__metaclass = tmp_assign_source_103;

    tmp_called_name_145 = tmp_class_creation_11__metaclass;

    tmp_args_element_name_48 = const_str_plain_Module_six_moves_urllib_response;
    tmp_args_element_name_49 = tmp_class_creation_11__bases;

    tmp_args_element_name_50 = tmp_class_creation_11__class_dict;

    frame_module->f_lineno = 430;
    {
        PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49, tmp_args_element_name_50 };
        tmp_assign_source_104 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_145, call_args );
    }

    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;
        goto try_except_handler_17;
    }
    assert( tmp_class_creation_11__class == NULL );
    tmp_class_creation_11__class = tmp_assign_source_104;

    goto try_end_17;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    tmp_assign_source_105 = tmp_class_creation_11__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response, tmp_assign_source_105 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class );
    Py_DECREF( tmp_class_creation_11__class );
    tmp_class_creation_11__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases );
    Py_DECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class_dict );
    Py_DECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__metaclass );
    Py_DECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    tmp_assign_source_106 = PyList_New( 4 );
    tmp_called_name_146 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_146 == NULL ))
    {
        tmp_called_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_106 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 436;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 436;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_146, &PyTuple_GET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_106 );

        exception_lineno = 436;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_106, 0, tmp_list_element_6 );
    tmp_called_name_147 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_147 == NULL ))
    {
        tmp_called_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_106 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 437;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_147, &PyTuple_GET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_106 );

        exception_lineno = 437;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_106, 1, tmp_list_element_6 );
    tmp_called_name_148 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_148 == NULL ))
    {
        tmp_called_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_148 == NULL )
    {
        Py_DECREF( tmp_assign_source_106 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 438;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 438;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_148, &PyTuple_GET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_106 );

        exception_lineno = 438;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_106, 2, tmp_list_element_6 );
    tmp_called_name_149 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_149 == NULL ))
    {
        tmp_called_name_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_149 == NULL )
    {
        Py_DECREF( tmp_assign_source_106 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 439;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 439;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_149, &PyTuple_GET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_106 );

        exception_lineno = 439;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_106, 3, tmp_list_element_6 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes, tmp_assign_source_106 );
    tmp_iter_arg_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );

    if (unlikely( tmp_iter_arg_5 == NULL ))
    {
        tmp_iter_arg_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );
    }

    if ( tmp_iter_arg_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_response_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 441;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_107 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 441;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_107;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_108 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_108 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 441;
            goto try_except_handler_18;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_108;
        Py_XDECREF( old );
    }

    tmp_assign_source_109 = tmp_for_loop_5__iter_value;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_109 );
    tmp_setattr_target_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_setattr_target_5 == NULL ))
    {
        tmp_setattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_setattr_target_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_response" );
        exception_tb = NULL;

        exception_lineno = 442;
        goto try_except_handler_18;
    }

    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 442;
        goto try_except_handler_18;
    }

    tmp_setattr_attr_5 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_name );
    if ( tmp_setattr_attr_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 442;
        goto try_except_handler_18;
    }
    tmp_setattr_value_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_5 == NULL ))
    {
        tmp_setattr_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_5 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 442;
        goto try_except_handler_18;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_5, tmp_setattr_attr_5, tmp_setattr_value_5 );
    Py_DECREF( tmp_setattr_attr_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 442;
        goto try_except_handler_18;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 441;
        goto try_except_handler_18;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_18;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1802 ], 26, 0 );
        exception_tb = NULL;

        exception_lineno = 443;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );

    if (unlikely( tmp_assattr_name_5 == NULL ))
    {
        tmp_assattr_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );
    }

    if ( tmp_assattr_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_response_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 445;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_assattr_target_5 == NULL ))
    {
        tmp_assattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_assattr_target_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_response" );
        exception_tb = NULL;

        exception_lineno = 445;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__moved_attributes, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 445;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    tmp_called_name_150 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__add_module );
    if ( tmp_called_name_150 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 447;
        goto frame_exception_exit_1;
    }
    tmp_called_name_151 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_called_name_151 == NULL ))
    {
        tmp_called_name_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_called_name_151 == NULL )
    {
        Py_DECREF( tmp_called_name_150 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_response" );
        exception_tb = NULL;

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 447;
    tmp_args_element_name_51 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_151, &PyTuple_GET_ITEM( const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple, 0 ) );

    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_150 );

        exception_lineno = 447;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_52 = const_str_digest_377bbfde508aa04103b00d9192b3b50d;
    tmp_args_element_name_53 = const_str_digest_2a86adf5a4eff7c85cf98b964b9653c8;
    frame_module->f_lineno = 448;
    {
        PyObject *call_args[] = { tmp_args_element_name_51, tmp_args_element_name_52, tmp_args_element_name_53 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_150, call_args );
    }

    Py_DECREF( tmp_called_name_150 );
    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 448;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_110 = PyTuple_New( 1 );
    tmp_tuple_element_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_18 == NULL ))
    {
        tmp_tuple_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_110 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 451;
        goto try_except_handler_19;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_assign_source_110, 0, tmp_tuple_element_18 );
    assert( tmp_class_creation_12__bases == NULL );
    tmp_class_creation_12__bases = tmp_assign_source_110;

    tmp_assign_source_111 = impl_six$$$class_12_Module_six_moves_urllib_robotparser( NULL );
    assert( tmp_assign_source_111 != NULL );
    assert( tmp_class_creation_12__class_dict == NULL );
    tmp_class_creation_12__class_dict = tmp_assign_source_111;

    tmp_compare_left_15 = const_str_plain___metaclass__;
    tmp_compare_right_15 = tmp_class_creation_12__class_dict;

    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dict_name_12 = tmp_class_creation_12__class_dict;

    tmp_key_name_12 = const_str_plain___metaclass__;
    tmp_assign_source_112 = DICT_GET_ITEM( tmp_dict_name_12, tmp_key_name_12 );
    if ( tmp_assign_source_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;
        goto try_except_handler_19;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_bases_name_12 = tmp_class_creation_12__bases;

    tmp_assign_source_112 = SELECT_METACLASS( tmp_bases_name_12, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_13:;
    assert( tmp_class_creation_12__metaclass == NULL );
    tmp_class_creation_12__metaclass = tmp_assign_source_112;

    tmp_called_name_152 = tmp_class_creation_12__metaclass;

    tmp_args_element_name_54 = const_str_plain_Module_six_moves_urllib_robotparser;
    tmp_args_element_name_55 = tmp_class_creation_12__bases;

    tmp_args_element_name_56 = tmp_class_creation_12__class_dict;

    frame_module->f_lineno = 451;
    {
        PyObject *call_args[] = { tmp_args_element_name_54, tmp_args_element_name_55, tmp_args_element_name_56 };
        tmp_assign_source_113 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_152, call_args );
    }

    if ( tmp_assign_source_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;
        goto try_except_handler_19;
    }
    assert( tmp_class_creation_12__class == NULL );
    tmp_class_creation_12__class = tmp_assign_source_113;

    goto try_end_19;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    tmp_assign_source_114 = tmp_class_creation_12__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser, tmp_assign_source_114 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class );
    Py_DECREF( tmp_class_creation_12__class );
    tmp_class_creation_12__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__bases );
    Py_DECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class_dict );
    Py_DECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__metaclass );
    Py_DECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    tmp_assign_source_115 = PyList_New( 1 );
    tmp_called_name_153 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_153 == NULL ))
    {
        tmp_called_name_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_115 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 457;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 457;
    tmp_list_element_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_153, &PyTuple_GET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 0 ) );

    if ( tmp_list_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_115 );

        exception_lineno = 457;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_115, 0, tmp_list_element_7 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes, tmp_assign_source_115 );
    tmp_iter_arg_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );

    if (unlikely( tmp_iter_arg_6 == NULL ))
    {
        tmp_iter_arg_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );
    }

    if ( tmp_iter_arg_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_robotparser_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 459;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_116 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_116;

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_117 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_117 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 459;
            goto try_except_handler_20;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_117;
        Py_XDECREF( old );
    }

    tmp_assign_source_118 = tmp_for_loop_6__iter_value;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_118 );
    tmp_setattr_target_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_setattr_target_6 == NULL ))
    {
        tmp_setattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_setattr_target_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_robotparser" );
        exception_tb = NULL;

        exception_lineno = 460;
        goto try_except_handler_20;
    }

    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 460;
        goto try_except_handler_20;
    }

    tmp_setattr_attr_6 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_name );
    if ( tmp_setattr_attr_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 460;
        goto try_except_handler_20;
    }
    tmp_setattr_value_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_6 == NULL ))
    {
        tmp_setattr_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_6 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 460;
        goto try_except_handler_20;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_6, tmp_setattr_attr_6, tmp_setattr_value_6 );
    Py_DECREF( tmp_setattr_attr_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 460;
        goto try_except_handler_20;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        goto try_except_handler_20;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_20;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1802 ], 26, 0 );
        exception_tb = NULL;

        exception_lineno = 461;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );

    if (unlikely( tmp_assattr_name_6 == NULL ))
    {
        tmp_assattr_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );
    }

    if ( tmp_assattr_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_robotparser_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 463;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_assattr_target_6 == NULL ))
    {
        tmp_assattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_assattr_target_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_robotparser" );
        exception_tb = NULL;

        exception_lineno = 463;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__moved_attributes, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 465;
        goto frame_exception_exit_1;
    }

    tmp_called_name_154 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__add_module );
    if ( tmp_called_name_154 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 465;
        goto frame_exception_exit_1;
    }
    tmp_called_name_155 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_called_name_155 == NULL ))
    {
        tmp_called_name_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_called_name_155 == NULL )
    {
        Py_DECREF( tmp_called_name_154 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_robotparser" );
        exception_tb = NULL;

        exception_lineno = 465;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 465;
    tmp_args_element_name_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_155, &PyTuple_GET_ITEM( const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple, 0 ) );

    if ( tmp_args_element_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_154 );

        exception_lineno = 465;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_58 = const_str_digest_3f74da80d70054f566244d16961c095c;
    tmp_args_element_name_59 = const_str_digest_2a7b3d36c635f4688c336c8ee8000e51;
    frame_module->f_lineno = 466;
    {
        PyObject *call_args[] = { tmp_args_element_name_57, tmp_args_element_name_58, tmp_args_element_name_59 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_154, call_args );
    }

    Py_DECREF( tmp_called_name_154 );
    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_119 = PyTuple_New( 1 );
    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_119 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 469;
        goto try_except_handler_21;
    }

    tmp_tuple_element_19 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_ModuleType );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_119 );

        exception_lineno = 469;
        goto try_except_handler_21;
    }
    PyTuple_SET_ITEM( tmp_assign_source_119, 0, tmp_tuple_element_19 );
    assert( tmp_class_creation_13__bases == NULL );
    tmp_class_creation_13__bases = tmp_assign_source_119;

    tmp_assign_source_120 = impl_six$$$class_13_Module_six_moves_urllib( NULL );
    if ( tmp_assign_source_120 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;
        goto try_except_handler_21;
    }
    assert( tmp_class_creation_13__class_dict == NULL );
    tmp_class_creation_13__class_dict = tmp_assign_source_120;

    tmp_compare_left_16 = const_str_plain___metaclass__;
    tmp_compare_right_16 = tmp_class_creation_13__class_dict;

    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_dict_name_13 = tmp_class_creation_13__class_dict;

    tmp_key_name_13 = const_str_plain___metaclass__;
    tmp_assign_source_121 = DICT_GET_ITEM( tmp_dict_name_13, tmp_key_name_13 );
    if ( tmp_assign_source_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;
        goto try_except_handler_21;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_bases_name_13 = tmp_class_creation_13__bases;

    tmp_assign_source_121 = SELECT_METACLASS( tmp_bases_name_13, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_14:;
    assert( tmp_class_creation_13__metaclass == NULL );
    tmp_class_creation_13__metaclass = tmp_assign_source_121;

    tmp_called_name_156 = tmp_class_creation_13__metaclass;

    tmp_args_element_name_60 = const_str_plain_Module_six_moves_urllib;
    tmp_args_element_name_61 = tmp_class_creation_13__bases;

    tmp_args_element_name_62 = tmp_class_creation_13__class_dict;

    frame_module->f_lineno = 469;
    {
        PyObject *call_args[] = { tmp_args_element_name_60, tmp_args_element_name_61, tmp_args_element_name_62 };
        tmp_assign_source_122 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_156, call_args );
    }

    if ( tmp_assign_source_122 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;
        goto try_except_handler_21;
    }
    assert( tmp_class_creation_13__class == NULL );
    tmp_class_creation_13__class = tmp_assign_source_122;

    goto try_end_21;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    tmp_assign_source_123 = tmp_class_creation_13__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib, tmp_assign_source_123 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class );
    Py_DECREF( tmp_class_creation_13__class );
    tmp_class_creation_13__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__bases );
    Py_DECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class_dict );
    Py_DECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__metaclass );
    Py_DECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 482;
        goto frame_exception_exit_1;
    }

    tmp_called_name_157 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain__add_module );
    if ( tmp_called_name_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 482;
        goto frame_exception_exit_1;
    }
    tmp_called_name_158 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib );

    if (unlikely( tmp_called_name_158 == NULL ))
    {
        tmp_called_name_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib );
    }

    if ( tmp_called_name_158 == NULL )
    {
        Py_DECREF( tmp_called_name_157 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib" );
        exception_tb = NULL;

        exception_lineno = 482;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 482;
    tmp_args_element_name_63 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_158, &PyTuple_GET_ITEM( const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple, 0 ) );

    if ( tmp_args_element_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_157 );

        exception_lineno = 482;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_64 = const_str_digest_bdf07efe689edd815848f7ba41ea2eee;
    frame_module->f_lineno = 483;
    {
        PyObject *call_args[] = { tmp_args_element_name_63, tmp_args_element_name_64 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_157, call_args );
    }

    Py_DECREF( tmp_called_name_157 );
    Py_DECREF( tmp_args_element_name_63 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 483;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_124 = MAKE_FUNCTION_six$$$function_3_add_move(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_add_move, tmp_assign_source_124 );
    tmp_assign_source_125 = MAKE_FUNCTION_six$$$function_4_remove_move(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_remove_move, tmp_assign_source_125 );
    tmp_cond_value_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_4 == NULL ))
    {
        tmp_cond_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 502;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 502;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_assign_source_126 = const_str_plain___func__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func, tmp_assign_source_126 );
    tmp_assign_source_127 = const_str_plain___self__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self, tmp_assign_source_127 );
    tmp_assign_source_128 = const_str_plain___closure__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure, tmp_assign_source_128 );
    tmp_assign_source_129 = const_str_plain___code__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code, tmp_assign_source_129 );
    tmp_assign_source_130 = const_str_plain___defaults__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults, tmp_assign_source_130 );
    tmp_assign_source_131 = const_str_plain___globals__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals, tmp_assign_source_131 );
    goto branch_end_7;
    branch_no_7:;
    tmp_assign_source_132 = const_str_plain_im_func;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func, tmp_assign_source_132 );
    tmp_assign_source_133 = const_str_plain_im_self;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self, tmp_assign_source_133 );
    tmp_assign_source_134 = const_str_plain_func_closure;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure, tmp_assign_source_134 );
    tmp_assign_source_135 = const_str_plain_func_code;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code, tmp_assign_source_135 );
    tmp_assign_source_136 = const_str_plain_func_defaults;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults, tmp_assign_source_136 );
    tmp_assign_source_137 = const_str_plain_func_globals;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals, tmp_assign_source_137 );
    branch_end_7:;
    // Tried code:
    tmp_assign_source_138 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_next );

    if (unlikely( tmp_assign_source_138 == NULL ))
    {
        tmp_assign_source_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_next );
    }

    if ( tmp_assign_source_138 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "next" );
        exception_tb = NULL;

        exception_lineno = 521;
        goto try_except_handler_22;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator, tmp_assign_source_138 );
    goto try_end_22;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if ( exception_keeper_tb_22 == NULL )
    {
        exception_keeper_tb_22 = MAKE_TRACEBACK( frame_module, exception_keeper_lineno_22 );
    }
    else if ( exception_keeper_lineno_22 != -1 )
    {
        exception_keeper_tb_22 = ADD_TRACEBACK( exception_keeper_tb_22, frame_module, exception_keeper_lineno_22 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_22, &exception_keeper_value_22, &exception_keeper_tb_22 );
    PUBLISH_EXCEPTION( &exception_keeper_type_22, &exception_keeper_value_22, &exception_keeper_tb_22 );
    tmp_compare_left_17 = PyThreadState_GET()->exc_type;
    tmp_compare_right_17 = PyExc_NameError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_assign_source_139 = MAKE_FUNCTION_six$$$function_5_advance_iterator(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator, tmp_assign_source_139 );
    goto branch_end_8;
    branch_no_8:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_module) frame_module->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_8:;
    goto try_end_22;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_22:;
    tmp_assign_source_140 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator );

    if (unlikely( tmp_assign_source_140 == NULL ))
    {
        tmp_assign_source_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_advance_iterator );
    }

    if ( tmp_assign_source_140 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "advance_iterator" );
        exception_tb = NULL;

        exception_lineno = 525;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_next, tmp_assign_source_140 );
    // Tried code:
    tmp_assign_source_141 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable );

    if (unlikely( tmp_assign_source_141 == NULL ))
    {
        tmp_assign_source_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_callable );
    }

    if ( tmp_assign_source_141 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "callable" );
        exception_tb = NULL;

        exception_lineno = 529;
        goto try_except_handler_23;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_141 );
    goto try_end_23;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if ( exception_keeper_tb_23 == NULL )
    {
        exception_keeper_tb_23 = MAKE_TRACEBACK( frame_module, exception_keeper_lineno_23 );
    }
    else if ( exception_keeper_lineno_23 != -1 )
    {
        exception_keeper_tb_23 = ADD_TRACEBACK( exception_keeper_tb_23, frame_module, exception_keeper_lineno_23 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_23, &exception_keeper_value_23, &exception_keeper_tb_23 );
    PUBLISH_EXCEPTION( &exception_keeper_type_23, &exception_keeper_value_23, &exception_keeper_tb_23 );
    tmp_compare_left_18 = PyThreadState_GET()->exc_type;
    tmp_compare_right_18 = PyExc_NameError;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_18, tmp_compare_right_18 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_3 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_assign_source_142 = MAKE_FUNCTION_six$$$function_6_callable(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_142 );
    goto branch_end_9;
    branch_no_9:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_module) frame_module->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_9:;
    goto try_end_23;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_23:;
    tmp_cond_value_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_5 == NULL ))
    {
        tmp_cond_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 535;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 535;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_143 = MAKE_FUNCTION_six$$$function_7_get_unbound_function(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function, tmp_assign_source_143 );
    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 539;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_144 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_MethodType );
    if ( tmp_assign_source_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 539;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_bound_method, tmp_assign_source_144 );
    tmp_assign_source_145 = MAKE_FUNCTION_six$$$function_8_create_unbound_method(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_unbound_method, tmp_assign_source_145 );
    tmp_assign_source_146 = LOOKUP_BUILTIN( const_str_plain_object );
    assert( tmp_assign_source_146 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Iterator, tmp_assign_source_146 );
    goto branch_end_10;
    branch_no_10:;
    tmp_assign_source_147 = MAKE_FUNCTION_six$$$function_9_get_unbound_function(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function, tmp_assign_source_147 );
    tmp_assign_source_148 = MAKE_FUNCTION_six$$$function_10_create_bound_method(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_bound_method, tmp_assign_source_148 );
    tmp_assign_source_149 = MAKE_FUNCTION_six$$$function_11_create_unbound_method(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_unbound_method, tmp_assign_source_149 );
    tmp_assign_source_150 = PyTuple_New( 1 );
    tmp_tuple_element_20 = LOOKUP_BUILTIN( const_str_plain_object );
    assert( tmp_tuple_element_20 != NULL );
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_assign_source_150, 0, tmp_tuple_element_20 );
    assert( tmp_class_creation_14__bases == NULL );
    tmp_class_creation_14__bases = tmp_assign_source_150;

    tmp_assign_source_151 = impl_six$$$class_14_Iterator( NULL );
    assert( tmp_assign_source_151 != NULL );
    assert( tmp_class_creation_14__class_dict == NULL );
    tmp_class_creation_14__class_dict = tmp_assign_source_151;

    // Tried code:
    tmp_compare_left_19 = const_str_plain___metaclass__;
    tmp_compare_right_19 = tmp_class_creation_14__class_dict;

    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_dict_name_14 = tmp_class_creation_14__class_dict;

    tmp_key_name_14 = const_str_plain___metaclass__;
    tmp_assign_source_152 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
    if ( tmp_assign_source_152 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;
        goto try_except_handler_24;
    }
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_bases_name_14 = tmp_class_creation_14__bases;

    tmp_assign_source_152 = SELECT_METACLASS( tmp_bases_name_14, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_15:;
    assert( tmp_class_creation_14__metaclass == NULL );
    tmp_class_creation_14__metaclass = tmp_assign_source_152;

    tmp_called_name_159 = tmp_class_creation_14__metaclass;

    tmp_args_element_name_65 = const_str_plain_Iterator;
    tmp_args_element_name_66 = tmp_class_creation_14__bases;

    tmp_args_element_name_67 = tmp_class_creation_14__class_dict;

    frame_module->f_lineno = 555;
    {
        PyObject *call_args[] = { tmp_args_element_name_65, tmp_args_element_name_66, tmp_args_element_name_67 };
        tmp_assign_source_153 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_159, call_args );
    }

    if ( tmp_assign_source_153 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;
        goto try_except_handler_24;
    }
    assert( tmp_class_creation_14__class == NULL );
    tmp_class_creation_14__class = tmp_assign_source_153;

    goto try_end_24;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__bases );
    Py_DECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_dict );
    Py_DECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    tmp_assign_source_154 = tmp_class_creation_14__class;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Iterator, tmp_assign_source_154 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class );
    Py_DECREF( tmp_class_creation_14__class );
    tmp_class_creation_14__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__bases );
    Py_DECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_dict );
    Py_DECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__metaclass );
    Py_DECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    tmp_assign_source_155 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable );

    if (unlikely( tmp_assign_source_155 == NULL ))
    {
        tmp_assign_source_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_callable );
    }

    if ( tmp_assign_source_155 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "callable" );
        exception_tb = NULL;

        exception_lineno = 560;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_155 );
    branch_end_10:;
    tmp_called_name_160 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_160 == NULL ))
    {
        tmp_called_name_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_160 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 561;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_68 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function );

    if (unlikely( tmp_args_element_name_68 == NULL ))
    {
        tmp_args_element_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_unbound_function );
    }

    if ( tmp_args_element_name_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "get_unbound_function" );
        exception_tb = NULL;

        exception_lineno = 561;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_69 = const_str_digest_a13cea3eac144232780ec70fab3f1816;
    frame_module->f_lineno = 562;
    {
        PyObject *call_args[] = { tmp_args_element_name_68, tmp_args_element_name_69 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_160, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 562;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_called_name_161 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_attrgetter );
    if ( tmp_called_name_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_70 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func );

    if (unlikely( tmp_args_element_name_70 == NULL ))
    {
        tmp_args_element_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__meth_func );
    }

    if ( tmp_args_element_name_70 == NULL )
    {
        Py_DECREF( tmp_called_name_161 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_meth_func" );
        exception_tb = NULL;

        exception_lineno = 565;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 565;
    {
        PyObject *call_args[] = { tmp_args_element_name_70 };
        tmp_assign_source_156 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_161, call_args );
    }

    Py_DECREF( tmp_called_name_161 );
    if ( tmp_assign_source_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_method_function, tmp_assign_source_156 );
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 566;
        goto frame_exception_exit_1;
    }

    tmp_called_name_162 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_attrgetter );
    if ( tmp_called_name_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_71 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self );

    if (unlikely( tmp_args_element_name_71 == NULL ))
    {
        tmp_args_element_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__meth_self );
    }

    if ( tmp_args_element_name_71 == NULL )
    {
        Py_DECREF( tmp_called_name_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_meth_self" );
        exception_tb = NULL;

        exception_lineno = 566;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 566;
    {
        PyObject *call_args[] = { tmp_args_element_name_71 };
        tmp_assign_source_157 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_162, call_args );
    }

    Py_DECREF( tmp_called_name_162 );
    if ( tmp_assign_source_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_method_self, tmp_assign_source_157 );
    tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_29 == NULL ))
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 567;
        goto frame_exception_exit_1;
    }

    tmp_called_name_163 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_attrgetter );
    if ( tmp_called_name_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 567;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_72 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure );

    if (unlikely( tmp_args_element_name_72 == NULL ))
    {
        tmp_args_element_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_closure );
    }

    if ( tmp_args_element_name_72 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_closure" );
        exception_tb = NULL;

        exception_lineno = 567;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 567;
    {
        PyObject *call_args[] = { tmp_args_element_name_72 };
        tmp_assign_source_158 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_163, call_args );
    }

    Py_DECREF( tmp_called_name_163 );
    if ( tmp_assign_source_158 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 567;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_closure, tmp_assign_source_158 );
    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    tmp_called_name_164 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_attrgetter );
    if ( tmp_called_name_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 568;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_73 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code );

    if (unlikely( tmp_args_element_name_73 == NULL ))
    {
        tmp_args_element_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_code );
    }

    if ( tmp_args_element_name_73 == NULL )
    {
        Py_DECREF( tmp_called_name_164 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_code" );
        exception_tb = NULL;

        exception_lineno = 568;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 568;
    {
        PyObject *call_args[] = { tmp_args_element_name_73 };
        tmp_assign_source_159 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_164, call_args );
    }

    Py_DECREF( tmp_called_name_164 );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 568;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_code, tmp_assign_source_159 );
    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 569;
        goto frame_exception_exit_1;
    }

    tmp_called_name_165 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_attrgetter );
    if ( tmp_called_name_165 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 569;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_74 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults );

    if (unlikely( tmp_args_element_name_74 == NULL ))
    {
        tmp_args_element_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_defaults );
    }

    if ( tmp_args_element_name_74 == NULL )
    {
        Py_DECREF( tmp_called_name_165 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_defaults" );
        exception_tb = NULL;

        exception_lineno = 569;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 569;
    {
        PyObject *call_args[] = { tmp_args_element_name_74 };
        tmp_assign_source_160 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_165, call_args );
    }

    Py_DECREF( tmp_called_name_165 );
    if ( tmp_assign_source_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 569;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_defaults, tmp_assign_source_160 );
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 570;
        goto frame_exception_exit_1;
    }

    tmp_called_name_166 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_attrgetter );
    if ( tmp_called_name_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_75 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals );

    if (unlikely( tmp_args_element_name_75 == NULL ))
    {
        tmp_args_element_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_globals );
    }

    if ( tmp_args_element_name_75 == NULL )
    {
        Py_DECREF( tmp_called_name_166 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_globals" );
        exception_tb = NULL;

        exception_lineno = 570;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 570;
    {
        PyObject *call_args[] = { tmp_args_element_name_75 };
        tmp_assign_source_161 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_166, call_args );
    }

    Py_DECREF( tmp_called_name_166 );
    if ( tmp_assign_source_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_globals, tmp_assign_source_161 );
    tmp_cond_value_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_6 == NULL ))
    {
        tmp_cond_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 573;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 573;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_162 = MAKE_FUNCTION_six$$$function_12_iterkeys(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys, tmp_assign_source_162 );
    tmp_assign_source_163 = MAKE_FUNCTION_six$$$function_13_itervalues(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues, tmp_assign_source_163 );
    tmp_assign_source_164 = MAKE_FUNCTION_six$$$function_14_iteritems(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems, tmp_assign_source_164 );
    tmp_assign_source_165 = MAKE_FUNCTION_six$$$function_15_iterlists(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists, tmp_assign_source_165 );
    tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_33 == NULL ))
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 586;
        goto frame_exception_exit_1;
    }

    tmp_called_name_167 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_methodcaller );
    if ( tmp_called_name_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 586;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 586;
    tmp_assign_source_166 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_167, &PyTuple_GET_ITEM( const_tuple_str_plain_keys_tuple, 0 ) );

    Py_DECREF( tmp_called_name_167 );
    if ( tmp_assign_source_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 586;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewkeys, tmp_assign_source_166 );
    tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_34 == NULL ))
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 588;
        goto frame_exception_exit_1;
    }

    tmp_called_name_168 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_methodcaller );
    if ( tmp_called_name_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 588;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 588;
    tmp_assign_source_167 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_168, &PyTuple_GET_ITEM( const_tuple_str_plain_values_tuple, 0 ) );

    Py_DECREF( tmp_called_name_168 );
    if ( tmp_assign_source_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 588;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewvalues, tmp_assign_source_167 );
    tmp_source_name_35 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_35 == NULL ))
    {
        tmp_source_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 590;
        goto frame_exception_exit_1;
    }

    tmp_called_name_169 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_methodcaller );
    if ( tmp_called_name_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 590;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 590;
    tmp_assign_source_168 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_169, &PyTuple_GET_ITEM( const_tuple_str_plain_items_tuple, 0 ) );

    Py_DECREF( tmp_called_name_169 );
    if ( tmp_assign_source_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 590;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewitems, tmp_assign_source_168 );
    goto branch_end_11;
    branch_no_11:;
    tmp_assign_source_169 = MAKE_FUNCTION_six$$$function_16_iterkeys(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys, tmp_assign_source_169 );
    tmp_assign_source_170 = MAKE_FUNCTION_six$$$function_17_itervalues(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues, tmp_assign_source_170 );
    tmp_assign_source_171 = MAKE_FUNCTION_six$$$function_18_iteritems(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems, tmp_assign_source_171 );
    tmp_assign_source_172 = MAKE_FUNCTION_six$$$function_19_iterlists(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists, tmp_assign_source_172 );
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 604;
        goto frame_exception_exit_1;
    }

    tmp_called_name_170 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_methodcaller );
    if ( tmp_called_name_170 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 604;
    tmp_assign_source_173 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_170, &PyTuple_GET_ITEM( const_tuple_str_plain_viewkeys_tuple, 0 ) );

    Py_DECREF( tmp_called_name_170 );
    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewkeys, tmp_assign_source_173 );
    tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_37 == NULL ))
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 606;
        goto frame_exception_exit_1;
    }

    tmp_called_name_171 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_methodcaller );
    if ( tmp_called_name_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 606;
    tmp_assign_source_174 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_171, &PyTuple_GET_ITEM( const_tuple_str_plain_viewvalues_tuple, 0 ) );

    Py_DECREF( tmp_called_name_171 );
    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewvalues, tmp_assign_source_174 );
    tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_38 == NULL ))
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 608;
        goto frame_exception_exit_1;
    }

    tmp_called_name_172 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_methodcaller );
    if ( tmp_called_name_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 608;
    tmp_assign_source_175 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_172, &PyTuple_GET_ITEM( const_tuple_str_plain_viewitems_tuple, 0 ) );

    Py_DECREF( tmp_called_name_172 );
    if ( tmp_assign_source_175 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewitems, tmp_assign_source_175 );
    branch_end_11:;
    tmp_called_name_173 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_173 == NULL ))
    {
        tmp_called_name_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_173 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 610;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_76 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys );

    if (unlikely( tmp_args_element_name_76 == NULL ))
    {
        tmp_args_element_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iterkeys );
    }

    if ( tmp_args_element_name_76 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iterkeys" );
        exception_tb = NULL;

        exception_lineno = 610;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_77 = const_str_digest_c1940ed36d6c651776a6e3a34c7131e3;
    frame_module->f_lineno = 610;
    {
        PyObject *call_args[] = { tmp_args_element_name_76, tmp_args_element_name_77 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_173, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_174 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_174 == NULL ))
    {
        tmp_called_name_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_174 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 611;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_78 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues );

    if (unlikely( tmp_args_element_name_78 == NULL ))
    {
        tmp_args_element_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itervalues );
    }

    if ( tmp_args_element_name_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "itervalues" );
        exception_tb = NULL;

        exception_lineno = 611;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_79 = const_str_digest_c18de21b4af59af9eda7ad848834774a;
    frame_module->f_lineno = 611;
    {
        PyObject *call_args[] = { tmp_args_element_name_78, tmp_args_element_name_79 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_174, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 611;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_175 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_175 == NULL ))
    {
        tmp_called_name_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_175 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 612;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_80 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems );

    if (unlikely( tmp_args_element_name_80 == NULL ))
    {
        tmp_args_element_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iteritems );
    }

    if ( tmp_args_element_name_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iteritems" );
        exception_tb = NULL;

        exception_lineno = 612;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_81 = const_str_digest_a343d5bd65de7d15893f1a0d02d09f45;
    frame_module->f_lineno = 613;
    {
        PyObject *call_args[] = { tmp_args_element_name_80, tmp_args_element_name_81 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_175, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 613;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_176 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_176 == NULL ))
    {
        tmp_called_name_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_176 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 614;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_82 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists );

    if (unlikely( tmp_args_element_name_82 == NULL ))
    {
        tmp_args_element_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iterlists );
    }

    if ( tmp_args_element_name_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iterlists" );
        exception_tb = NULL;

        exception_lineno = 614;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_83 = const_str_digest_ef5ae5746ab9ada338d738fcd9ef185d;
    frame_module->f_lineno = 615;
    {
        PyObject *call_args[] = { tmp_args_element_name_82, tmp_args_element_name_83 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_176, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 615;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_7 == NULL ))
    {
        tmp_cond_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 618;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 618;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_176 = MAKE_FUNCTION_six$$$function_20_b(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_b, tmp_assign_source_176 );
    tmp_assign_source_177 = MAKE_FUNCTION_six$$$function_21_u(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_u, tmp_assign_source_177 );
    tmp_assign_source_178 = LOOKUP_BUILTIN( const_str_plain_chr );
    assert( tmp_assign_source_178 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr, tmp_assign_source_178 );
    tmp_import_globals_6 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 625;
    tmp_assign_source_179 = IMPORT_MODULE( const_str_plain_struct, tmp_import_globals_6, tmp_import_globals_6, Py_None, const_int_0 );
    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 625;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_struct, tmp_assign_source_179 );
    tmp_source_name_40 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_struct );

    if (unlikely( tmp_source_name_40 == NULL ))
    {
        tmp_source_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
    }

    if ( tmp_source_name_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct" );
        exception_tb = NULL;

        exception_lineno = 626;
        goto frame_exception_exit_1;
    }

    tmp_called_name_177 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_Struct );
    if ( tmp_called_name_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 626;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 626;
    tmp_source_name_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_177, &PyTuple_GET_ITEM( const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple, 0 ) );

    Py_DECREF( tmp_called_name_177 );
    if ( tmp_source_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 626;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_180 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_pack );
    Py_DECREF( tmp_source_name_39 );
    if ( tmp_assign_source_180 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 626;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_180 );
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_struct );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1828 ], 28, 0 );
        exception_tb = NULL;

        exception_lineno = 627;
        goto frame_exception_exit_1;
    }

    tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_41 == NULL ))
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 628;
        goto frame_exception_exit_1;
    }

    tmp_called_name_178 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_itemgetter );
    if ( tmp_called_name_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 628;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 628;
    tmp_assign_source_181 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_178, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

    Py_DECREF( tmp_called_name_178 );
    if ( tmp_assign_source_181 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 628;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_byte2int, tmp_assign_source_181 );
    tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_42 == NULL ))
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 629;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_182 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_getitem );
    if ( tmp_assign_source_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 629;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_indexbytes, tmp_assign_source_182 );
    tmp_assign_source_183 = LOOKUP_BUILTIN( const_str_plain_iter );
    assert( tmp_assign_source_183 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterbytes, tmp_assign_source_183 );
    tmp_import_globals_7 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 631;
    tmp_assign_source_184 = IMPORT_MODULE( const_str_plain_io, tmp_import_globals_7, tmp_import_globals_7, Py_None, const_int_0 );
    if ( tmp_assign_source_184 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 631;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_184 );
    tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_source_name_43 == NULL ))
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_source_name_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "io" );
        exception_tb = NULL;

        exception_lineno = 632;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_185 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_StringIO );
    if ( tmp_assign_source_185 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 632;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_185 );
    tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_source_name_44 == NULL ))
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_source_name_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "io" );
        exception_tb = NULL;

        exception_lineno = 633;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_186 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_BytesIO );
    if ( tmp_assign_source_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_186 );
    tmp_assign_source_187 = const_str_plain_assertCountEqual;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertCountEqual, tmp_assign_source_187 );
    tmp_source_name_45 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_45 == NULL ))
    {
        tmp_source_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 635;
        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_version_info );
    if ( tmp_subscribed_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_3 = const_int_pos_1;
    tmp_compare_left_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    Py_DECREF( tmp_subscribed_name_3 );
    if ( tmp_compare_left_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_20 = const_int_pos_1;
    tmp_cmp_LtE_1 = RICH_COMPARE_BOOL_LE( tmp_compare_left_20, tmp_compare_right_20 );
    if ( tmp_cmp_LtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_20 );

        exception_lineno = 635;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_20 );
    if ( tmp_cmp_LtE_1 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_188 = const_str_plain_assertRaisesRegexp;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex, tmp_assign_source_188 );
    tmp_assign_source_189 = const_str_plain_assertRegexpMatches;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex, tmp_assign_source_189 );
    goto branch_end_13;
    branch_no_13:;
    tmp_assign_source_190 = const_str_plain_assertRaisesRegex;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex, tmp_assign_source_190 );
    tmp_assign_source_191 = const_str_plain_assertRegex;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex, tmp_assign_source_191 );
    branch_end_13:;
    goto branch_end_12;
    branch_no_12:;
    tmp_assign_source_192 = MAKE_FUNCTION_six$$$function_22_b(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_b, tmp_assign_source_192 );
    tmp_assign_source_193 = MAKE_FUNCTION_six$$$function_23_u(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_u, tmp_assign_source_193 );
    tmp_assign_source_194 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr );

    if (unlikely( tmp_assign_source_194 == NULL ))
    {
        tmp_assign_source_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unichr );
    }

    if ( tmp_assign_source_194 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "unichr" );
        exception_tb = NULL;

        exception_lineno = 648;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr, tmp_assign_source_194 );
    tmp_assign_source_195 = LOOKUP_BUILTIN( const_str_plain_chr );
    assert( tmp_assign_source_195 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_195 );
    tmp_assign_source_196 = MAKE_FUNCTION_six$$$function_24_byte2int(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_byte2int, tmp_assign_source_196 );
    tmp_assign_source_197 = MAKE_FUNCTION_six$$$function_25_indexbytes(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_indexbytes, tmp_assign_source_197 );
    tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_46 == NULL ))
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 656;
        goto frame_exception_exit_1;
    }

    tmp_called_name_179 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_partial );
    if ( tmp_called_name_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        goto frame_exception_exit_1;
    }
    tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_47 == NULL ))
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_47 == NULL )
    {
        Py_DECREF( tmp_called_name_179 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "itertools" );
        exception_tb = NULL;

        exception_lineno = 656;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_84 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_imap );
    if ( tmp_args_element_name_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_179 );

        exception_lineno = 656;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_85 = LOOKUP_BUILTIN( const_str_plain_ord );
    assert( tmp_args_element_name_85 != NULL );
    frame_module->f_lineno = 656;
    {
        PyObject *call_args[] = { tmp_args_element_name_84, tmp_args_element_name_85 };
        tmp_assign_source_198 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_179, call_args );
    }

    Py_DECREF( tmp_called_name_179 );
    Py_DECREF( tmp_args_element_name_84 );
    if ( tmp_assign_source_198 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterbytes, tmp_assign_source_198 );
    tmp_import_globals_8 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 657;
    tmp_assign_source_199 = IMPORT_MODULE( const_str_plain_StringIO, tmp_import_globals_8, tmp_import_globals_8, Py_None, const_int_0 );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 657;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_199 );
    // Tried code:
    tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO );

    if (unlikely( tmp_source_name_48 == NULL ))
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringIO );
    }

    if ( tmp_source_name_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "StringIO" );
        exception_tb = NULL;

        exception_lineno = 658;
        goto try_except_handler_25;
    }

    tmp_assign_source_200 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_StringIO );
    if ( tmp_assign_source_200 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 658;
        goto try_except_handler_25;
    }
    assert( tmp_assign_unpack_1__assign_source == NULL );
    tmp_assign_unpack_1__assign_source = tmp_assign_source_200;

    goto try_end_25;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    tmp_assign_source_201 = tmp_assign_unpack_1__assign_source;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_201 );
    tmp_assign_source_202 = tmp_assign_unpack_1__assign_source;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_202 );
    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
    Py_DECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    tmp_assign_source_203 = const_str_plain_assertItemsEqual;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertCountEqual, tmp_assign_source_203 );
    tmp_assign_source_204 = const_str_plain_assertRaisesRegexp;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex, tmp_assign_source_204 );
    tmp_assign_source_205 = const_str_plain_assertRegexpMatches;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex, tmp_assign_source_205 );
    branch_end_12:;
    tmp_called_name_180 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_180 == NULL ))
    {
        tmp_called_name_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_180 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 662;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_86 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_b );

    if (unlikely( tmp_args_element_name_86 == NULL ))
    {
        tmp_args_element_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_b );
    }

    if ( tmp_args_element_name_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "b" );
        exception_tb = NULL;

        exception_lineno = 662;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_87 = const_str_digest_0e07ea38c4cf2fbcefc89e7de4db934c;
    frame_module->f_lineno = 662;
    {
        PyObject *call_args[] = { tmp_args_element_name_86, tmp_args_element_name_87 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_180, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 662;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_181 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_181 == NULL ))
    {
        tmp_called_name_181 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_181 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 663;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_88 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_u );

    if (unlikely( tmp_args_element_name_88 == NULL ))
    {
        tmp_args_element_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_u );
    }

    if ( tmp_args_element_name_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "u" );
        exception_tb = NULL;

        exception_lineno = 663;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_89 = const_str_digest_ebf751844f7678efef5423dab5acd577;
    frame_module->f_lineno = 663;
    {
        PyObject *call_args[] = { tmp_args_element_name_88, tmp_args_element_name_89 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_181, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 663;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_206 = MAKE_FUNCTION_six$$$function_26_assertCountEqual(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_assertCountEqual, tmp_assign_source_206 );
    tmp_assign_source_207 = MAKE_FUNCTION_six$$$function_27_assertRaisesRegex(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_assertRaisesRegex, tmp_assign_source_207 );
    tmp_assign_source_208 = MAKE_FUNCTION_six$$$function_28_assertRegex(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_assertRegex, tmp_assign_source_208 );
    tmp_cond_value_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_8 == NULL ))
    {
        tmp_cond_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 678;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 678;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_49 == NULL ))
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 679;
        goto frame_exception_exit_1;
    }

    tmp_getattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_builtins );
    if ( tmp_getattr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 679;
        goto frame_exception_exit_1;
    }
    tmp_getattr_attr_1 = const_str_plain_exec;
    tmp_assign_source_209 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_target_1 );
    if ( tmp_assign_source_209 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 679;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_, tmp_assign_source_209 );
    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_210 = MAKE_FUNCTION_six$$$function_29_reraise( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_reraise, tmp_assign_source_210 );
    goto branch_end_14;
    branch_no_14:;
    tmp_defaults_2 = const_tuple_none_none_tuple;
    tmp_assign_source_211 = MAKE_FUNCTION_six$$$function_30_exec_( INCREASE_REFCOUNT( tmp_defaults_2 ) );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_, tmp_assign_source_211 );
    tmp_called_name_182 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_name_182 == NULL ))
    {
        tmp_called_name_182 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_name_182 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "exec_" );
        exception_tb = NULL;

        exception_lineno = 701;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 703;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_182, &PyTuple_GET_ITEM( const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 703;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_14:;
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = 2;
    tmp_source_name_50 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_50 == NULL ))
    {
        tmp_source_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 706;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_version_info );
    if ( tmp_slice_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_2 );
    if ( tmp_compare_left_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_21 = const_tuple_int_pos_3_int_pos_2_tuple;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_21, tmp_compare_right_21 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_21 );

        exception_lineno = 706;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_21 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_called_name_183 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_name_183 == NULL ))
    {
        tmp_called_name_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_name_183 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "exec_" );
        exception_tb = NULL;

        exception_lineno = 707;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 711;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_183, &PyTuple_GET_ITEM( const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 711;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_15;
    branch_no_15:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = 2;
    tmp_source_name_51 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_51 == NULL ))
    {
        tmp_source_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 712;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_version_info );
    if ( tmp_slice_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 712;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    Py_DECREF( tmp_slice_source_3 );
    if ( tmp_compare_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 712;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_22 = const_tuple_int_pos_3_int_pos_2_tuple;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_22, tmp_compare_right_22 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_22 );

        exception_lineno = 712;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_22 );
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_called_name_184 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_name_184 == NULL ))
    {
        tmp_called_name_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_name_184 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "exec_" );
        exception_tb = NULL;

        exception_lineno = 713;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 715;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_184, &PyTuple_GET_ITEM( const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 715;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_16;
    branch_no_16:;
    tmp_assign_source_212 = MAKE_FUNCTION_six$$$function_31_raise_from(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_raise_from, tmp_assign_source_212 );
    branch_end_16:;
    branch_end_15:;
    tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_52 == NULL ))
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 721;
        goto frame_exception_exit_1;
    }

    tmp_getattr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_builtins );
    if ( tmp_getattr_target_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 721;
        goto frame_exception_exit_1;
    }
    tmp_getattr_attr_2 = const_str_plain_print;
    tmp_getattr_default_1 = Py_None;
    tmp_assign_source_213 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_1 );
    Py_DECREF( tmp_getattr_target_2 );
    if ( tmp_assign_source_213 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 721;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_213 );
    tmp_compare_left_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_ );

    if (unlikely( tmp_compare_left_23 == NULL ))
    {
        tmp_compare_left_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_print_ );
    }

    if ( tmp_compare_left_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "print_" );
        exception_tb = NULL;

        exception_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_23 = Py_None;
    tmp_is_2 = ( tmp_compare_left_23 == tmp_compare_right_23 );
    if ( tmp_is_2 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_assign_source_214 = MAKE_FUNCTION_six$$$function_32_print_(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_214 );
    branch_no_17:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = 2;
    tmp_source_name_53 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_53 == NULL ))
    {
        tmp_source_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 776;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_4 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_version_info );
    if ( tmp_slice_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_24 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    Py_DECREF( tmp_slice_source_4 );
    if ( tmp_compare_left_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_24 = const_tuple_int_pos_3_int_pos_3_tuple;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_24, tmp_compare_right_24 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_24 );

        exception_lineno = 776;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_24 );
    if ( tmp_cmp_Lt_1 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_assign_source_215 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_ );

    if (unlikely( tmp_assign_source_215 == NULL ))
    {
        tmp_assign_source_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_print_ );
    }

    if ( tmp_assign_source_215 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "print_" );
        exception_tb = NULL;

        exception_lineno = 777;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__print, tmp_assign_source_215 );
    tmp_assign_source_216 = MAKE_FUNCTION_six$$$function_33_print_(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_216 );
    branch_no_18:;
    tmp_called_name_185 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_185 == NULL ))
    {
        tmp_called_name_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_185 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 786;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_90 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_reraise );

    if (unlikely( tmp_args_element_name_90 == NULL ))
    {
        tmp_args_element_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_reraise );
    }

    if ( tmp_args_element_name_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "reraise" );
        exception_tb = NULL;

        exception_lineno = 786;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_91 = const_str_digest_91987f05961643baf523130276babe51;
    frame_module->f_lineno = 786;
    {
        PyObject *call_args[] = { tmp_args_element_name_90, tmp_args_element_name_91 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_185, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 786;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = 2;
    tmp_source_name_54 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_54 == NULL ))
    {
        tmp_source_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_54 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 788;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_5 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_version_info );
    if ( tmp_slice_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 788;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    Py_DECREF( tmp_slice_source_5 );
    if ( tmp_compare_left_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 788;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_25 = const_tuple_int_pos_3_int_pos_4_tuple;
    tmp_cmp_Lt_2 = RICH_COMPARE_BOOL_LT( tmp_compare_left_25, tmp_compare_right_25 );
    if ( tmp_cmp_Lt_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_25 );

        exception_lineno = 788;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_25 );
    if ( tmp_cmp_Lt_2 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_defaults_3 = PyTuple_New( 2 );
    tmp_source_name_55 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_55 == NULL ))
    {
        tmp_source_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_55 == NULL )
    {
        Py_DECREF( tmp_defaults_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_21 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_WRAPPER_ASSIGNMENTS );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_defaults_3 );

        exception_lineno = 789;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_defaults_3, 0, tmp_tuple_element_21 );
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_56 == NULL )
    {
        Py_DECREF( tmp_defaults_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 790;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_21 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_WRAPPER_UPDATES );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_defaults_3 );

        exception_lineno = 790;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_defaults_3, 1, tmp_tuple_element_21 );
    tmp_assign_source_217 = MAKE_FUNCTION_six$$$function_34_wraps( tmp_defaults_3 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_wraps, tmp_assign_source_217 );
    goto branch_end_19;
    branch_no_19:;
    tmp_source_name_57 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_57 == NULL ))
    {
        tmp_source_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_57 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 797;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_218 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_wraps );
    if ( tmp_assign_source_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 797;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_wraps, tmp_assign_source_218 );
    branch_end_19:;
    tmp_assign_source_219 = MAKE_FUNCTION_six$$$function_35_with_metaclass(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_with_metaclass, tmp_assign_source_219 );
    tmp_assign_source_220 = MAKE_FUNCTION_six$$$function_36_add_metaclass(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_add_metaclass, tmp_assign_source_220 );
    tmp_assign_source_221 = MAKE_FUNCTION_six$$$function_37_python_2_unicode_compatible(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_python_2_unicode_compatible, tmp_assign_source_221 );
    tmp_assign_source_222 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain___path__, tmp_assign_source_222 );
    tmp_assign_source_223 = const_str_plain_six;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_223 );
    tmp_source_name_58 = ((PyModuleObject *)module_six)->md_dict;
    tmp_called_name_186 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_get );
    if ( tmp_called_name_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 851;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 851;
    tmp_compare_left_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_186, &PyTuple_GET_ITEM( const_tuple_str_plain___spec___tuple, 0 ) );

    Py_DECREF( tmp_called_name_186 );
    if ( tmp_compare_left_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 851;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_26 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_26 != tmp_compare_right_26 );
    Py_DECREF( tmp_compare_left_26 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_assattr_name_7 = PyList_New( 0 );
    tmp_assattr_target_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___spec__ );

    if (unlikely( tmp_assattr_target_7 == NULL ))
    {
        tmp_assattr_target_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
    }

    if ( tmp_assattr_target_7 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "__spec__" );
        exception_tb = NULL;

        exception_lineno = 852;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_submodule_search_locations, tmp_assattr_name_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );

        exception_lineno = 852;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_7 );
    branch_no_20:;
    tmp_source_name_59 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_59 == NULL ))
    {
        tmp_source_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 856;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_9 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_meta_path );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 856;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 856;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_called_name_187 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    assert( tmp_called_name_187 != NULL );
    tmp_source_name_60 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_60 == NULL ))
    {
        tmp_source_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 857;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_92 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_meta_path );
    if ( tmp_args_element_name_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 857;
    {
        PyObject *call_args[] = { tmp_args_element_name_92 };
        tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_187, call_args );
    }

    Py_DECREF( tmp_args_element_name_92 );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_224 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_224 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_224;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    tmp_assign_source_225 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_225 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 857;
            goto try_except_handler_26;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_225;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_8 = tmp_for_loop_7__iter_value;

    tmp_assign_source_226 = MAKE_ITERATOR( tmp_iter_arg_8 );
    if ( tmp_assign_source_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;
        goto try_except_handler_27;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_226;
        Py_XDECREF( old );
    }

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_227 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_227 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 857;
        goto try_except_handler_27;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_227;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_228 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_228 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 857;
        goto try_except_handler_27;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_228;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_27;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_27;
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto try_except_handler_26;
    // End of try:
    try_end_26:;
    tmp_assign_source_229 = tmp_tuple_unpack_1__element_1;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_i, tmp_assign_source_229 );
    tmp_assign_source_230 = tmp_tuple_unpack_1__element_2;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer, tmp_assign_source_230 );
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_1 );
    Py_DECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__element_2 );
    Py_DECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_type_arg_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer );

    if (unlikely( tmp_type_arg_1 == NULL ))
    {
        tmp_type_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_importer );
    }

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "importer" );
        exception_tb = NULL;

        exception_lineno = 862;
        goto try_except_handler_26;
    }

    tmp_source_name_61 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_source_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 862;
        goto try_except_handler_26;
    }
    tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_61 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 862;
        goto try_except_handler_26;
    }
    tmp_compexpr_right_4 = const_str_plain__SixMetaPathImporter;
    tmp_and_left_value_1 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 862;
        goto try_except_handler_26;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 863;
        goto try_except_handler_26;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_62 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer );

    if (unlikely( tmp_source_name_62 == NULL ))
    {
        tmp_source_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_importer );
    }

    if ( tmp_source_name_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "importer" );
        exception_tb = NULL;

        exception_lineno = 863;
        goto try_except_handler_26;
    }

    tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_name );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 863;
        goto try_except_handler_26;
    }
    tmp_compexpr_right_5 = const_str_plain_six;
    tmp_and_right_value_1 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 863;
        goto try_except_handler_26;
    }
    tmp_cond_value_10 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_10 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 863;
        goto try_except_handler_26;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_63 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_63 == NULL ))
    {
        tmp_source_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 864;
        goto try_except_handler_26;
    }

    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_meta_path );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 864;
        goto try_except_handler_26;
    }
    tmp_delsubscr_subscript_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_i );

    if (unlikely( tmp_delsubscr_subscript_1 == NULL ))
    {
        tmp_delsubscr_subscript_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_i );
    }

    if ( tmp_delsubscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_delsubscr_target_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "i" );
        exception_tb = NULL;

        exception_lineno = 864;
        goto try_except_handler_26;
    }

    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 864;
        goto try_except_handler_26;
    }
    goto loop_end_7;
    branch_no_22:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;
        goto try_except_handler_26;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_27;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_i );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1856 ], 23, 0 );
        exception_tb = NULL;

        exception_lineno = 866;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_importer );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 30, 0 );
        exception_tb = NULL;

        exception_lineno = 866;
        goto frame_exception_exit_1;
    }

    branch_no_21:;
    tmp_source_name_65 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_65 == NULL ))
    {
        tmp_source_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 868;
        goto frame_exception_exit_1;
    }

    tmp_source_name_64 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_meta_path );
    if ( tmp_source_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_called_name_188 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_append );
    Py_DECREF( tmp_source_name_64 );
    if ( tmp_called_name_188 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_93 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_args_element_name_93 == NULL ))
    {
        tmp_args_element_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_args_element_name_93 == NULL )
    {
        Py_DECREF( tmp_called_name_188 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 868;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 868;
    {
        PyObject *call_args[] = { tmp_args_element_name_93 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_188, call_args );
    }

    Py_DECREF( tmp_called_name_188 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

    // Restore frame exception if necessary.
#if 1
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module, exception_lineno );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module, exception_lineno );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;

    return MOD_RETURN_VALUE( module_six );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
